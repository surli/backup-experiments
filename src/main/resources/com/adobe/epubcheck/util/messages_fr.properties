single_file=Le fichier est validé en tant que fichier individuel de type %1$s, pour EPUB version %2$s utilisant le profil de validation %3$s. Seul un sous-ensemble des tests disponibles est lancé.
opv_version_test=*** Candidat à la suppression *** Les tests sont passés uniquement sur la version OPF.
mode_version_not_supported=Le validateur ne fonctionne que sur le type %1$s et la version %2$s.

no_errors__or_warnings=Aucune erreur ou avertissement détecté.
there_were_errors=\nVérifications terminés avec des erreurs\n
there_were_warnings=\nVérifications terminés avec des avertissements\n

error_processing_unexpanded_epub=\nCette vérification ne peut être menée sur des epubs éclatés\n
deleting_archive=\nLa création de l'epub a été annulée suite aux erreurs détectées.\n
display_help=-help affiche l'aide
argument_needed=Un argument au moins est attendu
version_argument_expected=Le numéro de version a été omis dans l'argument -version.
mode_argument_expected=Le type a été omis dans l'argument -mode.
profile_argument_expected=Le nom du profil a été omis après l'argument -profile.
profile_unknown=Profile '%1$s' inconnu, utilisation du profil de validation par défaut.
no_file_specified=Aucun fichier n'a été précisé dans les arguments. Sortie.
mode_version_ignored=Les arguments de mode et de version sont ignorés pour les epubs. Ils sont récupérés dans les fichiers.
mode_required=Argument mode obligatoire pour les fichiers non-epubs. La version par défault est 3.0.
validating_version_message=Vérifications faites en utilisant les règles de la version epub %1$s.
output_type_conflict=Seul un type de format de sortie peut être précisé à la fois.
validating_against_epub_version=Vérification par rapport à l'epub version %1$s - vérification personnalisée
file_not_found=Fichier introuvable : '%1$s'
directory_not_found=Directory not found: '%1$s'
epubcheck_completed=epubcheck terminé
error_creating_config_file=Erreur lors de la création du fichier de configuration '%1$s'.
expected_message_filename=Nom du fichier de configuration personnalisée attendu, mais '%1$s' fourni
unrecognized_argument=Argument inconnu: '%1$s'

help_text = EpubCheck v%1$s\n\n\
          Pour utiliser cet outil,  le premier argument doit être le nom (ou le chemin) du fichier à valider.\n\n\
          Pour spécifier un profil de validation (pour effectuer les vérifications spécifiques à un profil ou une extension EPUB 3), utilisez l'option -profile.\n\n\
          Profils de validation acceptés :\n\
          --profile default // le profil de validation par défaut\n\
          --profile dict    // vérifie les règles de la spécification Dictionnaires et Glossaires EPUB\n\
          --profile edupub  // vérifie les règles du profil EDUPUB\n\
          --profile idx     // vérifie les règles de la spécification Indexes EPUB\n\
          --profile preview // vérifie les règles de la spécification Aperçus EPUB\n\n\
          En cas de vérification d'un fichier simple inclus dans un EPUB, la version de la spécification EPUB à vérifier doit être spécifiée avec l'option -v et le type de \n\
          fichier avec l'option -mode.\n\
          La version par défaut est 3.0.\n\n\
          Modes et versions acceptés : \n\
          --mode opf -v 2.0\n\
          --mode opf -v 3.0\n\
          --mode xhtml -v 2.0\n\
          --mode xhtml -v 3.0\n\
          --mode svg -v 2.0\n\
          --mode svg -v 3.0\n\
          --mode nav -v 3.0\n\
          --mode mo  -v 3.0 // Pour une vérification des Media Overlays\n\
          --mode exp  // Pour une vérification de répertoire EPUB non-compressé\n\n\
          Cet outil accepte les options suivantes :\n\
          --save \t       = sauvegarde un EPUB créé depuis un EPUB non-compressé\n\
          --out <file>     = produit un rapport de validation XML (utiliser - pour le produire sur la\n\
          \                          sortie standard)\n\
          --xmp <file>     = produit un rapport de validation XMP (utiliser - pour le produire sur la\n\
          \                           sortie standard)\n\
          --json <file>    = produit un rapport de validation JSON (utiliser - pour le produire sur la\n\
          \                          sortie standard)\n\
          -m <file>        = voir --mode\n\
          -p <profile>     = voir --profile\n\
          -o <file>        = voir --out\n\
          -x <file>        = voir --xmp\n\
          -j <file>        = voir --json\n\
          --failonwarnings[+|-] = Par défaut, cet outil renvoie 1 si des erreurs sont trouvées ou 0 si le fichier\n\
          \                        ne contient aucune erreurs. En utilisant --failonwarnings, 1 sera renvoyé également\n\
          \                        en cas de warnings, et 0 ne sera renvoyés que si le fichier ne contient ni erreurs ni\n\
          \                        warnings.\n\
          -q, --quiet      = seuls les messages d'erreurs sont produits sur la sortie standard.\n\
          -f, --fatal      = inclure uniquement les erreurs fatales dans la sortie.\n\
          -e, --error      = inclure uniquement les erreurs et erreurs fatales dans la sortie.\n\
          -w, --warn       = inclure uniquement les erreurs, erreurs fatales, et warnings dans la sortie.\n\
          -u, --usage      = inclure les informations d'usage dans la sortie (OFF par défaut) ;\n\
          \                           si cette option est activée, des informations d'usage apparaitront systématiquement\n\
          \                           dans les rapports de validation.\n\n\
          -l, --listChecks [<file>] = liste les identificateurs de message et les niveaux de sévérité dans le fichier\n\
          \                                       de sortie <file> ou sur la sortie standard.\n\
          -c, --customMessages [<file>] = remplace les niveaux de sévérité par défaut par ceux contenus\n\
          \                                          dans le fichier <file>\n\n\
          -h, -? or --help = affiche cette aide

