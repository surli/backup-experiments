/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.liveramp.hank.generated;

import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RuntimeStatisticsSummary implements org.apache.thrift.TBase<RuntimeStatisticsSummary, RuntimeStatisticsSummary._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RuntimeStatisticsSummary");

  private static final org.apache.thrift.protocol.TField DOMAIN_STATISTICS_FIELD_DESC = new org.apache.thrift.protocol.TField("domain_statistics", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RuntimeStatisticsSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RuntimeStatisticsSummaryTupleSchemeFactory());
  }

  public Map<String,DomainStatisticsSummary> domain_statistics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DOMAIN_STATISTICS((short)1, "domain_statistics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DOMAIN_STATISTICS
          return DOMAIN_STATISTICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DOMAIN_STATISTICS, new org.apache.thrift.meta_data.FieldMetaData("domain_statistics", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DomainStatisticsSummary.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RuntimeStatisticsSummary.class, metaDataMap);
  }

  public RuntimeStatisticsSummary() {
  }

  public RuntimeStatisticsSummary(
    Map<String,DomainStatisticsSummary> domain_statistics)
  {
    this();
    this.domain_statistics = domain_statistics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RuntimeStatisticsSummary(RuntimeStatisticsSummary other) {
    if (other.is_set_domain_statistics()) {
      Map<String,DomainStatisticsSummary> __this__domain_statistics = new HashMap<String,DomainStatisticsSummary>();
      for (Map.Entry<String, DomainStatisticsSummary> other_element : other.domain_statistics.entrySet()) {

        String other_element_key = other_element.getKey();
        DomainStatisticsSummary other_element_value = other_element.getValue();

        String __this__domain_statistics_copy_key = other_element_key;

        DomainStatisticsSummary __this__domain_statistics_copy_value = new DomainStatisticsSummary(other_element_value);

        __this__domain_statistics.put(__this__domain_statistics_copy_key, __this__domain_statistics_copy_value);
      }
      this.domain_statistics = __this__domain_statistics;
    }
  }

  public RuntimeStatisticsSummary deepCopy() {
    return new RuntimeStatisticsSummary(this);
  }

  @Override
  public void clear() {
    this.domain_statistics = null;
  }

  public int get_domain_statistics_size() {
    return (this.domain_statistics == null) ? 0 : this.domain_statistics.size();
  }

  public void put_to_domain_statistics(String key, DomainStatisticsSummary val) {
    if (this.domain_statistics == null) {
      this.domain_statistics = new HashMap<String,DomainStatisticsSummary>();
    }
    this.domain_statistics.put(key, val);
  }

  public Map<String,DomainStatisticsSummary> get_domain_statistics() {
    return this.domain_statistics;
  }

  public RuntimeStatisticsSummary set_domain_statistics(Map<String,DomainStatisticsSummary> domain_statistics) {
    this.domain_statistics = domain_statistics;
    return this;
  }

  public void unset_domain_statistics() {
    this.domain_statistics = null;
  }

  /** Returns true if field domain_statistics is set (has been assigned a value) and false otherwise */
  public boolean is_set_domain_statistics() {
    return this.domain_statistics != null;
  }

  public void set_domain_statistics_isSet(boolean value) {
    if (!value) {
      this.domain_statistics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DOMAIN_STATISTICS:
      if (value == null) {
        unset_domain_statistics();
      } else {
        set_domain_statistics((Map<String,DomainStatisticsSummary>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DOMAIN_STATISTICS:
      return get_domain_statistics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DOMAIN_STATISTICS:
      return is_set_domain_statistics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RuntimeStatisticsSummary)
      return this.equals((RuntimeStatisticsSummary)that);
    return false;
  }

  public boolean equals(RuntimeStatisticsSummary that) {
    if (that == null)
      return false;

    boolean this_present_domain_statistics = true && this.is_set_domain_statistics();
    boolean that_present_domain_statistics = true && that.is_set_domain_statistics();
    if (this_present_domain_statistics || that_present_domain_statistics) {
      if (!(this_present_domain_statistics && that_present_domain_statistics))
        return false;
      if (!this.domain_statistics.equals(that.domain_statistics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_domain_statistics = true && (is_set_domain_statistics());
    builder.append(present_domain_statistics);
    if (present_domain_statistics)
      builder.append(domain_statistics);

    return builder.toHashCode();
  }

  public int compareTo(RuntimeStatisticsSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RuntimeStatisticsSummary typedOther = (RuntimeStatisticsSummary)other;

    lastComparison = Boolean.valueOf(is_set_domain_statistics()).compareTo(typedOther.is_set_domain_statistics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (is_set_domain_statistics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.domain_statistics, typedOther.domain_statistics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RuntimeStatisticsSummary(");
    boolean first = true;

    sb.append("domain_statistics:");
    if (this.domain_statistics == null) {
      sb.append("null");
    } else {
      sb.append(this.domain_statistics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (domain_statistics == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'domain_statistics' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RuntimeStatisticsSummaryStandardSchemeFactory implements SchemeFactory {
    public RuntimeStatisticsSummaryStandardScheme getScheme() {
      return new RuntimeStatisticsSummaryStandardScheme();
    }
  }

  private static class RuntimeStatisticsSummaryStandardScheme extends StandardScheme<RuntimeStatisticsSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RuntimeStatisticsSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DOMAIN_STATISTICS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map86 = iprot.readMapBegin();
                struct.domain_statistics = new HashMap<String,DomainStatisticsSummary>(2*_map86.size);
                for (int _i87 = 0; _i87 < _map86.size; ++_i87)
                {
                  String _key88; // required
                  DomainStatisticsSummary _val89; // optional
                  _key88 = iprot.readString();
                  _val89 = new DomainStatisticsSummary();
                  _val89.read(iprot);
                  struct.domain_statistics.put(_key88, _val89);
                }
                iprot.readMapEnd();
              }
              struct.set_domain_statistics_isSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RuntimeStatisticsSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.domain_statistics != null) {
        oprot.writeFieldBegin(DOMAIN_STATISTICS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.domain_statistics.size()));
          for (Map.Entry<String, DomainStatisticsSummary> _iter90 : struct.domain_statistics.entrySet())
          {
            oprot.writeString(_iter90.getKey());
            _iter90.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RuntimeStatisticsSummaryTupleSchemeFactory implements SchemeFactory {
    public RuntimeStatisticsSummaryTupleScheme getScheme() {
      return new RuntimeStatisticsSummaryTupleScheme();
    }
  }

  private static class RuntimeStatisticsSummaryTupleScheme extends TupleScheme<RuntimeStatisticsSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RuntimeStatisticsSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.domain_statistics.size());
        for (Map.Entry<String, DomainStatisticsSummary> _iter91 : struct.domain_statistics.entrySet())
        {
          oprot.writeString(_iter91.getKey());
          _iter91.getValue().write(oprot);
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RuntimeStatisticsSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.domain_statistics = new HashMap<String,DomainStatisticsSummary>(2*_map92.size);
        for (int _i93 = 0; _i93 < _map92.size; ++_i93)
        {
          String _key94; // required
          DomainStatisticsSummary _val95; // optional
          _key94 = iprot.readString();
          _val95 = new DomainStatisticsSummary();
          _val95.read(iprot);
          struct.domain_statistics.put(_key94, _val95);
        }
      }
      struct.set_domain_statistics_isSet(true);
    }
  }

}

