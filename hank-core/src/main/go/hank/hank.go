// Autogenerated by Thrift Compiler (0.10.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hank

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

// Attributes:
//  - WrongHost: The host queried is not assigned the key that was requested
//  - NoSuchDomain: The domain passed in the request does not correspond to a valid domain
//  - NoReplica: There was no replica for a given partition
//  - NoConnectionAvailable: There were no available connections for a given partition
//  - FailedRetries: Failed to perform query after a specified number of retries
//  - InternalError: There was some internal error in the server. This is pretty bad.
type HankException struct {
  WrongHost *bool `thrift:"wrong_host,1" db:"wrong_host" json:"wrong_host,omitempty"`
  NoSuchDomain *bool `thrift:"no_such_domain,2" db:"no_such_domain" json:"no_such_domain,omitempty"`
  NoReplica *bool `thrift:"no_replica,3" db:"no_replica" json:"no_replica,omitempty"`
  NoConnectionAvailable *bool `thrift:"no_connection_available,4" db:"no_connection_available" json:"no_connection_available,omitempty"`
  FailedRetries *int32 `thrift:"failed_retries,5" db:"failed_retries" json:"failed_retries,omitempty"`
  InternalError *string `thrift:"internal_error,6" db:"internal_error" json:"internal_error,omitempty"`
}

func NewHankException() *HankException {
  return &HankException{}
}

var HankException_WrongHost_DEFAULT bool
func (p *HankException) GetWrongHost() bool {
  if !p.IsSetWrongHost() {
    return HankException_WrongHost_DEFAULT
  }
return *p.WrongHost
}
var HankException_NoSuchDomain_DEFAULT bool
func (p *HankException) GetNoSuchDomain() bool {
  if !p.IsSetNoSuchDomain() {
    return HankException_NoSuchDomain_DEFAULT
  }
return *p.NoSuchDomain
}
var HankException_NoReplica_DEFAULT bool
func (p *HankException) GetNoReplica() bool {
  if !p.IsSetNoReplica() {
    return HankException_NoReplica_DEFAULT
  }
return *p.NoReplica
}
var HankException_NoConnectionAvailable_DEFAULT bool
func (p *HankException) GetNoConnectionAvailable() bool {
  if !p.IsSetNoConnectionAvailable() {
    return HankException_NoConnectionAvailable_DEFAULT
  }
return *p.NoConnectionAvailable
}
var HankException_FailedRetries_DEFAULT int32
func (p *HankException) GetFailedRetries() int32 {
  if !p.IsSetFailedRetries() {
    return HankException_FailedRetries_DEFAULT
  }
return *p.FailedRetries
}
var HankException_InternalError_DEFAULT string
func (p *HankException) GetInternalError() string {
  if !p.IsSetInternalError() {
    return HankException_InternalError_DEFAULT
  }
return *p.InternalError
}
func (p *HankException) CountSetFieldsHankException() int {
  count := 0
  if (p.IsSetWrongHost()) {
    count++
  }
  if (p.IsSetNoSuchDomain()) {
    count++
  }
  if (p.IsSetNoReplica()) {
    count++
  }
  if (p.IsSetNoConnectionAvailable()) {
    count++
  }
  if (p.IsSetFailedRetries()) {
    count++
  }
  if (p.IsSetInternalError()) {
    count++
  }
  return count

}

func (p *HankException) IsSetWrongHost() bool {
  return p.WrongHost != nil
}

func (p *HankException) IsSetNoSuchDomain() bool {
  return p.NoSuchDomain != nil
}

func (p *HankException) IsSetNoReplica() bool {
  return p.NoReplica != nil
}

func (p *HankException) IsSetNoConnectionAvailable() bool {
  return p.NoConnectionAvailable != nil
}

func (p *HankException) IsSetFailedRetries() bool {
  return p.FailedRetries != nil
}

func (p *HankException) IsSetInternalError() bool {
  return p.InternalError != nil
}

func (p *HankException) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HankException)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.WrongHost = &v
}
  return nil
}

func (p *HankException)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NoSuchDomain = &v
}
  return nil
}

func (p *HankException)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NoReplica = &v
}
  return nil
}

func (p *HankException)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NoConnectionAvailable = &v
}
  return nil
}

func (p *HankException)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.FailedRetries = &v
}
  return nil
}

func (p *HankException)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.InternalError = &v
}
  return nil
}

func (p *HankException) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsHankException(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("HankException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HankException) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetWrongHost() {
    if err := oprot.WriteFieldBegin("wrong_host", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wrong_host: ", p), err) }
    if err := oprot.WriteBool(bool(*p.WrongHost)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.wrong_host (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wrong_host: ", p), err) }
  }
  return err
}

func (p *HankException) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoSuchDomain() {
    if err := oprot.WriteFieldBegin("no_such_domain", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:no_such_domain: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoSuchDomain)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.no_such_domain (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:no_such_domain: ", p), err) }
  }
  return err
}

func (p *HankException) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoReplica() {
    if err := oprot.WriteFieldBegin("no_replica", thrift.BOOL, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:no_replica: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoReplica)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.no_replica (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:no_replica: ", p), err) }
  }
  return err
}

func (p *HankException) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetNoConnectionAvailable() {
    if err := oprot.WriteFieldBegin("no_connection_available", thrift.BOOL, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:no_connection_available: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NoConnectionAvailable)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.no_connection_available (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:no_connection_available: ", p), err) }
  }
  return err
}

func (p *HankException) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFailedRetries() {
    if err := oprot.WriteFieldBegin("failed_retries", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:failed_retries: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FailedRetries)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.failed_retries (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:failed_retries: ", p), err) }
  }
  return err
}

func (p *HankException) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetInternalError() {
    if err := oprot.WriteFieldBegin("internal_error", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:internal_error: ", p), err) }
    if err := oprot.WriteString(string(*p.InternalError)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.internal_error (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:internal_error: ", p), err) }
  }
  return err
}

func (p *HankException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankException(%+v)", *p)
}

// Attributes:
//  - NotFound
//  - Value
//  - Xception
type HankResponse struct {
  NotFound *bool `thrift:"not_found,1" db:"not_found" json:"not_found,omitempty"`
  Value []byte `thrift:"value,2" db:"value" json:"value,omitempty"`
  Xception *HankException `thrift:"xception,3" db:"xception" json:"xception,omitempty"`
}

func NewHankResponse() *HankResponse {
  return &HankResponse{}
}

var HankResponse_NotFound_DEFAULT bool
func (p *HankResponse) GetNotFound() bool {
  if !p.IsSetNotFound() {
    return HankResponse_NotFound_DEFAULT
  }
return *p.NotFound
}
var HankResponse_Value_DEFAULT []byte

func (p *HankResponse) GetValue() []byte {
  return p.Value
}
var HankResponse_Xception_DEFAULT *HankException
func (p *HankResponse) GetXception() *HankException {
  if !p.IsSetXception() {
    return HankResponse_Xception_DEFAULT
  }
return p.Xception
}
func (p *HankResponse) CountSetFieldsHankResponse() int {
  count := 0
  if (p.IsSetNotFound()) {
    count++
  }
  if (p.IsSetXception()) {
    count++
  }
  return count

}

func (p *HankResponse) IsSetNotFound() bool {
  return p.NotFound != nil
}

func (p *HankResponse) IsSetValue() bool {
  return p.Value != nil
}

func (p *HankResponse) IsSetXception() bool {
  return p.Xception != nil
}

func (p *HankResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HankResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NotFound = &v
}
  return nil
}

func (p *HankResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *HankResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.Xception = &HankException{}
  if err := p.Xception.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Xception), err)
  }
  return nil
}

func (p *HankResponse) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsHankResponse(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("HankResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HankResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetNotFound() {
    if err := oprot.WriteFieldBegin("not_found", thrift.BOOL, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:not_found: ", p), err) }
    if err := oprot.WriteBool(bool(*p.NotFound)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.not_found (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:not_found: ", p), err) }
  }
  return err
}

func (p *HankResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := oprot.WriteBinary(p.Value); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *HankResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetXception() {
    if err := oprot.WriteFieldBegin("xception", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:xception: ", p), err) }
    if err := p.Xception.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Xception), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:xception: ", p), err) }
  }
  return err
}

func (p *HankResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankResponse(%+v)", *p)
}

// Attributes:
//  - Responses
//  - Xception
type HankBulkResponse struct {
  Responses []*HankResponse `thrift:"responses,1" db:"responses" json:"responses,omitempty"`
  Xception *HankException `thrift:"xception,2" db:"xception" json:"xception,omitempty"`
}

func NewHankBulkResponse() *HankBulkResponse {
  return &HankBulkResponse{}
}

var HankBulkResponse_Responses_DEFAULT []*HankResponse

func (p *HankBulkResponse) GetResponses() []*HankResponse {
  return p.Responses
}
var HankBulkResponse_Xception_DEFAULT *HankException
func (p *HankBulkResponse) GetXception() *HankException {
  if !p.IsSetXception() {
    return HankBulkResponse_Xception_DEFAULT
  }
return p.Xception
}
func (p *HankBulkResponse) CountSetFieldsHankBulkResponse() int {
  count := 0
  if (p.IsSetXception()) {
    count++
  }
  return count

}

func (p *HankBulkResponse) IsSetResponses() bool {
  return p.Responses != nil
}

func (p *HankBulkResponse) IsSetXception() bool {
  return p.Xception != nil
}

func (p *HankBulkResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *HankBulkResponse)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*HankResponse, 0, size)
  p.Responses =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &HankResponse{}
    if err := _elem0.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Responses = append(p.Responses, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *HankBulkResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Xception = &HankException{}
  if err := p.Xception.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Xception), err)
  }
  return nil
}

func (p *HankBulkResponse) Write(oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsHankBulkResponse(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set).", p, c)
  }
  if err := oprot.WriteStructBegin("HankBulkResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HankBulkResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetResponses() {
    if err := oprot.WriteFieldBegin("responses", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:responses: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Responses)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Responses {
      if err := v.Write(oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:responses: ", p), err) }
  }
  return err
}

func (p *HankBulkResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetXception() {
    if err := oprot.WriteFieldBegin("xception", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:xception: ", p), err) }
    if err := p.Xception.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Xception), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:xception: ", p), err) }
  }
  return err
}

func (p *HankBulkResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HankBulkResponse(%+v)", *p)
}

// Attributes:
//  - ID
//  - NumPartitions
//  - StorageEngineFactoryClass
//  - StorageEngineOptions
//  - PartitionerClass
//  - RequiredHostFlags
//  - NextVersionNumber
type DomainMetadata struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  NumPartitions int32 `thrift:"num_partitions,2,required" db:"num_partitions" json:"num_partitions"`
  StorageEngineFactoryClass string `thrift:"storage_engine_factory_class,3,required" db:"storage_engine_factory_class" json:"storage_engine_factory_class"`
  StorageEngineOptions string `thrift:"storage_engine_options,4,required" db:"storage_engine_options" json:"storage_engine_options"`
  PartitionerClass string `thrift:"partitioner_class,5,required" db:"partitioner_class" json:"partitioner_class"`
  RequiredHostFlags string `thrift:"required_host_flags,6,required" db:"required_host_flags" json:"required_host_flags"`
  NextVersionNumber int32 `thrift:"next_version_number,7,required" db:"next_version_number" json:"next_version_number"`
}

func NewDomainMetadata() *DomainMetadata {
  return &DomainMetadata{}
}


func (p *DomainMetadata) GetID() int32 {
  return p.ID
}

func (p *DomainMetadata) GetNumPartitions() int32 {
  return p.NumPartitions
}

func (p *DomainMetadata) GetStorageEngineFactoryClass() string {
  return p.StorageEngineFactoryClass
}

func (p *DomainMetadata) GetStorageEngineOptions() string {
  return p.StorageEngineOptions
}

func (p *DomainMetadata) GetPartitionerClass() string {
  return p.PartitionerClass
}

func (p *DomainMetadata) GetRequiredHostFlags() string {
  return p.RequiredHostFlags
}

func (p *DomainMetadata) GetNextVersionNumber() int32 {
  return p.NextVersionNumber
}
func (p *DomainMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetNumPartitions bool = false;
  var issetStorageEngineFactoryClass bool = false;
  var issetStorageEngineOptions bool = false;
  var issetPartitionerClass bool = false;
  var issetRequiredHostFlags bool = false;
  var issetNextVersionNumber bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNumPartitions = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetStorageEngineFactoryClass = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetStorageEngineOptions = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetPartitionerClass = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetRequiredHostFlags = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNextVersionNumber = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetNumPartitions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumPartitions is not set"));
  }
  if !issetStorageEngineFactoryClass{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageEngineFactoryClass is not set"));
  }
  if !issetStorageEngineOptions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field StorageEngineOptions is not set"));
  }
  if !issetPartitionerClass{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartitionerClass is not set"));
  }
  if !issetRequiredHostFlags{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequiredHostFlags is not set"));
  }
  if !issetNextVersionNumber{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NextVersionNumber is not set"));
  }
  return nil
}

func (p *DomainMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DomainMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumPartitions = v
}
  return nil
}

func (p *DomainMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StorageEngineFactoryClass = v
}
  return nil
}

func (p *DomainMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StorageEngineOptions = v
}
  return nil
}

func (p *DomainMetadata)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PartitionerClass = v
}
  return nil
}

func (p *DomainMetadata)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RequiredHostFlags = v
}
  return nil
}

func (p *DomainMetadata)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NextVersionNumber = v
}
  return nil
}

func (p *DomainMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_partitions", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_partitions: ", p), err) }
  if err := oprot.WriteI32(int32(p.NumPartitions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_partitions (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_partitions: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storage_engine_factory_class", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:storage_engine_factory_class: ", p), err) }
  if err := oprot.WriteString(string(p.StorageEngineFactoryClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storage_engine_factory_class (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:storage_engine_factory_class: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storage_engine_options", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:storage_engine_options: ", p), err) }
  if err := oprot.WriteString(string(p.StorageEngineOptions)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storage_engine_options (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:storage_engine_options: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitioner_class", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:partitioner_class: ", p), err) }
  if err := oprot.WriteString(string(p.PartitionerClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitioner_class (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:partitioner_class: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("required_host_flags", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:required_host_flags: ", p), err) }
  if err := oprot.WriteString(string(p.RequiredHostFlags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.required_host_flags (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:required_host_flags: ", p), err) }
  return err
}

func (p *DomainMetadata) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("next_version_number", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:next_version_number: ", p), err) }
  if err := oprot.WriteI32(int32(p.NextVersionNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.next_version_number (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:next_version_number: ", p), err) }
  return err
}

func (p *DomainMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainMetadata(%+v)", *p)
}

// Attributes:
//  - NumBytes
//  - NumRecords
type PartitionMetadata struct {
  NumBytes int64 `thrift:"num_bytes,1,required" db:"num_bytes" json:"num_bytes"`
  NumRecords int64 `thrift:"num_records,2,required" db:"num_records" json:"num_records"`
}

func NewPartitionMetadata() *PartitionMetadata {
  return &PartitionMetadata{}
}


func (p *PartitionMetadata) GetNumBytes() int64 {
  return p.NumBytes
}

func (p *PartitionMetadata) GetNumRecords() int64 {
  return p.NumRecords
}
func (p *PartitionMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNumBytes bool = false;
  var issetNumRecords bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetNumBytes = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetNumRecords = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNumBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumBytes is not set"));
  }
  if !issetNumRecords{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRecords is not set"));
  }
  return nil
}

func (p *PartitionMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.NumBytes = v
}
  return nil
}

func (p *PartitionMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NumRecords = v
}
  return nil
}

func (p *PartitionMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PartitionMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_bytes", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:num_bytes: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumBytes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_bytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:num_bytes: ", p), err) }
  return err
}

func (p *PartitionMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_records", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:num_records: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumRecords)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_records (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:num_records: ", p), err) }
  return err
}

func (p *PartitionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionMetadata(%+v)", *p)
}

// Attributes:
//  - Properties
//  - Partitions
//  - Defunct
//  - ClosedAt
type DomainVersionMetadata struct {
  Properties []byte `thrift:"properties,1" db:"properties" json:"properties"`
  Partitions map[int32]*PartitionMetadata `thrift:"partitions,2,required" db:"partitions" json:"partitions"`
  Defunct bool `thrift:"defunct,3,required" db:"defunct" json:"defunct"`
  ClosedAt int64 `thrift:"closed_at,4,required" db:"closed_at" json:"closed_at"`
}

func NewDomainVersionMetadata() *DomainVersionMetadata {
  return &DomainVersionMetadata{}
}


func (p *DomainVersionMetadata) GetProperties() []byte {
  return p.Properties
}

func (p *DomainVersionMetadata) GetPartitions() map[int32]*PartitionMetadata {
  return p.Partitions
}

func (p *DomainVersionMetadata) GetDefunct() bool {
  return p.Defunct
}

func (p *DomainVersionMetadata) GetClosedAt() int64 {
  return p.ClosedAt
}
func (p *DomainVersionMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitions bool = false;
  var issetDefunct bool = false;
  var issetClosedAt bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetPartitions = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetDefunct = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetClosedAt = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Partitions is not set"));
  }
  if !issetDefunct{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Defunct is not set"));
  }
  if !issetClosedAt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClosedAt is not set"));
  }
  return nil
}

func (p *DomainVersionMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Properties = v
}
  return nil
}

func (p *DomainVersionMetadata)  ReadField2(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*PartitionMetadata, size)
  p.Partitions =  tMap
  for i := 0; i < size; i ++ {
var _key1 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key1 = v
}
    _val2 := &PartitionMetadata{}
    if err := _val2.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val2), err)
    }
    p.Partitions[_key1] = _val2
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DomainVersionMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Defunct = v
}
  return nil
}

func (p *DomainVersionMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ClosedAt = v
}
  return nil
}

func (p *DomainVersionMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainVersionMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainVersionMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("properties", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:properties: ", p), err) }
  if err := oprot.WriteBinary(p.Properties); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.properties (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:properties: ", p), err) }
  return err
}

func (p *DomainVersionMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitions", thrift.MAP, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitions: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Partitions {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitions: ", p), err) }
  return err
}

func (p *DomainVersionMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("defunct", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:defunct: ", p), err) }
  if err := oprot.WriteBool(bool(p.Defunct)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.defunct (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:defunct: ", p), err) }
  return err
}

func (p *DomainVersionMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("closed_at", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:closed_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.ClosedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.closed_at (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:closed_at: ", p), err) }
  return err
}

func (p *DomainVersionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainVersionMetadata(%+v)", *p)
}

// Attributes:
//  - DomainVersions
type DomainGroupMetadata struct {
  DomainVersions map[int32]int32 `thrift:"domain_versions,1,required" db:"domain_versions" json:"domain_versions"`
}

func NewDomainGroupMetadata() *DomainGroupMetadata {
  return &DomainGroupMetadata{}
}


func (p *DomainGroupMetadata) GetDomainVersions() map[int32]int32 {
  return p.DomainVersions
}
func (p *DomainGroupMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDomainVersions bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetDomainVersions = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDomainVersions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DomainVersions is not set"));
  }
  return nil
}

func (p *DomainGroupMetadata)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]int32, size)
  p.DomainVersions =  tMap
  for i := 0; i < size; i ++ {
var _key3 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key3 = v
}
var _val4 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.DomainVersions[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *DomainGroupMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainGroupMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainGroupMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_versions", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_versions: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.I32, len(p.DomainVersions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.DomainVersions {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_versions: ", p), err) }
  return err
}

func (p *DomainGroupMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainGroupMetadata(%+v)", *p)
}

// Attributes:
//  - CurrentVersionNumber
//  - Deletable
type HostDomainPartitionMetadata struct {
  CurrentVersionNumber *int32 `thrift:"current_version_number,1" db:"current_version_number" json:"current_version_number,omitempty"`
  Deletable bool `thrift:"deletable,2,required" db:"deletable" json:"deletable"`
}

func NewHostDomainPartitionMetadata() *HostDomainPartitionMetadata {
  return &HostDomainPartitionMetadata{}
}

var HostDomainPartitionMetadata_CurrentVersionNumber_DEFAULT int32
func (p *HostDomainPartitionMetadata) GetCurrentVersionNumber() int32 {
  if !p.IsSetCurrentVersionNumber() {
    return HostDomainPartitionMetadata_CurrentVersionNumber_DEFAULT
  }
return *p.CurrentVersionNumber
}

func (p *HostDomainPartitionMetadata) GetDeletable() bool {
  return p.Deletable
}
func (p *HostDomainPartitionMetadata) IsSetCurrentVersionNumber() bool {
  return p.CurrentVersionNumber != nil
}

func (p *HostDomainPartitionMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDeletable bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetDeletable = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDeletable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Deletable is not set"));
  }
  return nil
}

func (p *HostDomainPartitionMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CurrentVersionNumber = &v
}
  return nil
}

func (p *HostDomainPartitionMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Deletable = v
}
  return nil
}

func (p *HostDomainPartitionMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostDomainPartitionMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostDomainPartitionMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentVersionNumber() {
    if err := oprot.WriteFieldBegin("current_version_number", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:current_version_number: ", p), err) }
    if err := oprot.WriteI32(int32(*p.CurrentVersionNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.current_version_number (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:current_version_number: ", p), err) }
  }
  return err
}

func (p *HostDomainPartitionMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deletable", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deletable: ", p), err) }
  if err := oprot.WriteBool(bool(p.Deletable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deletable (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deletable: ", p), err) }
  return err
}

func (p *HostDomainPartitionMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostDomainPartitionMetadata(%+v)", *p)
}

// Attributes:
//  - Partitions
type HostDomainMetadata struct {
  Partitions map[int32]*HostDomainPartitionMetadata `thrift:"partitions,1,required" db:"partitions" json:"partitions"`
}

func NewHostDomainMetadata() *HostDomainMetadata {
  return &HostDomainMetadata{}
}


func (p *HostDomainMetadata) GetPartitions() map[int32]*HostDomainPartitionMetadata {
  return p.Partitions
}
func (p *HostDomainMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitions bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetPartitions = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitions{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Partitions is not set"));
  }
  return nil
}

func (p *HostDomainMetadata)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*HostDomainPartitionMetadata, size)
  p.Partitions =  tMap
  for i := 0; i < size; i ++ {
var _key5 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key5 = v
}
    _val6 := &HostDomainPartitionMetadata{}
    if err := _val6.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val6), err)
    }
    p.Partitions[_key5] = _val6
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostDomainMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostDomainMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostDomainMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitions", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitions: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Partitions)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Partitions {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitions: ", p), err) }
  return err
}

func (p *HostDomainMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostDomainMetadata(%+v)", *p)
}

// Attributes:
//  - Domains
type HostAssignmentsMetadata struct {
  Domains map[int32]*HostDomainMetadata `thrift:"domains,1,required" db:"domains" json:"domains"`
}

func NewHostAssignmentsMetadata() *HostAssignmentsMetadata {
  return &HostAssignmentsMetadata{}
}


func (p *HostAssignmentsMetadata) GetDomains() map[int32]*HostDomainMetadata {
  return p.Domains
}
func (p *HostAssignmentsMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDomains bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetDomains = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDomains{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Domains is not set"));
  }
  return nil
}

func (p *HostAssignmentsMetadata)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[int32]*HostDomainMetadata, size)
  p.Domains =  tMap
  for i := 0; i < size; i ++ {
var _key7 int32
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key7 = v
}
    _val8 := &HostDomainMetadata{}
    if err := _val8.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val8), err)
    }
    p.Domains[_key7] = _val8
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostAssignmentsMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostAssignmentsMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostAssignmentsMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domains", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domains: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.Domains)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Domains {
    if err := oprot.WriteI32(int32(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domains: ", p), err) }
  return err
}

func (p *HostAssignmentsMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostAssignmentsMetadata(%+v)", *p)
}

// Attributes:
//  - Flags
//  - HostName
//  - PortNumber
//  - EnvironmentFlags
type HostMetadata struct {
  Flags string `thrift:"flags,1,required" db:"flags" json:"flags"`
  HostName string `thrift:"host_name,2,required" db:"host_name" json:"host_name"`
  PortNumber int32 `thrift:"port_number,3,required" db:"port_number" json:"port_number"`
  EnvironmentFlags map[string]string `thrift:"environment_flags,4" db:"environment_flags" json:"environment_flags,omitempty"`
}

func NewHostMetadata() *HostMetadata {
  return &HostMetadata{}
}


func (p *HostMetadata) GetFlags() string {
  return p.Flags
}

func (p *HostMetadata) GetHostName() string {
  return p.HostName
}

func (p *HostMetadata) GetPortNumber() int32 {
  return p.PortNumber
}
var HostMetadata_EnvironmentFlags_DEFAULT map[string]string

func (p *HostMetadata) GetEnvironmentFlags() map[string]string {
  return p.EnvironmentFlags
}
func (p *HostMetadata) IsSetEnvironmentFlags() bool {
  return p.EnvironmentFlags != nil
}

func (p *HostMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetFlags bool = false;
  var issetHostName bool = false;
  var issetPortNumber bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetFlags = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetHostName = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetPortNumber = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetFlags{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Flags is not set"));
  }
  if !issetHostName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HostName is not set"));
  }
  if !issetPortNumber{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PortNumber is not set"));
  }
  return nil
}

func (p *HostMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Flags = v
}
  return nil
}

func (p *HostMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HostName = v
}
  return nil
}

func (p *HostMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PortNumber = v
}
  return nil
}

func (p *HostMetadata)  ReadField4(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.EnvironmentFlags =  tMap
  for i := 0; i < size; i ++ {
var _key9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key9 = v
}
var _val10 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val10 = v
}
    p.EnvironmentFlags[_key9] = _val10
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *HostMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HostMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HostMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("flags", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:flags: ", p), err) }
  if err := oprot.WriteString(string(p.Flags)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.flags (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:flags: ", p), err) }
  return err
}

func (p *HostMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host_name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:host_name: ", p), err) }
  if err := oprot.WriteString(string(p.HostName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host_name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:host_name: ", p), err) }
  return err
}

func (p *HostMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port_number", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:port_number: ", p), err) }
  if err := oprot.WriteI32(int32(p.PortNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port_number (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:port_number: ", p), err) }
  return err
}

func (p *HostMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetEnvironmentFlags() {
    if err := oprot.WriteFieldBegin("environment_flags", thrift.MAP, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:environment_flags: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.EnvironmentFlags)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.EnvironmentFlags {
      if err := oprot.WriteString(string(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:environment_flags: ", p), err) }
  }
  return err
}

func (p *HostMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HostMetadata(%+v)", *p)
}

// Attributes:
//  - Statistics
type StatisticsMetadata struct {
  Statistics map[string]string `thrift:"statistics,1,required" db:"statistics" json:"statistics"`
}

func NewStatisticsMetadata() *StatisticsMetadata {
  return &StatisticsMetadata{}
}


func (p *StatisticsMetadata) GetStatistics() map[string]string {
  return p.Statistics
}
func (p *StatisticsMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetStatistics bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetStatistics = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetStatistics{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Statistics is not set"));
  }
  return nil
}

func (p *StatisticsMetadata)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.Statistics =  tMap
  for i := 0; i < size; i ++ {
var _key11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key11 = v
}
var _val12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val12 = v
}
    p.Statistics[_key11] = _val12
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *StatisticsMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StatisticsMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StatisticsMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("statistics", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:statistics: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Statistics)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.Statistics {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:statistics: ", p), err) }
  return err
}

func (p *StatisticsMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StatisticsMetadata(%+v)", *p)
}

// Attributes:
//  - Host
//  - ConnectedAt
//  - Type
//  - Version
type ClientMetadata struct {
  Host string `thrift:"host,1,required" db:"host" json:"host"`
  ConnectedAt int64 `thrift:"connected_at,2,required" db:"connected_at" json:"connected_at"`
  Type string `thrift:"type,3,required" db:"type" json:"type"`
  Version string `thrift:"version,4,required" db:"version" json:"version"`
}

func NewClientMetadata() *ClientMetadata {
  return &ClientMetadata{}
}


func (p *ClientMetadata) GetHost() string {
  return p.Host
}

func (p *ClientMetadata) GetConnectedAt() int64 {
  return p.ConnectedAt
}

func (p *ClientMetadata) GetType() string {
  return p.Type
}

func (p *ClientMetadata) GetVersion() string {
  return p.Version
}
func (p *ClientMetadata) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetHost bool = false;
  var issetConnectedAt bool = false;
  var issetType bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetHost = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetConnectedAt = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetType = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetVersion = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetHost{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  if !issetConnectedAt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ConnectedAt is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *ClientMetadata)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *ClientMetadata)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ConnectedAt = v
}
  return nil
}

func (p *ClientMetadata)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *ClientMetadata)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ClientMetadata) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ClientMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ClientMetadata) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *ClientMetadata) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("connected_at", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:connected_at: ", p), err) }
  if err := oprot.WriteI64(int64(p.ConnectedAt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.connected_at (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:connected_at: ", p), err) }
  return err
}

func (p *ClientMetadata) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
  if err := oprot.WriteString(string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  return err
}

func (p *ClientMetadata) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err) }
  return err
}

func (p *ClientMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ClientMetadata(%+v)", *p)
}

// Attributes:
//  - Minimum
//  - Maximum
//  - NumValues
//  - Total
//  - Deciles
type LatencySampleSummary struct {
  Minimum float64 `thrift:"minimum,1,required" db:"minimum" json:"minimum"`
  Maximum float64 `thrift:"maximum,2,required" db:"maximum" json:"maximum"`
  NumValues int64 `thrift:"num_values,3,required" db:"num_values" json:"num_values"`
  Total float64 `thrift:"total,4,required" db:"total" json:"total"`
  // unused field # 5
  Deciles []float64 `thrift:"deciles,6" db:"deciles" json:"deciles,omitempty"`
}

func NewLatencySampleSummary() *LatencySampleSummary {
  return &LatencySampleSummary{}
}


func (p *LatencySampleSummary) GetMinimum() float64 {
  return p.Minimum
}

func (p *LatencySampleSummary) GetMaximum() float64 {
  return p.Maximum
}

func (p *LatencySampleSummary) GetNumValues() int64 {
  return p.NumValues
}

func (p *LatencySampleSummary) GetTotal() float64 {
  return p.Total
}
var LatencySampleSummary_Deciles_DEFAULT []float64

func (p *LatencySampleSummary) GetDeciles() []float64 {
  return p.Deciles
}
func (p *LatencySampleSummary) IsSetDeciles() bool {
  return p.Deciles != nil
}

func (p *LatencySampleSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetMinimum bool = false;
  var issetMaximum bool = false;
  var issetNumValues bool = false;
  var issetTotal bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetMinimum = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetMaximum = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetNumValues = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetTotal = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetMinimum{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Minimum is not set"));
  }
  if !issetMaximum{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Maximum is not set"));
  }
  if !issetNumValues{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumValues is not set"));
  }
  if !issetTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Total is not set"));
  }
  return nil
}

func (p *LatencySampleSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Minimum = v
}
  return nil
}

func (p *LatencySampleSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Maximum = v
}
  return nil
}

func (p *LatencySampleSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NumValues = v
}
  return nil
}

func (p *LatencySampleSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Total = v
}
  return nil
}

func (p *LatencySampleSummary)  ReadField6(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]float64, 0, size)
  p.Deciles =  tSlice
  for i := 0; i < size; i ++ {
var _elem13 float64
    if v, err := iprot.ReadDouble(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem13 = v
}
    p.Deciles = append(p.Deciles, _elem13)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *LatencySampleSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LatencySampleSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LatencySampleSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("minimum", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:minimum: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Minimum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.minimum (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:minimum: ", p), err) }
  return err
}

func (p *LatencySampleSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("maximum", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:maximum: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Maximum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maximum (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:maximum: ", p), err) }
  return err
}

func (p *LatencySampleSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_values", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:num_values: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumValues)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_values (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:num_values: ", p), err) }
  return err
}

func (p *LatencySampleSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("total", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:total: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Total)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.total (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:total: ", p), err) }
  return err
}

func (p *LatencySampleSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDeciles() {
    if err := oprot.WriteFieldBegin("deciles", thrift.LIST, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deciles: ", p), err) }
    if err := oprot.WriteListBegin(thrift.DOUBLE, len(p.Deciles)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Deciles {
      if err := oprot.WriteDouble(float64(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deciles: ", p), err) }
  }
  return err
}

func (p *LatencySampleSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LatencySampleSummary(%+v)", *p)
}

// Attributes:
//  - ID
//  - ThroughputTotal
//  - ResponseDataThroughputTotal
//  - NumRequestsTotal
//  - NumHitsTotal
//  - NumL1CacheHitsTotal
//  - NumL2CacheHitsTotal
//  - CacheNumItems
//  - CacheMaxNumItems
//  - CacheNumManagedBytes
//  - CacheMaxNumManagedBytes
//  - LatencySummary
type DomainStatisticsSummary struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  ThroughputTotal float64 `thrift:"throughput_total,2,required" db:"throughput_total" json:"throughput_total"`
  ResponseDataThroughputTotal float64 `thrift:"response_data_throughput_total,3,required" db:"response_data_throughput_total" json:"response_data_throughput_total"`
  NumRequestsTotal int64 `thrift:"num_requests_total,4,required" db:"num_requests_total" json:"num_requests_total"`
  NumHitsTotal int64 `thrift:"num_hits_total,5,required" db:"num_hits_total" json:"num_hits_total"`
  NumL1CacheHitsTotal int64 `thrift:"num_l1_cache_hits_total,6,required" db:"num_l1_cache_hits_total" json:"num_l1_cache_hits_total"`
  NumL2CacheHitsTotal int64 `thrift:"num_l2_cache_hits_total,7,required" db:"num_l2_cache_hits_total" json:"num_l2_cache_hits_total"`
  CacheNumItems int64 `thrift:"cache_num_items,8,required" db:"cache_num_items" json:"cache_num_items"`
  CacheMaxNumItems int64 `thrift:"cache_max_num_items,9,required" db:"cache_max_num_items" json:"cache_max_num_items"`
  CacheNumManagedBytes int64 `thrift:"cache_num_managed_bytes,10,required" db:"cache_num_managed_bytes" json:"cache_num_managed_bytes"`
  CacheMaxNumManagedBytes int64 `thrift:"cache_max_num_managed_bytes,11,required" db:"cache_max_num_managed_bytes" json:"cache_max_num_managed_bytes"`
  LatencySummary *LatencySampleSummary `thrift:"latency_summary,12" db:"latency_summary" json:"latency_summary,omitempty"`
}

func NewDomainStatisticsSummary() *DomainStatisticsSummary {
  return &DomainStatisticsSummary{}
}


func (p *DomainStatisticsSummary) GetID() int32 {
  return p.ID
}

func (p *DomainStatisticsSummary) GetThroughputTotal() float64 {
  return p.ThroughputTotal
}

func (p *DomainStatisticsSummary) GetResponseDataThroughputTotal() float64 {
  return p.ResponseDataThroughputTotal
}

func (p *DomainStatisticsSummary) GetNumRequestsTotal() int64 {
  return p.NumRequestsTotal
}

func (p *DomainStatisticsSummary) GetNumHitsTotal() int64 {
  return p.NumHitsTotal
}

func (p *DomainStatisticsSummary) GetNumL1CacheHitsTotal() int64 {
  return p.NumL1CacheHitsTotal
}

func (p *DomainStatisticsSummary) GetNumL2CacheHitsTotal() int64 {
  return p.NumL2CacheHitsTotal
}

func (p *DomainStatisticsSummary) GetCacheNumItems() int64 {
  return p.CacheNumItems
}

func (p *DomainStatisticsSummary) GetCacheMaxNumItems() int64 {
  return p.CacheMaxNumItems
}

func (p *DomainStatisticsSummary) GetCacheNumManagedBytes() int64 {
  return p.CacheNumManagedBytes
}

func (p *DomainStatisticsSummary) GetCacheMaxNumManagedBytes() int64 {
  return p.CacheMaxNumManagedBytes
}
var DomainStatisticsSummary_LatencySummary_DEFAULT *LatencySampleSummary
func (p *DomainStatisticsSummary) GetLatencySummary() *LatencySampleSummary {
  if !p.IsSetLatencySummary() {
    return DomainStatisticsSummary_LatencySummary_DEFAULT
  }
return p.LatencySummary
}
func (p *DomainStatisticsSummary) IsSetLatencySummary() bool {
  return p.LatencySummary != nil
}

func (p *DomainStatisticsSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetThroughputTotal bool = false;
  var issetResponseDataThroughputTotal bool = false;
  var issetNumRequestsTotal bool = false;
  var issetNumHitsTotal bool = false;
  var issetNumL1CacheHitsTotal bool = false;
  var issetNumL2CacheHitsTotal bool = false;
  var issetCacheNumItems bool = false;
  var issetCacheMaxNumItems bool = false;
  var issetCacheNumManagedBytes bool = false;
  var issetCacheMaxNumManagedBytes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetID = true
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
      issetThroughputTotal = true
    case 3:
      if err := p.ReadField3(iprot); err != nil {
        return err
      }
      issetResponseDataThroughputTotal = true
    case 4:
      if err := p.ReadField4(iprot); err != nil {
        return err
      }
      issetNumRequestsTotal = true
    case 5:
      if err := p.ReadField5(iprot); err != nil {
        return err
      }
      issetNumHitsTotal = true
    case 6:
      if err := p.ReadField6(iprot); err != nil {
        return err
      }
      issetNumL1CacheHitsTotal = true
    case 7:
      if err := p.ReadField7(iprot); err != nil {
        return err
      }
      issetNumL2CacheHitsTotal = true
    case 8:
      if err := p.ReadField8(iprot); err != nil {
        return err
      }
      issetCacheNumItems = true
    case 9:
      if err := p.ReadField9(iprot); err != nil {
        return err
      }
      issetCacheMaxNumItems = true
    case 10:
      if err := p.ReadField10(iprot); err != nil {
        return err
      }
      issetCacheNumManagedBytes = true
    case 11:
      if err := p.ReadField11(iprot); err != nil {
        return err
      }
      issetCacheMaxNumManagedBytes = true
    case 12:
      if err := p.ReadField12(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetThroughputTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ThroughputTotal is not set"));
  }
  if !issetResponseDataThroughputTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ResponseDataThroughputTotal is not set"));
  }
  if !issetNumRequestsTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumRequestsTotal is not set"));
  }
  if !issetNumHitsTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumHitsTotal is not set"));
  }
  if !issetNumL1CacheHitsTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumL1CacheHitsTotal is not set"));
  }
  if !issetNumL2CacheHitsTotal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NumL2CacheHitsTotal is not set"));
  }
  if !issetCacheNumItems{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CacheNumItems is not set"));
  }
  if !issetCacheMaxNumItems{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CacheMaxNumItems is not set"));
  }
  if !issetCacheNumManagedBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CacheNumManagedBytes is not set"));
  }
  if !issetCacheMaxNumManagedBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CacheMaxNumManagedBytes is not set"));
  }
  return nil
}

func (p *DomainStatisticsSummary)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ThroughputTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ResponseDataThroughputTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.NumRequestsTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.NumHitsTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.NumL1CacheHitsTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.NumL2CacheHitsTotal = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField8(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CacheNumItems = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField9(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CacheMaxNumItems = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField10(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.CacheNumManagedBytes = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField11(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.CacheMaxNumManagedBytes = v
}
  return nil
}

func (p *DomainStatisticsSummary)  ReadField12(iprot thrift.TProtocol) error {
  p.LatencySummary = &LatencySampleSummary{}
  if err := p.LatencySummary.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LatencySummary), err)
  }
  return nil
}

func (p *DomainStatisticsSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("DomainStatisticsSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
    if err := p.writeField9(oprot); err != nil { return err }
    if err := p.writeField10(oprot); err != nil { return err }
    if err := p.writeField11(oprot); err != nil { return err }
    if err := p.writeField12(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DomainStatisticsSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("throughput_total", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:throughput_total: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ThroughputTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.throughput_total (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:throughput_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("response_data_throughput_total", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:response_data_throughput_total: ", p), err) }
  if err := oprot.WriteDouble(float64(p.ResponseDataThroughputTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.response_data_throughput_total (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:response_data_throughput_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_requests_total", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:num_requests_total: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumRequestsTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_requests_total (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:num_requests_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_hits_total", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:num_hits_total: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumHitsTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_hits_total (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:num_hits_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_l1_cache_hits_total", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:num_l1_cache_hits_total: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumL1CacheHitsTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_l1_cache_hits_total (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:num_l1_cache_hits_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("num_l2_cache_hits_total", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:num_l2_cache_hits_total: ", p), err) }
  if err := oprot.WriteI64(int64(p.NumL2CacheHitsTotal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.num_l2_cache_hits_total (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:num_l2_cache_hits_total: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cache_num_items", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:cache_num_items: ", p), err) }
  if err := oprot.WriteI64(int64(p.CacheNumItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cache_num_items (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:cache_num_items: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField9(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cache_max_num_items", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:cache_max_num_items: ", p), err) }
  if err := oprot.WriteI64(int64(p.CacheMaxNumItems)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cache_max_num_items (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:cache_max_num_items: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField10(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cache_num_managed_bytes", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:cache_num_managed_bytes: ", p), err) }
  if err := oprot.WriteI64(int64(p.CacheNumManagedBytes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cache_num_managed_bytes (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:cache_num_managed_bytes: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField11(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("cache_max_num_managed_bytes", thrift.I64, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:cache_max_num_managed_bytes: ", p), err) }
  if err := oprot.WriteI64(int64(p.CacheMaxNumManagedBytes)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cache_max_num_managed_bytes (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:cache_max_num_managed_bytes: ", p), err) }
  return err
}

func (p *DomainStatisticsSummary) writeField12(oprot thrift.TProtocol) (err error) {
  if p.IsSetLatencySummary() {
    if err := oprot.WriteFieldBegin("latency_summary", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:latency_summary: ", p), err) }
    if err := p.LatencySummary.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LatencySummary), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:latency_summary: ", p), err) }
  }
  return err
}

func (p *DomainStatisticsSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DomainStatisticsSummary(%+v)", *p)
}

// Attributes:
//  - DomainStatistics
type RuntimeStatisticsSummary struct {
  DomainStatistics map[string]*DomainStatisticsSummary `thrift:"domain_statistics,1,required" db:"domain_statistics" json:"domain_statistics"`
}

func NewRuntimeStatisticsSummary() *RuntimeStatisticsSummary {
  return &RuntimeStatisticsSummary{}
}


func (p *RuntimeStatisticsSummary) GetDomainStatistics() map[string]*DomainStatisticsSummary {
  return p.DomainStatistics
}
func (p *RuntimeStatisticsSummary) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetDomainStatistics bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
      issetDomainStatistics = true
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetDomainStatistics{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DomainStatistics is not set"));
  }
  return nil
}

func (p *RuntimeStatisticsSummary)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]*DomainStatisticsSummary, size)
  p.DomainStatistics =  tMap
  for i := 0; i < size; i ++ {
var _key14 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key14 = v
}
    _val15 := &DomainStatisticsSummary{}
    if err := _val15.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val15), err)
    }
    p.DomainStatistics[_key14] = _val15
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RuntimeStatisticsSummary) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("RuntimeStatisticsSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RuntimeStatisticsSummary) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_statistics", thrift.MAP, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_statistics: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.DomainStatistics)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.DomainStatistics {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_statistics: ", p), err) }
  return err
}

func (p *RuntimeStatisticsSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RuntimeStatisticsSummary(%+v)", *p)
}

type PartitionServer interface {
  // Parameters:
  //  - DomainID
  //  - Key
  Get(domain_id int32, key []byte) (r *HankResponse, err error)
  // Parameters:
  //  - DomainID
  //  - Keys
  GetBulk(domain_id int32, keys [][]byte) (r *HankBulkResponse, err error)
}

type PartitionServerClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewPartitionServerClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PartitionServerClient {
  return &PartitionServerClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewPartitionServerClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PartitionServerClient {
  return &PartitionServerClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - DomainID
//  - Key
func (p *PartitionServerClient) Get(domain_id int32, key []byte) (r *HankResponse, err error) {
  if err = p.sendGet(domain_id, key); err != nil { return }
  return p.recvGet()
}

func (p *PartitionServerClient) sendGet(domain_id int32, key []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PartitionServerGetArgs{
  DomainID : domain_id,
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PartitionServerClient) recvGet() (value *HankResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error16 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error17 error
    error17, err = error16.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error17
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := PartitionServerGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DomainID
//  - Keys
func (p *PartitionServerClient) GetBulk(domain_id int32, keys [][]byte) (r *HankBulkResponse, err error) {
  if err = p.sendGetBulk(domain_id, keys); err != nil { return }
  return p.recvGetBulk()
}

func (p *PartitionServerClient) sendGetBulk(domain_id int32, keys [][]byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getBulk", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := PartitionServerGetBulkArgs{
  DomainID : domain_id,
  Keys : keys,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *PartitionServerClient) recvGetBulk() (value *HankBulkResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getBulk" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBulk failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBulk failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error18 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error19 error
    error19, err = error18.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error19
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBulk failed: invalid message type")
    return
  }
  result := PartitionServerGetBulkResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type PartitionServerProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler PartitionServer
}

func (p *PartitionServerProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *PartitionServerProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *PartitionServerProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewPartitionServerProcessor(handler PartitionServer) *PartitionServerProcessor {

  self20 := &PartitionServerProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self20.processorMap["get"] = &partitionServerProcessorGet{handler:handler}
  self20.processorMap["getBulk"] = &partitionServerProcessorGetBulk{handler:handler}
return self20
}

func (p *PartitionServerProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x21 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x21.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x21

}

type partitionServerProcessorGet struct {
  handler PartitionServer
}

func (p *partitionServerProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PartitionServerGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PartitionServerGetResult{}
var retval *HankResponse
  var err2 error
  if retval, err2 = p.handler.Get(args.DomainID, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type partitionServerProcessorGetBulk struct {
  handler PartitionServer
}

func (p *partitionServerProcessorGetBulk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := PartitionServerGetBulkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := PartitionServerGetBulkResult{}
var retval *HankBulkResponse
  var err2 error
  if retval, err2 = p.handler.GetBulk(args.DomainID, args.Keys); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBulk: " + err2.Error())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBulk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - DomainID
//  - Key
type PartitionServerGetArgs struct {
  DomainID int32 `thrift:"domain_id,1" db:"domain_id" json:"domain_id"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
}

func NewPartitionServerGetArgs() *PartitionServerGetArgs {
  return &PartitionServerGetArgs{}
}


func (p *PartitionServerGetArgs) GetDomainID() int32 {
  return p.DomainID
}

func (p *PartitionServerGetArgs) GetKey() []byte {
  return p.Key
}
func (p *PartitionServerGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionServerGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DomainID = v
}
  return nil
}

func (p *PartitionServerGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *PartitionServerGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionServerGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DomainID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domain_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_id: ", p), err) }
  return err
}

func (p *PartitionServerGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *PartitionServerGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionServerGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PartitionServerGetResult struct {
  Success *HankResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPartitionServerGetResult() *PartitionServerGetResult {
  return &PartitionServerGetResult{}
}

var PartitionServerGetResult_Success_DEFAULT *HankResponse
func (p *PartitionServerGetResult) GetSuccess() *HankResponse {
  if !p.IsSetSuccess() {
    return PartitionServerGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *PartitionServerGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PartitionServerGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionServerGetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HankResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PartitionServerGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionServerGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PartitionServerGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionServerGetResult(%+v)", *p)
}

// Attributes:
//  - DomainID
//  - Keys
type PartitionServerGetBulkArgs struct {
  DomainID int32 `thrift:"domain_id,1" db:"domain_id" json:"domain_id"`
  Keys [][]byte `thrift:"keys,2" db:"keys" json:"keys"`
}

func NewPartitionServerGetBulkArgs() *PartitionServerGetBulkArgs {
  return &PartitionServerGetBulkArgs{}
}


func (p *PartitionServerGetBulkArgs) GetDomainID() int32 {
  return p.DomainID
}

func (p *PartitionServerGetBulkArgs) GetKeys() [][]byte {
  return p.Keys
}
func (p *PartitionServerGetBulkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionServerGetBulkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DomainID = v
}
  return nil
}

func (p *PartitionServerGetBulkArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem22 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem22 = v
}
    p.Keys = append(p.Keys, _elem22)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PartitionServerGetBulkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBulk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionServerGetBulkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_id: ", p), err) }
  if err := oprot.WriteI32(int32(p.DomainID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domain_id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_id: ", p), err) }
  return err
}

func (p *PartitionServerGetBulkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *PartitionServerGetBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionServerGetBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type PartitionServerGetBulkResult struct {
  Success *HankBulkResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewPartitionServerGetBulkResult() *PartitionServerGetBulkResult {
  return &PartitionServerGetBulkResult{}
}

var PartitionServerGetBulkResult_Success_DEFAULT *HankBulkResponse
func (p *PartitionServerGetBulkResult) GetSuccess() *HankBulkResponse {
  if !p.IsSetSuccess() {
    return PartitionServerGetBulkResult_Success_DEFAULT
  }
return p.Success
}
func (p *PartitionServerGetBulkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *PartitionServerGetBulkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PartitionServerGetBulkResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HankBulkResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *PartitionServerGetBulkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBulk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PartitionServerGetBulkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *PartitionServerGetBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PartitionServerGetBulkResult(%+v)", *p)
}


type SmartClient interface {
  // Parameters:
  //  - DomainName
  //  - Key
  Get(domain_name string, key []byte) (r *HankResponse, err error)
  // Parameters:
  //  - DomainName
  //  - Keys
  GetBulk(domain_name string, keys [][]byte) (r *HankBulkResponse, err error)
}

type SmartClientClient struct {
  Transport thrift.TTransport
  ProtocolFactory thrift.TProtocolFactory
  InputProtocol thrift.TProtocol
  OutputProtocol thrift.TProtocol
  SeqId int32
}

func NewSmartClientClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SmartClientClient {
  return &SmartClientClient{Transport: t,
    ProtocolFactory: f,
    InputProtocol: f.GetProtocol(t),
    OutputProtocol: f.GetProtocol(t),
    SeqId: 0,
  }
}

func NewSmartClientClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SmartClientClient {
  return &SmartClientClient{Transport: t,
    ProtocolFactory: nil,
    InputProtocol: iprot,
    OutputProtocol: oprot,
    SeqId: 0,
  }
}

// Parameters:
//  - DomainName
//  - Key
func (p *SmartClientClient) Get(domain_name string, key []byte) (r *HankResponse, err error) {
  if err = p.sendGet(domain_name, key); err != nil { return }
  return p.recvGet()
}

func (p *SmartClientClient) sendGet(domain_name string, key []byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SmartClientGetArgs{
  DomainName : domain_name,
  Key : key,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SmartClientClient) recvGet() (value *HankResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "get" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "get failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "get failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error33 error
    error33, err = error32.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error33
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "get failed: invalid message type")
    return
  }
  result := SmartClientGetResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}

// Parameters:
//  - DomainName
//  - Keys
func (p *SmartClientClient) GetBulk(domain_name string, keys [][]byte) (r *HankBulkResponse, err error) {
  if err = p.sendGetBulk(domain_name, keys); err != nil { return }
  return p.recvGetBulk()
}

func (p *SmartClientClient) sendGetBulk(domain_name string, keys [][]byte)(err error) {
  oprot := p.OutputProtocol
  if oprot == nil {
    oprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.OutputProtocol = oprot
  }
  p.SeqId++
  if err = oprot.WriteMessageBegin("getBulk", thrift.CALL, p.SeqId); err != nil {
      return
  }
  args := SmartClientGetBulkArgs{
  DomainName : domain_name,
  Keys : keys,
  }
  if err = args.Write(oprot); err != nil {
      return
  }
  if err = oprot.WriteMessageEnd(); err != nil {
      return
  }
  return oprot.Flush()
}


func (p *SmartClientClient) recvGetBulk() (value *HankBulkResponse, err error) {
  iprot := p.InputProtocol
  if iprot == nil {
    iprot = p.ProtocolFactory.GetProtocol(p.Transport)
    p.InputProtocol = iprot
  }
  method, mTypeId, seqId, err := iprot.ReadMessageBegin()
  if err != nil {
    return
  }
  if method != "getBulk" {
    err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getBulk failed: wrong method name")
    return
  }
  if p.SeqId != seqId {
    err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getBulk failed: out of sequence response")
    return
  }
  if mTypeId == thrift.EXCEPTION {
    error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
    var error35 error
    error35, err = error34.Read(iprot)
    if err != nil {
      return
    }
    if err = iprot.ReadMessageEnd(); err != nil {
      return
    }
    err = error35
    return
  }
  if mTypeId != thrift.REPLY {
    err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getBulk failed: invalid message type")
    return
  }
  result := SmartClientGetBulkResult{}
  if err = result.Read(iprot); err != nil {
    return
  }
  if err = iprot.ReadMessageEnd(); err != nil {
    return
  }
  value = result.GetSuccess()
  return
}


type SmartClientProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SmartClient
}

func (p *SmartClientProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SmartClientProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SmartClientProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSmartClientProcessor(handler SmartClient) *SmartClientProcessor {

  self36 := &SmartClientProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self36.processorMap["get"] = &smartClientProcessorGet{handler:handler}
  self36.processorMap["getBulk"] = &smartClientProcessorGetBulk{handler:handler}
return self36
}

func (p *SmartClientProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x37 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x37.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x37

}

type smartClientProcessorGet struct {
  handler SmartClient
}

func (p *smartClientProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SmartClientGetArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SmartClientGetResult{}
var retval *HankResponse
  var err2 error
  if retval, err2 = p.handler.Get(args.DomainName, args.Key); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: " + err2.Error())
    oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type smartClientProcessorGetBulk struct {
  handler SmartClient
}

func (p *smartClientProcessorGetBulk) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SmartClientGetBulkArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SmartClientGetBulkResult{}
var retval *HankBulkResponse
  var err2 error
  if retval, err2 = p.handler.GetBulk(args.DomainName, args.Keys); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getBulk: " + err2.Error())
    oprot.WriteMessageBegin("getBulk", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getBulk", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - DomainName
//  - Key
type SmartClientGetArgs struct {
  DomainName string `thrift:"domain_name,1" db:"domain_name" json:"domain_name"`
  Key []byte `thrift:"key,2" db:"key" json:"key"`
}

func NewSmartClientGetArgs() *SmartClientGetArgs {
  return &SmartClientGetArgs{}
}


func (p *SmartClientGetArgs) GetDomainName() string {
  return p.DomainName
}

func (p *SmartClientGetArgs) GetKey() []byte {
  return p.Key
}
func (p *SmartClientGetArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartClientGetArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DomainName = v
}
  return nil
}

func (p *SmartClientGetArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *SmartClientGetArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartClientGetArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_name: ", p), err) }
  if err := oprot.WriteString(string(p.DomainName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domain_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_name: ", p), err) }
  return err
}

func (p *SmartClientGetArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("key", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:key: ", p), err) }
  if err := oprot.WriteBinary(p.Key); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:key: ", p), err) }
  return err
}

func (p *SmartClientGetArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartClientGetArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SmartClientGetResult struct {
  Success *HankResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSmartClientGetResult() *SmartClientGetResult {
  return &SmartClientGetResult{}
}

var SmartClientGetResult_Success_DEFAULT *HankResponse
func (p *SmartClientGetResult) GetSuccess() *HankResponse {
  if !p.IsSetSuccess() {
    return SmartClientGetResult_Success_DEFAULT
  }
return p.Success
}
func (p *SmartClientGetResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SmartClientGetResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartClientGetResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HankResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SmartClientGetResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("get_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartClientGetResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SmartClientGetResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartClientGetResult(%+v)", *p)
}

// Attributes:
//  - DomainName
//  - Keys
type SmartClientGetBulkArgs struct {
  DomainName string `thrift:"domain_name,1" db:"domain_name" json:"domain_name"`
  Keys [][]byte `thrift:"keys,2" db:"keys" json:"keys"`
}

func NewSmartClientGetBulkArgs() *SmartClientGetBulkArgs {
  return &SmartClientGetBulkArgs{}
}


func (p *SmartClientGetBulkArgs) GetDomainName() string {
  return p.DomainName
}

func (p *SmartClientGetBulkArgs) GetKeys() [][]byte {
  return p.Keys
}
func (p *SmartClientGetBulkArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if err := p.ReadField1(iprot); err != nil {
        return err
      }
    case 2:
      if err := p.ReadField2(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartClientGetBulkArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DomainName = v
}
  return nil
}

func (p *SmartClientGetBulkArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Keys =  tSlice
  for i := 0; i < size; i ++ {
var _elem38 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem38 = v
}
    p.Keys = append(p.Keys, _elem38)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SmartClientGetBulkArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBulk_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartClientGetBulkArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("domain_name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:domain_name: ", p), err) }
  if err := oprot.WriteString(string(p.DomainName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.domain_name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:domain_name: ", p), err) }
  return err
}

func (p *SmartClientGetBulkArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("keys", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keys: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Keys)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Keys {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keys: ", p), err) }
  return err
}

func (p *SmartClientGetBulkArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartClientGetBulkArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SmartClientGetBulkResult struct {
  Success *HankBulkResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSmartClientGetBulkResult() *SmartClientGetBulkResult {
  return &SmartClientGetBulkResult{}
}

var SmartClientGetBulkResult_Success_DEFAULT *HankBulkResponse
func (p *SmartClientGetBulkResult) GetSuccess() *HankBulkResponse {
  if !p.IsSetSuccess() {
    return SmartClientGetBulkResult_Success_DEFAULT
  }
return p.Success
}
func (p *SmartClientGetBulkResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SmartClientGetBulkResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if err := p.ReadField0(iprot); err != nil {
        return err
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SmartClientGetBulkResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HankBulkResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SmartClientGetBulkResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getBulk_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SmartClientGetBulkResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SmartClientGetBulkResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SmartClientGetBulkResult(%+v)", *p)
}


