{"executions":[{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AdmProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AdmProtocolDecoder.decode(AdmProtocolDecoder.java:53)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.AdmProtocolDecoderTest.testDecode(AdmProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AdmProtocolDecoderTest"},"endDate":1500431865133,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431864439},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AisProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AisProtocolDecoder.decodePayload(AisProtocolDecoder.java:59)\n    at org.traccar.protocol.AisProtocolDecoder.decode(AisProtocolDecoder.java:115)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.AisProtocolDecoderTest.testDecode(AisProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AisProtocolDecoderTest"},"endDate":1500431894048,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431893349},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AlematicsProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AlematicsProtocolDecoder.decode(AlematicsProtocolDecoder.java:122)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.AlematicsProtocolDecoderTest.testDecode(AlematicsProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AlematicsProtocolDecoderTest"},"endDate":1500431802797,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431802208},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AplicomProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AplicomProtocolDecoder.decode(AplicomProtocolDecoder.java:600)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.AplicomProtocolDecoderTest.testDecode(AplicomProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AplicomProtocolDecoderTest"},"endDate":1500431803966,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431803375},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AppelloProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AppelloProtocolDecoder.decode(AppelloProtocolDecoder.java:63)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.AppelloProtocolDecoderTest.testDecode(AppelloProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AppelloProtocolDecoderTest"},"endDate":1500431849440,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431848307},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AquilaProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AquilaProtocolDecoder.decode(AquilaProtocolDecoder.java:136)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.AquilaProtocolDecoderTest.testDecode(AquilaProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AquilaProtocolDecoderTest"},"endDate":1500431802208,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431801602},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Ardi01ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Ardi01ProtocolDecoder.decode(Ardi01ProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.Ardi01ProtocolDecoderTest.testDecode(Ardi01ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Ardi01ProtocolDecoderTest"},"endDate":1500431818782,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431818159},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ArknavProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ArknavProtocolDecoder.decode(ArknavProtocolDecoder.java:64)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.ArknavProtocolDecoderTest.testDecode(ArknavProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ArknavProtocolDecoderTest"},"endDate":1500431813428,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431812786},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ArknavX8ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ArknavX8ProtocolDecoder.decode(ArknavX8ProtocolDecoder.java:54)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.ArknavX8ProtocolDecoderTest.testDecode(ArknavX8ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ArknavX8ProtocolDecoderTest"},"endDate":1500431814643,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431813978},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ArnaviProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ArnaviProtocolDecoder.decode(ArnaviProtocolDecoder.java:71)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.ArnaviProtocolDecoderTest.testDecode(ArnaviProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ArnaviProtocolDecoderTest"},"endDate":1500431844896,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431844212},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AstraProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AstraProtocolDecoder.decode(AstraProtocolDecoder.java:57)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.AstraProtocolDecoderTest.testDecode(AstraProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AstraProtocolDecoderTest"},"endDate":1500431819474,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431818782},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AtrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AtrackProtocolDecoder.decodeString(AtrackProtocolDecoder.java:234)\n    at org.traccar.protocol.AtrackProtocolDecoder.decode(AtrackProtocolDecoder.java:271)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.AtrackProtocolDecoderTest.testDecode(AtrackProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AtrackProtocolDecoderTest"},"endDate":1500431844212,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431843273},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AuroProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AuroProtocolDecoder.decode(AuroProtocolDecoder.java:70)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.AuroProtocolDecoderTest.testDecode(AuroProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AuroProtocolDecoderTest"},"endDate":1500431817022,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431816419},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AutoFonProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AutoFonProtocolDecoder.decode(AutoFonProtocolDecoder.java:134)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.AutoFonProtocolDecoderTest.testDecode(AutoFonProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AutoFonProtocolDecoderTest"},"endDate":1500431848306,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431847309},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.AutoGradeProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.AutoGradeProtocolDecoder.decode(AutoGradeProtocolDecoder.java:70)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.AutoGradeProtocolDecoderTest.testDecode(AutoGradeProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.AutoGradeProtocolDecoderTest"},"endDate":1500431837324,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431836497},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Avl301ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Avl301ProtocolDecoder.decode(Avl301ProtocolDecoder.java:75)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.Avl301ProtocolDecoderTest.testDecode(Avl301ProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Avl301ProtocolDecoderTest"},"endDate":1500431798915,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431798343},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.BceProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.BceProtocolDecoder.decode(BceProtocolDecoder.java:55)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.BceProtocolDecoderTest.testDecode(BceProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.BceProtocolDecoderTest"},"endDate":1500431845751,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431844896},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.BlackKiteProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.BlackKiteProtocolDecoder.decode(BlackKiteProtocolDecoder.java:99)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.BlackKiteProtocolDecoderTest.testDecode(BlackKiteProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.BlackKiteProtocolDecoderTest"},"endDate":1500431840697,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431839948},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.BoxProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.BoxProtocolDecoder.decode(BoxProtocolDecoder.java:60)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.BoxProtocolDecoderTest.testDecode(BoxProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.BoxProtocolDecoderTest"},"endDate":1500431812785,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431812182},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CalAmpProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CalAmpProtocolDecoder.decode(CalAmpProtocolDecoder.java:155)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.CalAmpProtocolDecoderTest.testDecode(CalAmpProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CalAmpProtocolDecoderTest"},"endDate":1500431884485,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431883527},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CarTrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CarTrackProtocolDecoder.decode(CarTrackProtocolDecoder.java:71)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.CarTrackProtocolDecoderTest.testDecode(CarTrackProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CarTrackProtocolDecoderTest"},"endDate":1500431861634,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431860658},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CarscopProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CarscopProtocolDecoder.decode(CarscopProtocolDecoder.java:63)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.CarscopProtocolDecoderTest.testDecode(CarscopProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CarscopProtocolDecoderTest"},"endDate":1500431805116,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431804504},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CastelProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CastelProtocolDecoder.decode(CastelProtocolDecoder.java:423)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.CastelProtocolDecoderTest.testDecode(CastelProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CastelProtocolDecoderTest"},"endDate":1500431792471,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431791902},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CellocatorProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CellocatorProtocolDecoder.decode(CellocatorProtocolDecoder.java:106)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.CellocatorProtocolDecoderTest.testDecode(CellocatorProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CellocatorProtocolDecoderTest"},"endDate":1500431842347,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431841382},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CguardProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CguardProtocolDecoder.decode(CguardProtocolDecoder.java:126)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.CguardProtocolDecoderTest.testDecode(CguardProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CguardProtocolDecoderTest"},"endDate":1500431827870,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431827201},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CityeasyProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CityeasyProtocolDecoder.decode(CityeasyProtocolDecoder.java:78)\n    at org.traccar.ProtocolTest.verifyNotNull(ProtocolTest.java:82)\n    at org.traccar.protocol.CityeasyProtocolDecoderTest.testDecode(CityeasyProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CityeasyProtocolDecoderTest"},"endDate":1500431862578,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431861634},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.CradlepointProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.CradlepointProtocolDecoder.decode(CradlepointProtocolDecoder.java:64)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.CradlepointProtocolDecoderTest.testDecode(CradlepointProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.CradlepointProtocolDecoderTest"},"endDate":1500431857239,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431856344},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.DishaProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.DishaProtocolDecoder.decode(DishaProtocolDecoder.java:71)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.DishaProtocolDecoderTest.testDecode(DishaProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.DishaProtocolDecoderTest"},"endDate":1500431847309,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431846626},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.DmtHttpProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.DmtHttpProtocolDecoder.decode(DmtHttpProtocolDecoder.java:68)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.DmtHttpProtocolDecoderTest.testDecode(DmtHttpProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.DmtHttpProtocolDecoderTest"},"endDate":1500431793609,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431793020},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.DmtProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.DmtProtocolDecoder.decode(DmtProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.DmtProtocolDecoderTest.testDecode(DmtProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.DmtProtocolDecoderTest"},"endDate":1500431890405,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431889716},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.EasyTrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.EasyTrackProtocolDecoder.decode(EasyTrackProtocolDecoder.java:68)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.EasyTrackProtocolDecoderTest.testDecode(EasyTrackProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.EasyTrackProtocolDecoderTest"},"endDate":1500431896968,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431896241},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.EelinkProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.EelinkProtocolDecoder.decode(EelinkProtocolDecoder.java:223)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.EelinkProtocolDecoderTest.testDecode(EelinkProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.EelinkProtocolDecoderTest"},"endDate":1500431795469,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431794937},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.EnforaProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.EnforaProtocolDecoder.decode(EnforaProtocolDecoder.java:81)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.EnforaProtocolDecoderTest.testDecode(EnforaProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.EnforaProtocolDecoderTest"},"endDate":1500431891951,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431891125},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ExtremTracProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ExtremTracProtocolDecoder.decode(ExtremTracProtocolDecoder.java:59)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.ExtremTracProtocolDecoderTest.testDecode(ExtremTracProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ExtremTracProtocolDecoderTest"},"endDate":1500431851127,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431850388},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.FifotrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.FifotrackProtocolDecoder.decode(FifotrackProtocolDecoder.java:76)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.FifotrackProtocolDecoderTest.testDecode(FifotrackProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.FifotrackProtocolDecoderTest"},"endDate":1500431855623,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431855074},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.FlexCommProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.FlexCommProtocolDecoder.decode(FlexCommProtocolDecoder.java:86)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.FlexCommProtocolDecoderTest.testDecode(FlexCommProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.FlexCommProtocolDecoderTest"},"endDate":1500431807195,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431806452},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.FlextrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.FlextrackProtocolDecoder.decode(FlextrackProtocolDecoder.java:92)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.FlextrackProtocolDecoderTest.testDecode(FlextrackProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.FlextrackProtocolDecoderTest"},"endDate":1500431887163,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431886279},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.FoxProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.FoxProtocolDecoder.decode(FoxProtocolDecoder.java:81)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.FoxProtocolDecoderTest.testDecode(FoxProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.FoxProtocolDecoderTest"},"endDate":1500431899249,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431898413},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.FreedomProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.FreedomProtocolDecoder.decode(FreedomProtocolDecoder.java:59)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.FreedomProtocolDecoderTest.testDecode(FreedomProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.FreedomProtocolDecoderTest"},"endDate":1500431829676,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431828801},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GalileoProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GalileoProtocolDecoder.decode(GalileoProtocolDecoder.java:268)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:110)\n    at org.traccar.protocol.GalileoProtocolDecoderTest.testDecode(GalileoProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GalileoProtocolDecoderTest"},"endDate":1500431889716,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431889059},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GatorProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GatorProtocolDecoder.decode(GatorProtocolDecoder.java:96)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.GatorProtocolDecoderTest.testDecode(GatorProtocolDecoderTest.java:21)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GatorProtocolDecoderTest"},"endDate":1500431810295,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431809735},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gl100ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gl100ProtocolDecoder.decode(Gl100ProtocolDecoder.java:78)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Gl100ProtocolDecoderTest.testDecode(Gl100ProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gl100ProtocolDecoderTest"},"endDate":1500431888019,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431887163},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gl200BinaryProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gl200BinaryProtocolDecoder.decode(Gl200BinaryProtocolDecoder.java:60)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Gl200BinaryProtocolDecoderTest.testDecode(Gl200BinaryProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gl200BinaryProtocolDecoderTest"},"endDate":1500431883527,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431882820},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gl200TextProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gl200TextProtocolDecoder.initPosition(Gl200TextProtocolDecoder.java:369)\n    at org.traccar.protocol.Gl200TextProtocolDecoder.decodeBasic(Gl200TextProtocolDecoder.java:744)\n    at org.traccar.protocol.Gl200TextProtocolDecoder.decode(Gl200TextProtocolDecoder.java:863)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Gl200TextProtocolDecoderTest.testDecode(Gl200TextProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gl200TextProtocolDecoderTest"},"endDate":1500431831833,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431830894},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GlobalSatProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GlobalSatProtocolDecoder.decodeOriginal(GlobalSatProtocolDecoder.java:88)\n    at org.traccar.protocol.GlobalSatProtocolDecoder.decode(GlobalSatProtocolDecoder.java:240)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GlobalSatProtocolDecoderTest.testDecode(GlobalSatProtocolDecoderTest.java:18)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GlobalSatProtocolDecoderTest"},"endDate":1500431796061,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431795469},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GnxProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GnxProtocolDecoder.decode(GnxProtocolDecoder.java:86)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GnxProtocolDecoderTest.testDecode(GnxProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GnxProtocolDecoderTest"},"endDate":1500431815845,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431815252},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GoSafeProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GoSafeProtocolDecoder.decode(GoSafeProtocolDecoder.java:214)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.GoSafeProtocolDecoderTest.testDecode(GoSafeProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GoSafeProtocolDecoderTest"},"endDate":1500431793020,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431792471},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GotopProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GotopProtocolDecoder.decode(GotopProtocolDecoder.java:61)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GotopProtocolDecoderTest.testDecode(GotopProtocolDecoderTest.java:19)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GotopProtocolDecoderTest"},"endDate":1500431825519,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431824579},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gps056ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gps056ProtocolDecoder.decode(Gps056ProtocolDecoder.java:84)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.Gps056ProtocolDecoderTest.testDecode(Gps056ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gps056ProtocolDecoderTest"},"endDate":1500431794148,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431793609},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gps103ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gps103ProtocolDecoder.decode(Gps103ProtocolDecoder.java:201)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.Gps103ProtocolDecoderTest.testDecode(Gps103ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gps103ProtocolDecoderTest"},"endDate":1500431855074,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431854077},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GpsGateProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GpsGateProtocolDecoder.decode(GpsGateProtocolDecoder.java:149)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GpsGateProtocolDecoderTest.testDecode(GpsGateProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GpsGateProtocolDecoderTest"},"endDate":1500431820135,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431819474},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GpsMarkerProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GpsMarkerProtocolDecoder.decode(GpsMarkerProtocolDecoder.java:67)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GpsMarkerProtocolDecoderTest.testDecode(GpsMarkerProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GpsMarkerProtocolDecoderTest"},"endDate":1500431869192,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431868586},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GpsmtaProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GpsmtaProtocolDecoder.decode(GpsmtaProtocolDecoder.java:63)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.GpsmtaProtocolDecoderTest.testDecode(GpsmtaProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GpsmtaProtocolDecoderTest"},"endDate":1500431866986,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431865826},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.GranitProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.GranitProtocolDecoder.decode(GranitProtocolDecoder.java:157)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.GranitProtocolDecoderTest.testDecode(GranitProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.GranitProtocolDecoderTest"},"endDate":1500431794937,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431794148},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gt02ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gt02ProtocolDecoder.decode(Gt02ProtocolDecoder.java:58)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.Gt02ProtocolDecoderTest.testDecode(Gt02ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gt02ProtocolDecoderTest"},"endDate":1500431877008,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431876113},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gt06ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gt06ProtocolDecoder.decodeBasic(Gt06ProtocolDecoder.java:328)\n    at org.traccar.protocol.Gt06ProtocolDecoder.decode(Gt06ProtocolDecoder.java:598)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.Gt06ProtocolDecoderTest.testDecode(Gt06ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gt06ProtocolDecoderTest"},"endDate":1500431839948,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431839075},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Gt30ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Gt30ProtocolDecoder.decode(Gt30ProtocolDecoder.java:82)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Gt30ProtocolDecoderTest.testDecode(Gt30ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Gt30ProtocolDecoderTest"},"endDate":1500431880196,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431879431},{"result":{"success":false,"error":"testDecodeStatus(org.traccar.protocol.H02ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.H02ProtocolDecoder.decodeText(H02ProtocolDecoder.java:232)\n    at org.traccar.protocol.H02ProtocolDecoder.decode(H02ProtocolDecoder.java:389)\n    at org.traccar.ProtocolTest.verifyAttribute(ProtocolTest.java:90)\n    at org.traccar.protocol.H02ProtocolDecoderTest.testDecodeStatus(H02ProtocolDecoderTest.java:208)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecodeStatus","class":"org.traccar.protocol.H02ProtocolDecoderTest"},"endDate":1500431859167,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431858572},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.H02ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.H02ProtocolDecoder.decodeLink(H02ProtocolDecoder.java:342)\n    at org.traccar.protocol.H02ProtocolDecoder.decode(H02ProtocolDecoder.java:387)\n    at org.traccar.ProtocolTest.verifyAttributes(ProtocolTest.java:94)\n    at org.traccar.protocol.H02ProtocolDecoderTest.testDecode(H02ProtocolDecoderTest.java:17)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.H02ProtocolDecoderTest"},"endDate":1500431859778,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431859167},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.HaicomProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.HaicomProtocolDecoder.decode(HaicomProtocolDecoder.java:68)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.HaicomProtocolDecoderTest.testDecode(HaicomProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.HaicomProtocolDecoderTest"},"endDate":1500431854077,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431853256},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.HomtecsProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.HomtecsProtocolDecoder.decode(HomtecsProtocolDecoder.java:64)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.HomtecsProtocolDecoderTest.testDecode(HomtecsProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.HomtecsProtocolDecoderTest"},"endDate":1500431872407,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431871742},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.HuaShengProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.HuaShengProtocolDecoder.decode(HuaShengProtocolDecoder.java:80)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.HuaShengProtocolDecoderTest.testDecode(HuaShengProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.HuaShengProtocolDecoderTest"},"endDate":1500431791902,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431791084},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.HuabaoProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.HuabaoProtocolDecoder.decode(HuabaoProtocolDecoder.java:111)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.HuabaoProtocolDecoderTest.testDecode(HuabaoProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.HuabaoProtocolDecoderTest"},"endDate":1500431881889,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431880956},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.HunterProProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.HunterProProtocolDecoder.decode(HunterProProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.HunterProProtocolDecoderTest.testDecode(HunterProProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.HunterProProtocolDecoderTest"},"endDate":1500431892613,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431891951},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.IdplProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.IdplProtocolDecoder.decode(IdplProtocolDecoder.java:77)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.IdplProtocolDecoderTest.testDecode(IdplProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.IdplProtocolDecoderTest"},"endDate":1500431828801,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431827870},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.IntellitracProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.IntellitracProtocolDecoder.decode(IntellitracProtocolDecoder.java:78)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.IntellitracProtocolDecoderTest.testDecode(IntellitracProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.IntellitracProtocolDecoderTest"},"endDate":1500431895510,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431894806},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.JpKorjarProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.JpKorjarProtocolDecoder.decode(JpKorjarProtocolDecoder.java:66)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.JpKorjarProtocolDecoderTest.testDecode(JpKorjarProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.JpKorjarProtocolDecoderTest"},"endDate":1500431822692,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431822017},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Jt600ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Jt600ProtocolDecoder.decodeBinary(Jt600ProtocolDecoder.java:58)\n    at org.traccar.protocol.Jt600ProtocolDecoder.decode(Jt600ProtocolDecoder.java:289)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Jt600ProtocolDecoderTest.testDecode(Jt600ProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Jt600ProtocolDecoderTest"},"endDate":1500431876113,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431875328},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.KenjiProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.KenjiProtocolDecoder.decode(KenjiProtocolDecoder.java:82)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.KenjiProtocolDecoderTest.testDecode(KenjiProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.KenjiProtocolDecoderTest"},"endDate":1500431858572,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431858001},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.KhdProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.KhdProtocolDecoder.decode(KhdProtocolDecoder.java:77)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.KhdProtocolDecoderTest.testDecode(KhdProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.KhdProtocolDecoderTest"},"endDate":1500431851817,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431851127},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.L100ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.L100ProtocolDecoder.decode(L100ProtocolDecoder.java:89)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.L100ProtocolDecoderTest.testDecode(L100ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.L100ProtocolDecoderTest"},"endDate":1500431877674,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431877008},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.LaipacProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.LaipacProtocolDecoder.decode(LaipacProtocolDecoder.java:69)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.LaipacProtocolDecoderTest.testDecode(LaipacProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.LaipacProtocolDecoderTest"},"endDate":1500431796601,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431796061},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.M2mProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.M2mProtocolDecoder.decode(M2mProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.M2mProtocolDecoderTest.testDecode(M2mProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.M2mProtocolDecoderTest"},"endDate":1500431830894,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431829676},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MaestroProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MaestroProtocolDecoder.decode(MaestroProtocolDecoder.java:68)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.MaestroProtocolDecoderTest.testDecode(MaestroProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MaestroProtocolDecoderTest"},"endDate":1500431867609,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431866986},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ManPowerProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ManPowerProtocolDecoder.decode(ManPowerProtocolDecoder.java:63)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.ManPowerProtocolDecoderTest.testDecode(ManPowerProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ManPowerProtocolDecoderTest"},"endDate":1500431799497,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431798915},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MegastekProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MegastekProtocolDecoder.decodeNew(MegastekProtocolDecoder.java:286)\n    at org.traccar.protocol.MegastekProtocolDecoder.decode(MegastekProtocolDecoder.java:379)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.MegastekProtocolDecoderTest.testDecode(MegastekProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MegastekProtocolDecoderTest"},"endDate":1500431896241,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431895510},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MeiligaoProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MeiligaoProtocolDecoder.identify(MeiligaoProtocolDecoder.java:151)\n    at org.traccar.protocol.MeiligaoProtocolDecoder.decode(MeiligaoProtocolDecoder.java:361)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.MeiligaoProtocolDecoderTest.testDecode(MeiligaoProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MeiligaoProtocolDecoderTest"},"endDate":1500431893349,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431892613},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MeitrackProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MeitrackProtocolDecoder.decodeRegularMessage(MeitrackProtocolDecoder.java:122)\n    at org.traccar.protocol.MeitrackProtocolDecoder.decode(MeitrackProtocolDecoder.java:326)\n    at org.traccar.ProtocolTest.verifyNotNull(ProtocolTest.java:82)\n    at org.traccar.protocol.MeitrackProtocolDecoderTest.testDecode(MeitrackProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MeitrackProtocolDecoderTest"},"endDate":1500431873055,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431872407},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MiniFinderProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MiniFinderProtocolDecoder.decode(MiniFinderProtocolDecoder.java:136)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.MiniFinderProtocolDecoderTest.testDecode(MiniFinderProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MiniFinderProtocolDecoderTest"},"endDate":1500431858001,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431857240},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MtxProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MtxProtocolDecoder.decode(MtxProtocolDecoder.java:74)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.MtxProtocolDecoderTest.testDecode(MtxProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MtxProtocolDecoderTest"},"endDate":1500431832701,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431831833},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.MxtProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.MxtProtocolDecoder.decode(MxtProtocolDecoder.java:78)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.MxtProtocolDecoderTest.testDecode(MxtProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.MxtProtocolDecoderTest"},"endDate":1500431826432,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431825519},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.NavigilProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.NavigilProtocolDecoder.decode(NavigilProtocolDecoder.java:285)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.NavigilProtocolDecoderTest.testDecode(NavigilProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.NavigilProtocolDecoderTest"},"endDate":1500431898413,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431897639},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.NavisProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.NavisProtocolDecoder.processHandshake(NavisProtocolDecoder.java:223)\n    at org.traccar.protocol.NavisProtocolDecoder.decode(NavisProtocolDecoder.java:272)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.NavisProtocolDecoderTest.testDecode(NavisProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.NavisProtocolDecoderTest"},"endDate":1500431838200,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431837324},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.NoranProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.NoranProtocolDecoder.decode(NoranProtocolDecoder.java:140)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.NoranProtocolDecoderTest.testDecode(NoranProtocolDecoderTest.java:18)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.NoranProtocolDecoderTest"},"endDate":1500431871037,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431870007},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.NvsProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.NvsProtocolDecoder.decode(NvsProtocolDecoder.java:57)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.NvsProtocolDecoderTest.testDecode(NvsProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.NvsProtocolDecoderTest"},"endDate":1500431863849,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431863214},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ObdDongleProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ObdDongleProtocolDecoder.decode(ObdDongleProtocolDecoder.java:70)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.ObdDongleProtocolDecoderTest.testDecode(ObdDongleProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ObdDongleProtocolDecoderTest"},"endDate":1500431804504,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431803966},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.OigoProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.OigoProtocolDecoder.decodeMgMessage(OigoProtocolDecoder.java:174)\n    at org.traccar.protocol.OigoProtocolDecoder.decode(OigoProtocolDecoder.java:235)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.OigoProtocolDecoderTest.testDecode(OigoProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.OigoProtocolDecoderTest"},"endDate":1500431812182,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431811604},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.OrionProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.OrionProtocolDecoder.decode(OrionProtocolDecoder.java:72)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.OrionProtocolDecoderTest.testDecode(OrionProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.OrionProtocolDecoderTest"},"endDate":1500431850388,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431849440},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.OsmAndProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.OsmAndProtocolDecoder.decode(OsmAndProtocolDecoder.java:74)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.OsmAndProtocolDecoderTest.testDecode(OsmAndProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.OsmAndProtocolDecoderTest"},"endDate":1500431797740,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431797141},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.OwnTracksProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.OwnTracksProtocolDecoder.decode(OwnTracksProtocolDecoder.java:105)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.OwnTracksProtocolDecoderTest.testDecode(OwnTracksProtocolDecoderTest.java:14)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.OwnTracksProtocolDecoderTest"},"endDate":1500431822017,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431820878},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.PathAwayProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.PathAwayProtocolDecoder.decode(PathAwayProtocolDecoder.java:64)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.PathAwayProtocolDecoderTest.testDecode(PathAwayProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.PathAwayProtocolDecoderTest"},"endDate":1500431891125,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431890405},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.PiligrimProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.PiligrimProtocolDecoder.decode(PiligrimProtocolDecoder.java:83)\n    at org.traccar.ProtocolTest.verifyPositions(ProtocolTest.java:106)\n    at org.traccar.protocol.PiligrimProtocolDecoderTest.testDecode(PiligrimProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.PiligrimProtocolDecoderTest"},"endDate":1500431889059,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431888019},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.PretraceProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.PretraceProtocolDecoder.decode(PretraceProtocolDecoder.java:69)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.PretraceProtocolDecoderTest.testDecode(PretraceProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.PretraceProtocolDecoderTest"},"endDate":1500431813978,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431813428},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.PricolProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.PricolProtocolDecoder.decode(PricolProtocolDecoder.java:44)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.PricolProtocolDecoderTest.testDecode(PricolProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.PricolProtocolDecoderTest"},"endDate":1500431856344,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431855623},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.ProgressProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.ProgressProtocolDecoder.decode(ProgressProtocolDecoder.java:82)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.ProgressProtocolDecoderTest.testDecode(ProgressProtocolDecoderTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.ProgressProtocolDecoderTest"},"endDate":1500431807809,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431807195},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Pt3000ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Pt3000ProtocolDecoder.decode(Pt3000ProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:102)\n    at org.traccar.protocol.Pt3000ProtocolDecoderTest.testDecode(Pt3000ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Pt3000ProtocolDecoderTest"},"endDate":1500431815252,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431814643},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.Pt502ProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.Pt502ProtocolDecoder.decode(Pt502ProtocolDecoder.java:103)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.Pt502ProtocolDecoderTest.testDecode(Pt502ProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.Pt502ProtocolDecoderTest"},"endDate":1500431811052,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431810295},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.RaveonProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.RaveonProtocolDecoder.decode(RaveonProtocolDecoder.java:66)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.RaveonProtocolDecoderTest.testDecode(RaveonProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.RaveonProtocolDecoderTest"},"endDate":1500431897639,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431896968},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.RitiProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.RitiProtocolDecoder.decode(RitiProtocolDecoder.java:62)\n    at org.traccar.ProtocolTest.verifyPosition(ProtocolTest.java:98)\n    at org.traccar.protocol.RitiProtocolDecoderTest.testDecode(RitiProtocolDecoderTest.java:15)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.RitiProtocolDecoderTest"},"endDate":1500431871742,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431871037},{"result":{"success":false,"error":"testDecode(org.traccar.protocol.RuptelaProtocolDecoderTest): null\nclass fr.inria.spirals.npefix.resi.exception.AbnormalExecutionError: null\n    at org.traccar.BaseProtocolDecoder.getDeviceSession(BaseProtocolDecoder.java:245)\n    at org.traccar.protocol.RuptelaProtocolDecoder.decode(RuptelaProtocolDecoder.java:86)\n    at org.traccar.ProtocolTest.verifyNull(ProtocolTest.java:86)\n    at org.traccar.protocol.RuptelaProtocolDecoderTest.testDecode(RuptelaProtocolDecoderTest.java:13)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-2)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at utils.sacha.runner.main.TestRunner.run(TestRunner.java:70)\n    at fr.inria.spirals.npefix.main.all.Launcher.run(Launcher.java:265)\n\n\n","type":"test"},"metadata":{"seed":10,"strategy_selection":"exploration"},"test":{"name":"testDecode","class":"org.traccar.protocol.RuptelaProtocolDecoderTest"},"endDate":1500431852686,"decisions":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}}],"diff":"--- /BaseProtocolDecoder.java\n+++ /BaseProtocolDecoder.java\n@@ -108,12 +108,14 @@\n     public DeviceSession getDeviceSession(Channel channel, SocketAddress remoteAddress, String... uniqueIds) {\n-        if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n-                || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n-            long deviceId = findDeviceId(remoteAddress, uniqueIds);\n-            if (deviceId != 0) {\n-                if (Context.getConnectionManager() != null) {\n-                    Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+        if (channel != null) {\n+            if (channel.getPipeline().get(HttpRequestDecoder.class) != null\n+            || Context.getConfig().getBoolean(\"decoder.ignoreSessionCache\")) {\n+                long deviceId = findDeviceId(remoteAddress, uniqueIds);\n+                if (deviceId != 0) {\n+                    if (Context.getConnectionManager() != null) {\n+                        Context.getConnectionManager().addActiveDevice(deviceId, protocol, channel, remoteAddress);\n+                    }\n+                    return new DeviceSession(deviceId);\n+                } else {\n+                    return null;\n                 }\n-                return new DeviceSession(deviceId);\n-            } else {\n-                return null;\n             }\n","locations":[{"sourceEnd":3945,"line":109,"executionCount":0,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"}],"startDate":1500431851817}],"endInit":1500431788205,"start":1500431791058,"end":1500431899271,"searchSpace":[{"epsilon":0,"nbUse":1,"decisionType":"NEW","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":true,"strategy":"Strat3","value":{"instanceType":"Primitive","class":"class java.lang.Boolean","value":false}},{"epsilon":0,"nbUse":0,"decisionType":"RANDOM","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":false,"strategy":"Strat4 NULL","value":{"instanceType":"Primitive","class":"null","value":"null"}},{"epsilon":0,"nbUse":0,"decisionType":"RANDOM","location":{"sourceEnd":3945,"line":109,"sourceStart":3939,"class":"org.traccar.BaseProtocolDecoder"},"used":false,"strategy":"Strat4 NEW","value":{"parameterTypes":["long"],"instanceType":"New","class":"org.traccar.DeviceSession","parameters":[{"instanceType":"Primitive","class":"class java.lang.Long","value":0}]}}]}