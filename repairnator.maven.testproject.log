[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building htm.java 0.6.11
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- jacoco-maven-plugin:0.7.5.201505241946:prepare-agent (default-prepare-agent) @ htm.java ---
[INFO] argLine set to -javaagent:/home/repairnator/workspace/20170305_202614/numenta/htm.java/207958447/.m2/org/jacoco/org.jacoco.agent/0.7.5.201505241946/org.jacoco.agent-0.7.5.201505241946-runtime.jar=destfile=/home/repairnator/workspace/20170305_202614/numenta/htm.java/207958447/target/jacoco.exec,includes=org/numenta/nupic/** -Xmx2048m -Xms1024m
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ htm.java ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 4 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.2:compile (default-compile) @ htm.java ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ htm.java ---
[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!
[INFO] Copying 22 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.2:testCompile (default-testCompile) @ htm.java ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.18.1:test (default-test) @ htm.java ---
[INFO] Surefire report directory: /home/repairnator/workspace/20170305_202614/numenta/htm.java/207958447/target/surefire-reports
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18.1/surefire-junit4-2.18.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18.1/surefire-junit4-2.18.1.pom (3 KB at 5.2 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.18.1/surefire-providers-2.18.1.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.18.1/surefire-providers-2.18.1.pom (3 KB at 108.0 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18.1/surefire-junit4-2.18.1.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18.1/surefire-junit4-2.18.1.jar (67 KB at 1207.2 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.numenta.nupic.BitHistoryTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.044 sec <<< FAILURE! - in org.numenta.nupic.BitHistoryTest
testPFormatArray(org.numenta.nupic.BitHistoryTest)  Time elapsed: 0.034 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<[ 2[.00 4.]00 ]> but was:<[ 2[,00 4,]00 ]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at org.numenta.nupic.BitHistoryTest.testPFormatArray(BitHistoryTest.java:22)

Running org.numenta.nupic.ParametersTest
Difference is OK: Property:potentialRadius is different - CN:-1 | PARAM:-1
Property:synPermActiveInc is different - CONNECTIONS:0.05 | PARAMETERS:0.9
Property:synPermTrimThreshold is different - CONNECTIONS:0.025 | PARAMETERS:0.05
All Defaults:
{
	Spatial: {
		learn:true
		inputDimensions:[64]
		potentialRadius:-1
		potentialPct:0.5
		globalInhibition:false
		inhibitionRadius:0
		localAreaDensity:-1.0
		numActiveColumnsPerInhArea:10.0
		stimulusThreshold:0.0
		synPermInactiveDec:0.008
		synPermActiveInc:0.05
		synPermConnected:0.1
		synPermBelowStimulusInc:0.01
		synPermTrimThreshold:0.05
		minPctOverlapDutyCycles:0.001
		minPctActiveDutyCycles:0.001
		dutyCyclePeriod:1000
		maxBoost:10.0
		wrapAround:true
	}
	Temporal: {
		columnDimensions:[2048]
		cellsPerColumn:32
		activationThreshold:13
		learningRadius:2048
		minThreshold:10
		maxNewSynapseCount:20
		maxSynapsesPerSegment:255
		maxSegmentsPerCell:255
		initialPermanence:0.21
		connectedPermanence:0.5
		permanenceIncrement:0.1
		permanenceDecrement:0.1
		predictedSegmentDecrement:0.0
	}
	Other: {
		random:org.numenta.nupic.util.MersenneTwister@565d7d2f
		seed:42
		n:500
		w:21
		minVal:0.0
		maxVal:1000.0
		radius:21.0
		resolution:1.0
		periodic:false
		clipInput:false
		forced:false
		fieldName:UNSET
		fieldType:int
		encoderType:ScalarEncoder
		fieldEncodings:{}
		hasClassifiers:false
		inferredFields:{}
	}
}
Spatial Defaults:
{
	Spatial: {
		learn:true
		inputDimensions:[64]
		potentialRadius:-1
		potentialPct:0.5
		globalInhibition:false
		inhibitionRadius:0
		localAreaDensity:-1.0
		numActiveColumnsPerInhArea:10.0
		stimulusThreshold:0.0
		synPermInactiveDec:0.008
		synPermActiveInc:0.05
		synPermConnected:0.1
		synPermBelowStimulusInc:0.01
		synPermTrimThreshold:0.05
		minPctOverlapDutyCycles:0.001
		minPctActiveDutyCycles:0.001
		dutyCyclePeriod:1000
		maxBoost:10.0
		wrapAround:true
	}
}
Temporal Defaults:
{
	Spatial: {
		learn:true
	}
	Temporal: {
		columnDimensions:[2048]
		cellsPerColumn:32
		activationThreshold:13
		learningRadius:2048
		minThreshold:10
		maxNewSynapseCount:20
		maxSynapsesPerSegment:255
		maxSegmentsPerCell:255
		initialPermanence:0.21
		connectedPermanence:0.5
		permanenceIncrement:0.1
		permanenceDecrement:0.1
		predictedSegmentDecrement:0.0
	}
}
Updated/Combined:
{
	Spatial: {
		learn:true
		inputDimensions:[64, 64]
		potentialRadius:-1
		potentialPct:0.5
		globalInhibition:false
		inhibitionRadius:0
		localAreaDensity:-1.0
		numActiveColumnsPerInhArea:81.92
		stimulusThreshold:0.0
		synPermInactiveDec:0.008
		synPermActiveInc:0.05
		synPermConnected:0.1
		synPermBelowStimulusInc:0.01
		synPermTrimThreshold:0.05
		minPctOverlapDutyCycles:0.001
		minPctActiveDutyCycles:0.001
		dutyCyclePeriod:1000
		maxBoost:10.0
		wrapAround:true
	}
	Temporal: {
		columnDimensions:[32, 32]
	}
}
Tests run: 12, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.28 sec <<< FAILURE! - in org.numenta.nupic.ParametersTest
testKeys(org.numenta.nupic.ParametersTest)  Time elapsed: 0 sec  <<< FAILURE!
java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.numenta.nupic.ParametersTest.testKeys(ParametersTest.java:254)

testSize(org.numenta.nupic.ParametersTest)  Time elapsed: 0 sec  <<< FAILURE!
java.lang.AssertionError: expected:<48> but was:<49>
	at org.junit.Assert.fail(Assert.java:88)
	at org.junit.Assert.failNotEquals(Assert.java:743)
	at org.junit.Assert.assertEquals(Assert.java:118)
	at org.junit.Assert.assertEquals(Assert.java:555)
	at org.junit.Assert.assertEquals(Assert.java:542)
	at org.numenta.nupic.ParametersTest.testSize(ParametersTest.java:248)

Running org.numenta.nupic.integration.ExtensiveTemporalMemoryTest
+----------------------------------------------------------+------------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+------------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,7474747 |      1,4930373     |   20.0  |   25.0  |   2252.0  |
|          # predicted => active columns (correct)         | 21,8484848 |      1,7942874     |   18.0  |   25.0  |   2163.0  |
|          # predicted => inactive columns (extra)         |     1.0    |      1,063632      |   0.0   |   5.0   |    99.0   |
|        # unpredicted => active columns (bursting)        |  0,8989899 |      1,0395701     |   0.0   |   5.0   |    89.0   |
|           # predicted => active cells (correct)          | 21,8484848 |      1,7942874     |   18.0  |   25.0  |   2163.0  |
|           # predicted => inactive cells (extra)          |     1.0    |      1,063632      |   0.0   |   5.0   |    99.0   |
|                        # segments                        |   2264.0   |         0.0        |  2264.0 |  2264.0 |  226400.0 |
|                        # synapses                        |   24931.0  |         0.0        | 24931.0 | 24931.0 | 2493100.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+------------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 23,0526316 |      1,3366763     |   21.0  |   25.0  |   876.0  |
|          # predicted => active columns (correct)         |    23.0    |      1,3764944     |   21.0  |   25.0  |   874.0  |
|          # predicted => inactive columns (extra)         |  7,9210526 |      4,4861282     |   2.0   |   28.0  |   301.0  |
|        # unpredicted => active columns (bursting)        |  0,0526316 |      0,3201454     |   0.0   |   2.0   |    2.0   |
|           # predicted => active cells (correct)          | 23,1315789 |      1,3797607     |   21.0  |   26.0  |   879.0  |
|           # predicted => inactive cells (extra)          |  7,9473684 |      4,5476852     |   2.0   |   28.0  |   302.0  |
|                        # segments                        |   1285.0   |         0.0        |  1285.0 |  1285.0 |  51400.0 |
|                        # synapses                        |   16215.0  |         0.0        | 16215.0 | 16215.0 | 648600.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 23,0526316 |      1,3366763     |   21.0  |   25.0  |   876.0  |
|          # predicted => active columns (correct)         | 22,2105263 |      1,6084955     |   18.0  |   25.0  |   844.0  |
|          # predicted => inactive columns (extra)         |  1,1578947 |      3,2079368     |   0.0   |   20.0  |   44.0   |
|        # unpredicted => active columns (bursting)        |  0,8421053 |      0,7443229     |   0.0   |   3.0   |   32.0   |
|           # predicted => active cells (correct)          | 22,2368421 |      1,6453157     |   18.0  |   25.0  |   845.0  |
|           # predicted => inactive cells (extra)          |  1,1578947 |      3,2079368     |   0.0   |   20.0  |   44.0   |
|                        # segments                        |    983.0   |         0.0        |  983.0  |  983.0  |  39320.0 |
|                        # synapses                        |   10918.0  |         0.0        | 10918.0 | 10918.0 | 436720.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => active columns (correct)         | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|           # predicted => active cells (correct)          | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|                        # segments                        |   2273.0  |         0.0        |  2273.0 |  2273.0 |  227300.0 |
|                        # synapses                        |  25003.0  |         0.0        | 25003.0 | 25003.0 | 2500300.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |     sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                     # active columns                     | 23,006689 |      1,4094599     |   21.0  |   25.0  |   6879.0   |
|          # predicted => active columns (correct)         | 23,006689 |      1,4094599     |   21.0  |   25.0  |   6879.0   |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|           # predicted => active cells (correct)          | 23,006689 |      1,4094599     |   21.0  |   25.0  |   6879.0   |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|                        # segments                        |   6879.0  |         0.0        |  6879.0 |  6879.0 |  2063700.0 |
|                        # synapses                        |  75669.0  |         0.0        | 75669.0 | 75669.0 | 22700700.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |     sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                     # active columns                     | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|          # predicted => active columns (correct)         | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|           # predicted => active cells (correct)          | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|                        # segments                        |   6833.0  |         0.0        |  6833.0 |  6833.0 |  2049900.0 |
|                        # synapses                        |  75163.0  |         0.0        | 75163.0 | 75163.0 | 22548900.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => active columns (correct)         | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|           # predicted => active cells (correct)          | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|                        # segments                        |   2273.0  |         0.0        |  2273.0 |  2273.0 |  227300.0 |
|                        # synapses                        |  25003.0  |         0.0        | 25003.0 | 25003.0 | 2500300.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |     sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+
|                     # active columns                     | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|          # predicted => active columns (correct)         | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|           # predicted => active cells (correct)          | 23,006734 |      1,4118147     |   21.0  |   25.0  |   6833.0   |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|                        # segments                        |   6833.0  |         0.0        |  6833.0 |  6833.0 |  2049900.0 |
|                        # synapses                        |  75163.0  |         0.0        | 75163.0 | 75163.0 | 22548900.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |     0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+------------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => active columns (correct)         | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|           # predicted => active cells (correct)          | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|                        # segments                        |   2273.0  |         0.0        |  2273.0 |  2273.0 |  227300.0 |
|                        # synapses                        |  25003.0  |         0.0        | 25003.0 | 25003.0 | 2500300.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => active columns (correct)         | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|        # unpredicted => active columns (bursting)        |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|           # predicted => active cells (correct)          | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|                        # segments                        |   2273.0  |         0.0        |  2273.0 |  2273.0 |  227300.0 |
|                        # synapses                        |  25003.0  |         0.0        | 25003.0 | 25003.0 | 2500300.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                          Metric                          |    mean   | standard deviation |   min   |   max   |    sum    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+
|                     # active columns                     | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|          # predicted => active columns (correct)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|          # predicted => inactive columns (extra)         |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|        # unpredicted => active columns (bursting)        | 22,959596 |      1,3992725     |   21.0  |   25.0  |   2273.0  |
|           # predicted => active cells (correct)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|           # predicted => inactive cells (extra)          |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|                        # segments                        |   2273.0  |         0.0        |  2273.0 |  2273.0 |  227300.0 |
|                        # synapses                        |  25003.0  |         0.0        | 25003.0 | 25003.0 | 2500300.0 |
| # predicted => active cells per column for each sequence |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
|   # sequences each predicted => active cells appears in  |    0.0    |         0.0        |   0.0   |   0.0   |    0.0    |
+----------------------------------------------------------+-----------+--------------------+---------+---------+-----------+

+----------------------------------------------------------+------------+--------------------+--------+--------+----------+
|                          Metric                          |    mean    | standard deviation |   min  |   max  |    sum   |
+----------------------------------------------------------+------------+--------------------+--------+--------+----------+
|                     # active columns                     | 23,0526316 |      1,3366763     |  21.0  |  25.0  |   876.0  |
|          # predicted => active columns (correct)         | 23,0526316 |      1,3366763     |  21.0  |  25.0  |   876.0  |
|          # predicted => inactive columns (extra)         |     1.0    |      4,2488389     |   0.0  |  20.0  |   38.0   |
|        # unpredicted => active columns (bursting)        |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
|           # predicted => active cells (correct)          | 23,0526316 |      1,3366763     |  21.0  |  25.0  |   876.0  |
|           # predicted => inactive cells (extra)          |     1.0    |      4,2488389     |   0.0  |  20.0  |   38.0   |
|                        # segments                        |    780.0   |         0.0        |  780.0 |  780.0 |  31200.0 |
|                        # synapses                        |   8580.0   |         0.0        | 8580.0 | 8580.0 | 343200.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
+----------------------------------------------------------+------------+--------------------+--------+--------+----------+

+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 23,0526316 |      1,3366763     |   21.0  |   25.0  |   876.0  |
|          # predicted => active columns (correct)         | 23,0526316 |      1,3366763     |   21.0  |   25.0  |   876.0  |
|          # predicted => inactive columns (extra)         |  0,5263158 |      3,201454      |   0.0   |   20.0  |   20.0   |
|        # unpredicted => active columns (bursting)        |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|           # predicted => active cells (correct)          | 23,0526316 |      1,3366763     |   21.0  |   25.0  |   876.0  |
|           # predicted => inactive cells (extra)          |  0,5263158 |      3,201454      |   0.0   |   20.0  |   20.0   |
|                        # segments                        |    991.0   |         0.0        |  991.0  |  991.0  |  39640.0 |
|                        # synapses                        |   10901.0  |         0.0        | 10901.0 | 10901.0 | 436040.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

+----------------------------------------------------------+------------+--------------------+--------+--------+----------+
|                          Metric                          |    mean    | standard deviation |   min  |   max  |    sum   |
+----------------------------------------------------------+------------+--------------------+--------+--------+----------+
|                     # active columns                     | 23,0789474 |       1,28517      |  21.0  |  25.0  |   877.0  |
|          # predicted => active columns (correct)         | 23,0789474 |       1,28517      |  21.0  |  25.0  |   877.0  |
|          # predicted => inactive columns (extra)         |  0,8684211 |      3,7004342     |   0.0  |  18.0  |   33.0   |
|        # unpredicted => active columns (bursting)        |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
|           # predicted => active cells (correct)          | 23,0789474 |       1,28517      |  21.0  |  25.0  |   877.0  |
|           # predicted => inactive cells (extra)          |  0,8684211 |      3,7004342     |   0.0  |  18.0  |   33.0   |
|                        # segments                        |    777.0   |         0.0        |  777.0 |  777.0 |  31080.0 |
|                        # synapses                        |   8547.0   |         0.0        | 8547.0 | 8547.0 | 341880.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0  |   0.0  |    0.0   |
+----------------------------------------------------------+------------+--------------------+--------+--------+----------+

0  []
1  []
2  []
3  []
4  [7, 15, 22, 23, 27, 40, 47, 49, 58, 59, 61, 62, 82, 89, 92]
5  []
6  []
7  []
8  []
9  []
10  []
11  []
12  []
13  []
14  []
15  []
16  []
17  []
18  []
19  []
20  []
21  []
22  []
23  [0, 4, 9, 12, 17, 34, 38, 39, 41, 44, 65, 68, 74, 76, 83, 88, 93, 99]
24  []
25  []
26  []
27  []
28  []
29  []
30  []
31  []
32  []
33  []
34  []
35  []
36  []
37  []
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 23,2105263 |      1,3795097     |   21.0  |   25.0  |   882.0  |
|          # predicted => active columns (correct)         | 23,2105263 |      1,3795097     |   21.0  |   25.0  |   882.0  |
|          # predicted => inactive columns (extra)         |  1,7631579 |      5,1423638     |   0.0   |   17.0  |   67.0   |
|        # unpredicted => active columns (bursting)        |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|           # predicted => active cells (correct)          | 23,7105263 |      2,9904048     |   21.0  |   40.0  |   901.0  |
|           # predicted => inactive cells (extra)          |  2,6578947 |      9,1285449     |   0.0   |   51.0  |   101.0  |
|                        # segments                        |   1613.0   |         0.0        |  1613.0 |  1613.0 |  64520.0 |
|                        # synapses                        |   17743.0  |         0.0        | 17743.0 | 17743.0 | 709720.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 23,2894737 |      1,3554548     |   21.0  |   25.0  |   885.0  |
|          # predicted => active columns (correct)         | 23,2894737 |      1,3554548     |   21.0  |   25.0  |   885.0  |
|          # predicted => inactive columns (extra)         |  1,8947368 |      5,5856464     |   0.0   |   21.0  |   72.0   |
|        # unpredicted => active columns (bursting)        |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|           # predicted => active cells (correct)          | 23,6842105 |      2,8571725     |   21.0  |   39.0  |   900.0  |
|           # predicted => inactive cells (extra)          |  2,2368421 |      6,6190881     |   0.0   |   27.0  |   85.0   |
|                        # segments                        |   1443.0   |         0.0        |  1443.0 |  1443.0 |  57720.0 |
|                        # synapses                        |   15873.0  |         0.0        | 15873.0 | 15873.0 | 634920.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                          Metric                          |    mean    | standard deviation |   min   |   max   |    sum   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+
|                     # active columns                     | 22,8947368 |      1,4471292     |   20.0  |   25.0  |   870.0  |
|          # predicted => active columns (correct)         | 21,6315789 |      2,0827746     |   17.0  |   25.0  |   822.0  |
|          # predicted => inactive columns (extra)         |  1,7105263 |      2,9460758     |   0.0   |   18.0  |   65.0   |
|        # unpredicted => active columns (bursting)        |  1,2631579 |      1,2286966     |   0.0   |   4.0   |   48.0   |
|           # predicted => active cells (correct)          | 21,6315789 |      2,0827746     |   17.0  |   25.0  |   822.0  |
|           # predicted => inactive cells (extra)          |  1,7105263 |      2,9460758     |   0.0   |   18.0  |   65.0   |
|                        # segments                        |    991.0   |         0.0        |  991.0  |  991.0  |  39640.0 |
|                        # synapses                        |   10953.0  |         0.0        | 10953.0 | 10953.0 | 438120.0 |
| # predicted => active cells per column for each sequence |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
|   # sequences each predicted => active cells appears in  |     0.0    |         0.0        |   0.0   |   0.0   |    0.0   |
+----------------------------------------------------------+------------+--------------------+---------+---------+----------+

Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 14.256 sec - in org.numenta.nupic.integration.ExtensiveTemporalMemoryTest
Running org.numenta.nupic.util.LowMemorySparseBinaryMatrixTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec - in org.numenta.nupic.util.LowMemorySparseBinaryMatrixTest
Running org.numenta.nupic.util.ArrayUtilsTest
Execute in:50 millisecondsTests run: 32, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.112 sec - in org.numenta.nupic.util.ArrayUtilsTest
Running org.numenta.nupic.util.ConditionTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.numenta.nupic.util.ConditionTest
Running org.numenta.nupic.util.MutableNamedTupleTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in org.numenta.nupic.util.MutableNamedTupleTest
Running org.numenta.nupic.util.MatrixTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in org.numenta.nupic.util.MatrixTest
Running org.numenta.nupic.util.SetSparseMatrixTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in org.numenta.nupic.util.SetSparseMatrixTest
Running org.numenta.nupic.util.MersenneTwisterFastTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec - in org.numenta.nupic.util.MersenneTwisterFastTest
Running org.numenta.nupic.util.FlatArrayMatrixTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.util.FlatArrayMatrixTest
Running org.numenta.nupic.util.TopologyTest
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec - in org.numenta.nupic.util.TopologyTest
Running org.numenta.nupic.util.AbstractSparseBinaryMatrixTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec - in org.numenta.nupic.util.AbstractSparseBinaryMatrixTest
Running org.numenta.nupic.util.UniversalRandomTest
e = 83200
x = 0
x = 26
x = 14
x = 15
x = 38
x = 47
x = 13
x = 9
x = 15
x = 31
x = 6
x = 3
x = 0
x = 21
x = 45
d = 0.945
d = 0.2426
d = 0.5214
d = 0.0815
d = 0.0988
d = 0.5497
d = 0.4013
d = 0.4559
d = 0.5415
d = 0.2381
samples are equal ? true
used randoms are equal ? true
collection before: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
collection shuffled: [5, 1, 8, 6, 2, 4, 7, 3, 9, 0]
true
true
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.096 sec - in org.numenta.nupic.util.UniversalRandomTest
Running org.numenta.nupic.util.MersenneTwisterTest
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.014 sec - in org.numenta.nupic.util.MersenneTwisterTest
Running org.numenta.nupic.util.SparseObjectMatrixTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.01 sec - in org.numenta.nupic.util.SparseObjectMatrixTest
Running org.numenta.nupic.util.NamedTupleTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in org.numenta.nupic.util.NamedTupleTest
Running org.numenta.nupic.util.MutableTupleTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.util.MutableTupleTest
Running org.numenta.nupic.util.GeneratorTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in org.numenta.nupic.util.GeneratorTest
Running org.numenta.nupic.util.GroupByTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in org.numenta.nupic.util.GroupByTest
Running org.numenta.nupic.util.FastRandomTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.271 sec - in org.numenta.nupic.util.FastRandomTest
Running org.numenta.nupic.util.TupleTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.util.TupleTest
Running org.numenta.nupic.util.DequeTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 sec - in org.numenta.nupic.util.DequeTest
Running org.numenta.nupic.util.NearestNeighborTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.004 sec - in org.numenta.nupic.util.NearestNeighborTest
Running org.numenta.nupic.util.MethodSignatureTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.numenta.nupic.util.MethodSignatureTest
Running org.numenta.nupic.util.FastRandomSerializationTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.946 sec - in org.numenta.nupic.util.FastRandomSerializationTest
Running org.numenta.nupic.util.SparseBinaryMatrixTest
slice:[0, 0, 0, 0, 1]
slice:[0, 0, 0, 0, 1]
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.076 sec - in org.numenta.nupic.util.SparseBinaryMatrixTest
Running org.numenta.nupic.util.GroupBy2Test
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec - in org.numenta.nupic.util.GroupBy2Test
Running org.numenta.nupic.util.IntGeneratorTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.numenta.nupic.util.IntGeneratorTest
Running org.numenta.nupic.monitor.mixin.MetricsTraceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec - in org.numenta.nupic.monitor.mixin.MetricsTraceTest
Running org.numenta.nupic.monitor.mixin.IndicesTraceTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.monitor.mixin.IndicesTraceTest
Running org.numenta.nupic.monitor.mixin.MonitoredTemporalMemoryTest
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.034 sec <<< FAILURE! - in org.numenta.nupic.monitor.mixin.MonitoredTemporalMemoryTest
test_mmPrettyPrintConnections(org.numenta.nupic.monitor.mixin.MonitoredTemporalMemoryTest)  Time elapsed: 0.034 sec  <<< FAILURE!
java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.numenta.nupic.monitor.mixin.MonitoredTemporalMemoryTest.test_mmPrettyPrintConnections(MonitoredTemporalMemoryTest.java:42)

Running org.numenta.nupic.monitor.mixin.MetricTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.monitor.mixin.MetricTest
Running org.numenta.nupic.datagen.ResourceLocatorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.numenta.nupic.datagen.ResourceLocatorTest
Running org.numenta.nupic.datagen.SequenceMachineTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.datagen.SequenceMachineTest
Running org.numenta.nupic.encoders.DeltaEncoderTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.036 sec - in org.numenta.nupic.encoders.DeltaEncoderTest
Running org.numenta.nupic.encoders.RDSECompatibilityTest
actual: [358, 76, 220, 111, 128, 285, 181, 244, 26, 262, 288, 191, 171, 27, 193, 218, 207, 206, 201, 157, 101]
============== dump =============
RandomDistributedScalarEncoder:
  minIndex: 500
  maxIndex: 500
  w: 21
  n: 400
  resolution: 38.8461538462
  offset: null
  numTries: 0
  name: enc
  buckets : 
  [ 500 ]: [358, 76, 220, 111, 128, 285, 181, 244, 26, 262, 288, 191, 171, 27, 193, 218, 207, 206, 201, 157, 101]

=================================
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.596 sec - in org.numenta.nupic.encoders.RDSECompatibilityTest
Running org.numenta.nupic.encoders.DateEncoderTest
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]


DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 1.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
DateEncoderTest.testWeekend(): minmax.min() = 0.0
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
'{season=[305.0, 305.0], day of week=[3.0, 3.0], weekend=[0.0, 0.0], time of day=[14.4, 14.4]}':'[season, day of week, weekend, time of day]'
decodedToStr=>season:[305,00], day of week:[3,00], weekend:[0,00], time of day:[14,40]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
bucket indices: [10, 3, 0, 18]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.326 sec - in org.numenta.nupic.encoders.DateEncoderTest
Running org.numenta.nupic.encoders.AdaptiveScalarEncoderTest

Encoded data as: [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Encoded data as: [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Encoded data as: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]

The min value is:1.0

Testing non-periodic encoder decoding, resolution of 0,636364 ...

The max value is:8.0

Decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,000000) => '{[1:8]=[1.0, 1.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.0, 1.0]

TopDown => [EncoderResult(value=1.0, scalar=1.0, encoding=[I@5423a17]
Bucket indices => [0]
Bucket info value: 1.0
Minval: 1.0 Abs(BucketVal - Minval): 0.0
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.0

Bucket info value: 1.0

Bucket info encoding: [I@42ff9a77

Original encoding: [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,159091) => '{[1:8]=[1.0, 1.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.0, 1.0]

TopDown => [EncoderResult(value=1.0, scalar=1.0, encoding=[I@23bd047f]
Bucket indices => [0]
Bucket info value: 1.0
Minval: 1.1590909090909092 Abs(BucketVal - Minval): 0.15909090909090917
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.0

Bucket info value: 1.0

Bucket info encoding: [I@3562e7c7

Original encoding: [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,318182) => '{[1:8]=[1.6363636363636362, 1.6363636363636362]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.6363636363636362, 1.6363636363636362]

TopDown => [EncoderResult(value=1.6363636363636362, scalar=1.6363636363636362, encoding=[I@2bfc8558]
Bucket indices => [1]
Bucket info value: 1.6363636363636362
Minval: 1.3181818181818183 Abs(BucketVal - Minval): 0.3181818181818179
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.6363636363636362

Bucket info value: 1.6363636363636362

Bucket info encoding: [I@6029f2a4

Original encoding: [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,477273) => '{[1:8]=[1.6363636363636362, 1.6363636363636362]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.6363636363636362, 1.6363636363636362]

TopDown => [EncoderResult(value=1.6363636363636362, scalar=1.6363636363636362, encoding=[I@30358dc7]
Bucket indices => [1]
Bucket info value: 1.6363636363636362
Minval: 1.4772727272727275 Abs(BucketVal - Minval): 0.15909090909090873
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.6363636363636362

Bucket info value: 1.6363636363636362

Bucket info encoding: [I@7fac18dc

Original encoding: [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,636364) => '{[1:8]=[1.6363636363636362, 1.6363636363636362]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.6363636363636362, 1.6363636363636362]

TopDown => [EncoderResult(value=1.6363636363636362, scalar=1.6363636363636362, encoding=[I@29fcfc54]
Bucket indices => [1]
Bucket info value: 1.6363636363636362
Minval: 1.6363636363636367 Abs(BucketVal - Minval): 4.440892098500626E-16
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.6363636363636362

Bucket info value: 1.6363636363636362

Bucket info encoding: [I@353b0719

Original encoding: [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,795455) => '{[1:8]=[1.6363636363636362, 1.6363636363636362]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [1.6363636363636362, 1.6363636363636362]

TopDown => [EncoderResult(value=1.6363636363636362, scalar=1.6363636363636362, encoding=[I@110620d]
Bucket indices => [1]
Bucket info value: 1.6363636363636362
Minval: 1.7954545454545459 Abs(BucketVal - Minval): 0.15909090909090962
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 1.6363636363636362

Bucket info value: 1.6363636363636362

Bucket info encoding: [I@4f402027

Original encoding: [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,954545) => '{[1:8]=[2.2727272727272725, 2.2727272727272725]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.2727272727272725, 2.2727272727272725]

TopDown => [EncoderResult(value=2.2727272727272725, scalar=2.2727272727272725, encoding=[I@7c226095]
Bucket indices => [2]
Bucket info value: 2.2727272727272725
Minval: 1.954545454545455 Abs(BucketVal - Minval): 0.31818181818181746
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.2727272727272725

Bucket info value: 2.2727272727272725

Bucket info encoding: [I@7ea07516

Original encoding: [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](2,113636) => '{[1:8]=[2.2727272727272725, 2.2727272727272725]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.2727272727272725, 2.2727272727272725]

TopDown => [EncoderResult(value=2.2727272727272725, scalar=2.2727272727272725, encoding=[I@65fc8edc]
Bucket indices => [2]
Bucket info value: 2.2727272727272725
Minval: 2.113636363636364 Abs(BucketVal - Minval): 0.15909090909090828
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.2727272727272725

Bucket info value: 2.2727272727272725

Bucket info encoding: [I@a357c3e

Original encoding: [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](2,272727) => '{[1:8]=[2.2727272727272725, 2.2727272727272725]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.2727272727272725, 2.2727272727272725]

TopDown => [EncoderResult(value=2.2727272727272725, scalar=2.2727272727272725, encoding=[I@3eb9c575]
Bucket indices => [2]
Bucket info value: 2.2727272727272725
Minval: 2.2727272727272734 Abs(BucketVal - Minval): 8.881784197001252E-16
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.2727272727272725

Bucket info value: 2.2727272727272725

Bucket info encoding: [I@3f322610

Original encoding: [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](2,431818) => '{[1:8]=[2.2727272727272725, 2.2727272727272725]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.2727272727272725, 2.2727272727272725]

TopDown => [EncoderResult(value=2.2727272727272725, scalar=2.2727272727272725, encoding=[I@6cf047cf]
Bucket indices => [2]
Bucket info value: 2.2727272727272725
Minval: 2.4318181818181825 Abs(BucketVal - Minval): 0.15909090909091006
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.2727272727272725

Bucket info value: 2.2727272727272725

Bucket info encoding: [I@1c92a549

Original encoding: [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](2,590909) => '{[1:8]=[2.909090909090909, 2.909090909090909]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.909090909090909, 2.909090909090909]

TopDown => [EncoderResult(value=2.909090909090909, scalar=2.909090909090909, encoding=[I@1716c037]
Bucket indices => [3]
Bucket info value: 2.909090909090909
Minval: 2.5909090909090917 Abs(BucketVal - Minval): 0.31818181818181746
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.909090909090909

Bucket info value: 2.909090909090909

Bucket info encoding: [I@79b63325

Original encoding: [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](2,750000) => '{[1:8]=[2.909090909090909, 2.909090909090909]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.909090909090909, 2.909090909090909]

TopDown => [EncoderResult(value=2.909090909090909, scalar=2.909090909090909, encoding=[I@32e830a0]
Bucket indices => [3]
Bucket info value: 2.909090909090909
Minval: 2.750000000000001 Abs(BucketVal - Minval): 0.15909090909090828
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.909090909090909

Bucket info value: 2.909090909090909

Bucket info encoding: [I@135e49b2

Original encoding: [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](2,909091) => '{[1:8]=[2.909090909090909, 2.909090909090909]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.909090909090909, 2.909090909090909]

TopDown => [EncoderResult(value=2.909090909090909, scalar=2.909090909090909, encoding=[I@10b87ff6]
Bucket indices => [3]
Bucket info value: 2.909090909090909
Minval: 2.90909090909091 Abs(BucketVal - Minval): 8.881784197001252E-16
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.909090909090909

Bucket info value: 2.909090909090909

Bucket info encoding: [I@63262071

Original encoding: [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](3,068182) => '{[1:8]=[2.909090909090909, 2.909090909090909]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [2.909090909090909, 2.909090909090909]

TopDown => [EncoderResult(value=2.909090909090909, scalar=2.909090909090909, encoding=[I@1282f784]
Bucket indices => [3]
Bucket info value: 2.909090909090909
Minval: 3.0681818181818192 Abs(BucketVal - Minval): 0.15909090909091006
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 2.909090909090909

Bucket info value: 2.909090909090909

Bucket info encoding: [I@41167ded

Original encoding: [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,227273) => '{[1:8]=[3.5454545454545454, 3.5454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [3.5454545454545454, 3.5454545454545454]

TopDown => [EncoderResult(value=3.5454545454545454, scalar=3.5454545454545454, encoding=[I@36238b12]
Bucket indices => [4]
Bucket info value: 3.5454545454545454
Minval: 3.2272727272727284 Abs(BucketVal - Minval): 0.318181818181817
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 3.5454545454545454

Bucket info value: 3.5454545454545454

Bucket info encoding: [I@33187485

Original encoding: [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,386364) => '{[1:8]=[3.5454545454545454, 3.5454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [3.5454545454545454, 3.5454545454545454]

TopDown => [EncoderResult(value=3.5454545454545454, scalar=3.5454545454545454, encoding=[I@5d2e6f62]
Bucket indices => [4]
Bucket info value: 3.5454545454545454
Minval: 3.3863636363636376 Abs(BucketVal - Minval): 0.15909090909090784
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 3.5454545454545454

Bucket info value: 3.5454545454545454

Bucket info encoding: [I@77ff14ce

Original encoding: [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,545455) => '{[1:8]=[3.5454545454545454, 3.5454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [3.5454545454545454, 3.5454545454545454]

TopDown => [EncoderResult(value=3.5454545454545454, scalar=3.5454545454545454, encoding=[I@5a8d676e]
Bucket indices => [4]
Bucket info value: 3.5454545454545454
Minval: 3.5454545454545467 Abs(BucketVal - Minval): 1.3322676295501878E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 3.5454545454545454

Bucket info value: 3.5454545454545454

Bucket info encoding: [I@74764622

Original encoding: [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,704545) => '{[1:8]=[3.5454545454545454, 3.5454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [3.5454545454545454, 3.5454545454545454]

TopDown => [EncoderResult(value=3.5454545454545454, scalar=3.5454545454545454, encoding=[I@63dc3420]
Bucket indices => [4]
Bucket info value: 3.5454545454545454
Minval: 3.704545454545456 Abs(BucketVal - Minval): 0.1590909090909105
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 3.5454545454545454

Bucket info value: 3.5454545454545454

Bucket info encoding: [I@525b8922

Original encoding: [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0](3,863636) => '{[1:8]=[4.181818181818182, 4.181818181818182]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.181818181818182, 4.181818181818182]

TopDown => [EncoderResult(value=4.181818181818182, scalar=4.181818181818182, encoding=[I@6caa4dc5]
Bucket indices => [5]
Bucket info value: 4.181818181818182
Minval: 3.863636363636365 Abs(BucketVal - Minval): 0.31818181818181657
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.181818181818182

Bucket info value: 4.181818181818182

Bucket info encoding: [I@6ed51944

Original encoding: [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0](4,022727) => '{[1:8]=[4.181818181818182, 4.181818181818182]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.181818181818182, 4.181818181818182]

TopDown => [EncoderResult(value=4.181818181818182, scalar=4.181818181818182, encoding=[I@20c3b34b]
Bucket indices => [5]
Bucket info value: 4.181818181818182
Minval: 4.022727272727274 Abs(BucketVal - Minval): 0.1590909090909074
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.181818181818182

Bucket info value: 4.181818181818182

Bucket info encoding: [I@1eb906f3

Original encoding: [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0](4,181818) => '{[1:8]=[4.181818181818182, 4.181818181818182]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.181818181818182, 4.181818181818182]

TopDown => [EncoderResult(value=4.181818181818182, scalar=4.181818181818182, encoding=[I@74fc3fc7]
Bucket indices => [5]
Bucket info value: 4.181818181818182
Minval: 4.181818181818183 Abs(BucketVal - Minval): 1.7763568394002505E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.181818181818182

Bucket info value: 4.181818181818182

Bucket info encoding: [I@491893f8

Original encoding: [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0](4,340909) => '{[1:8]=[4.181818181818182, 4.181818181818182]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.181818181818182, 4.181818181818182]

TopDown => [EncoderResult(value=4.181818181818182, scalar=4.181818181818182, encoding=[I@46e388ec]
Bucket indices => [5]
Bucket info value: 4.181818181818182
Minval: 4.340909090909093 Abs(BucketVal - Minval): 0.15909090909091095
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.181818181818182

Bucket info value: 4.181818181818182

Bucket info encoding: [I@53f495f0

Original encoding: [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0](4,500000) => '{[1:8]=[4.818181818181818, 4.818181818181818]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.818181818181818, 4.818181818181818]

TopDown => [EncoderResult(value=4.818181818181818, scalar=4.818181818181818, encoding=[I@45707f76]
Bucket indices => [6]
Bucket info value: 4.818181818181818
Minval: 4.500000000000002 Abs(BucketVal - Minval): 0.31818181818181657
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.818181818181818

Bucket info value: 4.818181818181818

Bucket info encoding: [I@1f0e2bdc

Original encoding: [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0](4,659091) => '{[1:8]=[4.818181818181818, 4.818181818181818]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.818181818181818, 4.818181818181818]

TopDown => [EncoderResult(value=4.818181818181818, scalar=4.818181818181818, encoding=[I@44a93f8a]
Bucket indices => [6]
Bucket info value: 4.818181818181818
Minval: 4.659090909090911 Abs(BucketVal - Minval): 0.1590909090909074
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.818181818181818

Bucket info value: 4.818181818181818

Bucket info encoding: [I@26463a6

Original encoding: [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0](4,818182) => '{[1:8]=[4.818181818181818, 4.818181818181818]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.818181818181818, 4.818181818181818]

TopDown => [EncoderResult(value=4.818181818181818, scalar=4.818181818181818, encoding=[I@17354708]
Bucket indices => [6]
Bucket info value: 4.818181818181818
Minval: 4.81818181818182 Abs(BucketVal - Minval): 1.7763568394002505E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.818181818181818

Bucket info value: 4.818181818181818

Bucket info encoding: [I@1aed6f0b

Original encoding: [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0](4,977273) => '{[1:8]=[4.818181818181818, 4.818181818181818]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [4.818181818181818, 4.818181818181818]

TopDown => [EncoderResult(value=4.818181818181818, scalar=4.818181818181818, encoding=[I@134c38]
Bucket indices => [6]
Bucket info value: 4.818181818181818
Minval: 4.977272727272729 Abs(BucketVal - Minval): 0.15909090909091095
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 4.818181818181818

Bucket info value: 4.818181818181818

Bucket info encoding: [I@3d235635

Original encoding: [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0](5,136364) => '{[1:8]=[5.454545454545454, 5.454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [5.454545454545454, 5.454545454545454]

TopDown => [EncoderResult(value=5.454545454545454, scalar=5.454545454545454, encoding=[I@5dd6a4c8]
Bucket indices => [7]
Bucket info value: 5.454545454545454
Minval: 5.1363636363636385 Abs(BucketVal - Minval): 0.3181818181818157
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 5.454545454545454

Bucket info value: 5.454545454545454

Bucket info encoding: [I@47be41c6

Original encoding: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0](5,295455) => '{[1:8]=[5.454545454545454, 5.454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [5.454545454545454, 5.454545454545454]

TopDown => [EncoderResult(value=5.454545454545454, scalar=5.454545454545454, encoding=[I@13a268cd]
Bucket indices => [7]
Bucket info value: 5.454545454545454
Minval: 5.295454545454548 Abs(BucketVal - Minval): 0.1590909090909065
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 5.454545454545454

Bucket info value: 5.454545454545454

Bucket info encoding: [I@7b3a6e95

Original encoding: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0](5,454545) => '{[1:8]=[5.454545454545454, 5.454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [5.454545454545454, 5.454545454545454]

TopDown => [EncoderResult(value=5.454545454545454, scalar=5.454545454545454, encoding=[I@77a2688d]
Bucket indices => [7]
Bucket info value: 5.454545454545454
Minval: 5.454545454545457 Abs(BucketVal - Minval): 2.6645352591003757E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 5.454545454545454

Bucket info value: 5.454545454545454

Bucket info encoding: [I@77c692b4

Original encoding: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0](5,613636) => '{[1:8]=[5.454545454545454, 5.454545454545454]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [5.454545454545454, 5.454545454545454]

TopDown => [EncoderResult(value=5.454545454545454, scalar=5.454545454545454, encoding=[I@6caeba36]
Bucket indices => [7]
Bucket info value: 5.454545454545454
Minval: 5.613636363636366 Abs(BucketVal - Minval): 0.15909090909091184
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 5.454545454545454

Bucket info value: 5.454545454545454

Bucket info encoding: [I@8ac512e

Original encoding: [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0](5,772727) => '{[1:8]=[6.090909090909091, 6.090909090909091]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.090909090909091, 6.090909090909091]

TopDown => [EncoderResult(value=6.090909090909091, scalar=6.090909090909091, encoding=[I@14e3d439]
Bucket indices => [8]
Bucket info value: 6.090909090909091
Minval: 5.772727272727275 Abs(BucketVal - Minval): 0.3181818181818157
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.090909090909091

Bucket info value: 6.090909090909091

Bucket info encoding: [I@d85b399

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0](5,931818) => '{[1:8]=[6.090909090909091, 6.090909090909091]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.090909090909091, 6.090909090909091]

TopDown => [EncoderResult(value=6.090909090909091, scalar=6.090909090909091, encoding=[I@4dd1d2bb]
Bucket indices => [8]
Bucket info value: 6.090909090909091
Minval: 5.931818181818184 Abs(BucketVal - Minval): 0.1590909090909065
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.090909090909091

Bucket info value: 6.090909090909091

Bucket info encoding: [I@47198524

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0](6,090909) => '{[1:8]=[6.090909090909091, 6.090909090909091]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.090909090909091, 6.090909090909091]

TopDown => [EncoderResult(value=6.090909090909091, scalar=6.090909090909091, encoding=[I@55e91e61]
Bucket indices => [8]
Bucket info value: 6.090909090909091
Minval: 6.0909090909090935 Abs(BucketVal - Minval): 2.6645352591003757E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.090909090909091

Bucket info value: 6.090909090909091

Bucket info encoding: [I@166e5a6d

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0](6,250000) => '{[1:8]=[6.090909090909091, 6.090909090909091]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.090909090909091, 6.090909090909091]

TopDown => [EncoderResult(value=6.090909090909091, scalar=6.090909090909091, encoding=[I@7d6c4079]
Bucket indices => [8]
Bucket info value: 6.090909090909091
Minval: 6.250000000000003 Abs(BucketVal - Minval): 0.15909090909091184
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.090909090909091

Bucket info value: 6.090909090909091

Bucket info encoding: [I@606b53a3

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0](6,409091) => '{[1:8]=[6.7272727272727275, 6.7272727272727275]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.7272727272727275, 6.7272727272727275]

TopDown => [EncoderResult(value=6.7272727272727275, scalar=6.7272727272727275, encoding=[I@37bda983]
Bucket indices => [9]
Bucket info value: 6.7272727272727275
Minval: 6.409090909090912 Abs(BucketVal - Minval): 0.3181818181818157
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.7272727272727275

Bucket info value: 6.7272727272727275

Bucket info encoding: [I@284d4885

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0](6,568182) => '{[1:8]=[6.7272727272727275, 6.7272727272727275]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.7272727272727275, 6.7272727272727275]

TopDown => [EncoderResult(value=6.7272727272727275, scalar=6.7272727272727275, encoding=[I@a69f9d]
Bucket indices => [9]
Bucket info value: 6.7272727272727275
Minval: 6.568181818181821 Abs(BucketVal - Minval): 0.1590909090909065
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.7272727272727275

Bucket info value: 6.7272727272727275

Bucket info encoding: [I@5a8dcfbb

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0](6,727273) => '{[1:8]=[6.7272727272727275, 6.7272727272727275]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.7272727272727275, 6.7272727272727275]

TopDown => [EncoderResult(value=6.7272727272727275, scalar=6.7272727272727275, encoding=[I@5597ca3]
Bucket indices => [9]
Bucket info value: 6.7272727272727275
Minval: 6.72727272727273 Abs(BucketVal - Minval): 2.6645352591003757E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.7272727272727275

Bucket info value: 6.7272727272727275

Bucket info encoding: [I@31b741e2

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0](6,886364) => '{[1:8]=[6.7272727272727275, 6.7272727272727275]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.7272727272727275, 6.7272727272727275]

TopDown => [EncoderResult(value=6.7272727272727275, scalar=6.7272727272727275, encoding=[I@28f05b0c]
Bucket indices => [9]
Bucket info value: 6.7272727272727275
Minval: 6.886363636363639 Abs(BucketVal - Minval): 0.15909090909091184
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 6.7272727272727275

Bucket info value: 6.7272727272727275

Bucket info encoding: [I@660296d5

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0](7,045455) => '{[1:8]=[7.363636363636363, 7.363636363636363]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [7.363636363636363, 7.363636363636363]

TopDown => [EncoderResult(value=7.363636363636363, scalar=7.363636363636363, encoding=[I@75d97e18]
Bucket indices => [10]
Bucket info value: 7.363636363636363
Minval: 7.0454545454545485 Abs(BucketVal - Minval): 0.3181818181818148
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 7.363636363636363

Bucket info value: 7.363636363636363

Bucket info encoding: [I@5fdb7394

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0](7,204545) => '{[1:8]=[7.363636363636363, 7.363636363636363]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [7.363636363636363, 7.363636363636363]

TopDown => [EncoderResult(value=7.363636363636363, scalar=7.363636363636363, encoding=[I@4b5798c2]
Bucket indices => [10]
Bucket info value: 7.363636363636363
Minval: 7.204545454545458 Abs(BucketVal - Minval): 0.15909090909090562
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 7.363636363636363

Bucket info value: 7.363636363636363

Bucket info encoding: [I@7540160e

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0](7,363636) => '{[1:8]=[7.363636363636363, 7.363636363636363]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [7.363636363636363, 7.363636363636363]

TopDown => [EncoderResult(value=7.363636363636363, scalar=7.363636363636363, encoding=[I@3348c987]
Bucket indices => [10]
Bucket info value: 7.363636363636363
Minval: 7.363636363636367 Abs(BucketVal - Minval): 3.552713678800501E-15
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 7.363636363636363

Bucket info value: 7.363636363636363

Bucket info encoding: [I@44aed6a4

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0](7,522727) => '{[1:8]=[7.363636363636363, 7.363636363636363]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [7.363636363636363, 7.363636363636363]

TopDown => [EncoderResult(value=7.363636363636363, scalar=7.363636363636363, encoding=[I@5ca22e19]
Bucket indices => [10]
Bucket info value: 7.363636363636363
Minval: 7.522727272727276 Abs(BucketVal - Minval): 0.15909090909091272
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 7.363636363636363

Bucket info value: 7.363636363636363

Bucket info encoding: [I@29d3d0fb

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1](7,681818) => '{[1:8]=[8.0, 8.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [8.0, 8.0]

TopDown => [EncoderResult(value=8.0, scalar=8.0, encoding=[I@70f85235]
Bucket indices => [11]
Bucket info value: 8.0
Minval: 7.681818181818185 Abs(BucketVal - Minval): 0.3181818181818148
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 8.0

Bucket info value: 8.0

Bucket info encoding: [I@3d6778d5

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1](7,840909) => '{[1:8]=[8.0, 8.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [8.0, 8.0]

TopDown => [EncoderResult(value=8.0, scalar=8.0, encoding=[I@4070ace9]
Bucket indices => [11]
Bucket info value: 8.0
Minval: 7.840909090909094 Abs(BucketVal - Minval): 0.15909090909090562
Resolution: 0.6363636363636364 Resolution/2: 0.3181818181818182

Bucket info scalar: 8.0

Bucket info value: 8.0

Bucket info encoding: [I@722b2728

Original encoding: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1]

Decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1](1,000000) => '{[1:8]=[6.090909090909091, 6.090909090909091, 8.0, 8.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.090909090909091, 6.090909090909091, 8.0, 8.0]

Decoding new array [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1](1,000000) => '{[1:8]=[6.7272727272727275, 6.7272727272727275, 8.0, 8.0]}':'[[1:8]]'

Field Key: [1:8]

Field Range Value: [6.7272727272727275, 6.7272727272727275, 8.0, 8.0]

Encoded missing data as: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.539 sec - in org.numenta.nupic.encoders.AdaptiveScalarEncoderTest
Running org.numenta.nupic.encoders.GeospatialCoordinateEncoderTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.043 sec - in org.numenta.nupic.encoders.GeospatialCoordinateEncoderTest
Running org.numenta.nupic.encoders.CoordinateEncoderTest
done
0.29532587998654214, 0.12030270383644848, 0.8069197554915457
Tests run: 16, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 4.259 sec - in org.numenta.nupic.encoders.CoordinateEncoderTest
Running org.numenta.nupic.encoders.LogEncoderTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.11 sec - in org.numenta.nupic.encoders.LogEncoderTest
Running org.numenta.nupic.encoders.PassThroughEncoderTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in org.numenta.nupic.encoders.PassThroughEncoderTest
Running org.numenta.nupic.encoders.SDRCategoryEncoderTest
Testing CategoryEncoder...
bucket index =>1bucket index =>2bucket index =>3bucket index =>4bucket index =>5bucket index =>6bucket index =>7bucket index =>8bucket index =>9bucket index =>10bucket index =>11bucket index =>12bucket index =>13bucket index =>14bucket index =>15bucket index =>16bucket index =>17bucket index =>18bucket index =>19bucket index =>20bucket index =>21bucket index =>22Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 sec - in org.numenta.nupic.encoders.SDRCategoryEncoderTest
Running org.numenta.nupic.encoders.RandomDistributedScalarEncoderTest
Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.33 sec - in org.numenta.nupic.encoders.RandomDistributedScalarEncoderTest
Running org.numenta.nupic.encoders.SparsePassThroughEncoderTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in org.numenta.nupic.encoders.SparsePassThroughEncoderTest
Running org.numenta.nupic.encoders.ScalarEncoderTest
Testing non-periodic encoder encoding resolution of 
decoding [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,000000)=>day of week:[1,00]
topDown => EncoderResult(value=1.0, scalar=1.0, encoding=[I@75805562
bucket index => 0
decoding [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0](1,250000)=>day of week:[1,00]
topDown => EncoderResult(value=1.0, scalar=1.0, encoding=[I@5341641d
bucket index => 0
decoding [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](1,500000)=>day of week:[2,00]
topDown => EncoderResult(value=2.0, scalar=2.0, encoding=[I@5bb99d1d
bucket index => 1
decoding [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](1,750000)=>day of week:[2,00]
topDown => EncoderResult(value=2.0, scalar=2.0, encoding=[I@5402612e
bucket index => 1
decoding [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](2,000000)=>day of week:[2,00]
topDown => EncoderResult(value=2.0, scalar=2.0, encoding=[I@17befef0
bucket index => 1
decoding [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0](2,250000)=>day of week:[2,00]
topDown => EncoderResult(value=2.0, scalar=2.0, encoding=[I@2f73f0c7
bucket index => 1
decoding [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](2,500000)=>day of week:[3,00]
topDown => EncoderResult(value=3.0, scalar=3.0, encoding=[I@70c31b17
bucket index => 2
decoding [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](2,750000)=>day of week:[3,00]
topDown => EncoderResult(value=3.0, scalar=3.0, encoding=[I@24018c8b
bucket index => 2
decoding [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,000000)=>day of week:[3,00]
topDown => EncoderResult(value=3.0, scalar=3.0, encoding=[I@64665781
bucket index => 2
decoding [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0](3,250000)=>day of week:[3,00]
topDown => EncoderResult(value=3.0, scalar=3.0, encoding=[I@6ebbc06
bucket index => 2
decoding [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0](3,500000)=>day of week:[4,00]
topDown => EncoderResult(value=4.0, scalar=4.0, encoding=[I@58f290bc
bucket index => 3
decoding [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0](3,750000)=>day of week:[4,00]
topDown => EncoderResult(value=4.0, scalar=4.0, encoding=[I@40c28b0d
bucket index => 3
decoding [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0](4,000000)=>day of week:[4,00]
topDown => EncoderResult(value=4.0, scalar=4.0, encoding=[I@54941dfd
bucket index => 3
decoding [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0](4,250000)=>day of week:[4,00]
topDown => EncoderResult(value=4.0, scalar=4.0, encoding=[I@13ee97af
bucket index => 3
decoding [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0](4,500000)=>day of week:[5,00]
topDown => EncoderResult(value=5.0, scalar=5.0, encoding=[I@5bde6148
bucket index => 4
decoding [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0](4,750000)=>day of week:[5,00]
topDown => EncoderResult(value=5.0, scalar=5.0, encoding=[I@10a0a1e
bucket index => 4
decoding [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0](5,000000)=>day of week:[5,00]
topDown => EncoderResult(value=5.0, scalar=5.0, encoding=[I@4152bd0f
bucket index => 4
decoding [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0](5,250000)=>day of week:[5,00]
topDown => EncoderResult(value=5.0, scalar=5.0, encoding=[I@62883f8a
bucket index => 4
decoding [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0](5,500000)=>day of week:[6,00]
topDown => EncoderResult(value=6.0, scalar=6.0, encoding=[I@3a709cc7
bucket index => 5
decoding [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0](5,750000)=>day of week:[6,00]
topDown => EncoderResult(value=6.0, scalar=6.0, encoding=[I@3e4f2300
bucket index => 5
decoding [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0](6,000000)=>day of week:[6,00]
topDown => EncoderResult(value=6.0, scalar=6.0, encoding=[I@16fc5622
bucket index => 5
decoding [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0](6,250000)=>day of week:[6,00]
topDown => EncoderResult(value=6.0, scalar=6.0, encoding=[I@7a62d697
bucket index => 5
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0](6,500000)=>day of week:[7,00]
topDown => EncoderResult(value=7.0, scalar=7.0, encoding=[I@62ab5e63
bucket index => 6
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0](6,750000)=>day of week:[7,00]
topDown => EncoderResult(value=7.0, scalar=7.0, encoding=[I@6bf0f70a
bucket index => 6
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0](7,000000)=>day of week:[7,00]
topDown => EncoderResult(value=7.0, scalar=7.0, encoding=[I@74830d73
bucket index => 6
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0](7,250000)=>day of week:[7,00]
topDown => EncoderResult(value=7.0, scalar=7.0, encoding=[I@2faf6e4a
bucket index => 6
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0](7,500000)=>day of week:[8,00]
topDown => EncoderResult(value=8.0, scalar=8.0, encoding=[I@25421809
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0](7,750000)=>day of week:[8,00]
topDown => EncoderResult(value=8.0, scalar=8.0, encoding=[I@4491eaeb
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0](8,000000)=>day of week:[8,00]
topDown => EncoderResult(value=8.0, scalar=8.0, encoding=[I@78e043e4
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0](8,250000)=>day of week:[8,00]
topDown => EncoderResult(value=8.0, scalar=8.0, encoding=[I@42e202d7
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0](8,500000)=>day of week:[9,00]
topDown => EncoderResult(value=9.0, scalar=9.0, encoding=[I@40738846
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0](8,750000)=>day of week:[9,00]
topDown => EncoderResult(value=9.0, scalar=9.0, encoding=[I@5891b7c5
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0](9,000000)=>day of week:[9,00]
topDown => EncoderResult(value=9.0, scalar=9.0, encoding=[I@192f5f39
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0](9,250000)=>day of week:[9,00]
topDown => EncoderResult(value=9.0, scalar=9.0, encoding=[I@3221588e
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1](9,500000)=>day of week:[10,00]
topDown => EncoderResult(value=10.0, scalar=10.0, encoding=[I@35ceec81
bucket index => 9
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1](9,750000)=>day of week:[10,00]
topDown => EncoderResult(value=10.0, scalar=10.0, encoding=[I@498e41a4
bucket index => 9
decodedToStr of [[10.0, 10.0]] => day of week:[10,00]
decodedToStr of [[10.0, 10.0]] => day of week:[10,00]

Testing non-periodic encoder decoding resolution of 0,000083...
decoding (0,001000)=> scalar:[0,00]
topdown => [EncoderResult(value=0.001, scalar=0.001, encoding=[I@21c34bf8]
decoding (0,001021)=> scalar:[0,00]
topdown => [EncoderResult(value=0.001, scalar=0.001, encoding=[I@23d0944b]
decoding (0,001042)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0010833333333333333, scalar=0.0010833333333333333, encoding=[I@49d543a9]
decoding (0,001063)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0010833333333333333, scalar=0.0010833333333333333, encoding=[I@4ac19bc6]
decoding (0,001083)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0010833333333333333, scalar=0.0010833333333333333, encoding=[I@492c9892]
decoding (0,001104)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0010833333333333333, scalar=0.0010833333333333333, encoding=[I@436a563f]
decoding (0,001125)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0011666666666666668, scalar=0.0011666666666666668, encoding=[I@7ecb9e17]
decoding (0,001146)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0011666666666666668, scalar=0.0011666666666666668, encoding=[I@75bf9e67]
decoding (0,001167)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0011666666666666668, scalar=0.0011666666666666668, encoding=[I@772f3a3f]
decoding (0,001188)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0011666666666666668, scalar=0.0011666666666666668, encoding=[I@356fa0d1]
decoding (0,001208)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00125, scalar=0.00125, encoding=[I@5f20b6fe]
decoding (0,001229)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00125, scalar=0.00125, encoding=[I@79295932]
decoding (0,001250)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00125, scalar=0.00125, encoding=[I@76e00bdb]
decoding (0,001271)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00125, scalar=0.00125, encoding=[I@343d1d25]
decoding (0,001292)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0013333333333333333, scalar=0.0013333333333333333, encoding=[I@e5c5e6]
decoding (0,001313)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0013333333333333333, scalar=0.0013333333333333333, encoding=[I@2a54c92e]
decoding (0,001333)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0013333333333333333, scalar=0.0013333333333333333, encoding=[I@1fb71788]
decoding (0,001354)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0013333333333333333, scalar=0.0013333333333333333, encoding=[I@4dac40b]
decoding (0,001375)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0014166666666666668, scalar=0.0014166666666666668, encoding=[I@b788dc2]
decoding (0,001396)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0014166666666666668, scalar=0.0014166666666666668, encoding=[I@a44effb]
decoding (0,001417)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0014166666666666668, scalar=0.0014166666666666668, encoding=[I@4f676900]
decoding (0,001438)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0014166666666666668, scalar=0.0014166666666666668, encoding=[I@5eb2972f]
decoding (0,001458)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015, scalar=0.0015, encoding=[I@5d32c1c7]
decoding (0,001479)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015, scalar=0.0015, encoding=[I@40ac0a56]
decoding (0,001500)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015, scalar=0.0015, encoding=[I@6ec3a4c2]
decoding (0,001521)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015, scalar=0.0015, encoding=[I@2b6b487c]
decoding (0,001542)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015833333333333333, scalar=0.0015833333333333333, encoding=[I@5e6522a6]
decoding (0,001563)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015833333333333333, scalar=0.0015833333333333333, encoding=[I@c4551c6]
decoding (0,001583)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015833333333333333, scalar=0.0015833333333333333, encoding=[I@4db46344]
decoding (0,001604)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0015833333333333333, scalar=0.0015833333333333333, encoding=[I@702b656a]
decoding (0,001625)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0016666666666666666, scalar=0.0016666666666666666, encoding=[I@3ccfac29]
decoding (0,001646)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0016666666666666666, scalar=0.0016666666666666666, encoding=[I@77ea960f]
decoding (0,001667)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0016666666666666666, scalar=0.0016666666666666666, encoding=[I@1ef93e01]
decoding (0,001688)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0016666666666666666, scalar=0.0016666666666666666, encoding=[I@6cd66f6a]
decoding (0,001708)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00175, scalar=0.00175, encoding=[I@578b2dec]
decoding (0,001729)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00175, scalar=0.00175, encoding=[I@39f4a7c4]
decoding (0,001750)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00175, scalar=0.00175, encoding=[I@1ff542a3]
decoding (0,001771)=> scalar:[0,00]
topdown => [EncoderResult(value=0.00175, scalar=0.00175, encoding=[I@54387873]
decoding (0,001792)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0018333333333333333, scalar=0.0018333333333333333, encoding=[I@fd5689d]
decoding (0,001813)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0018333333333333333, scalar=0.0018333333333333333, encoding=[I@218f2f51]
decoding (0,001833)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0018333333333333333, scalar=0.0018333333333333333, encoding=[I@39afe59f]
decoding (0,001854)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0018333333333333333, scalar=0.0018333333333333333, encoding=[I@4ede035e]
decoding (0,001875)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0019166666666666668, scalar=0.0019166666666666668, encoding=[I@4272d8cf]
decoding (0,001896)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0019166666666666668, scalar=0.0019166666666666668, encoding=[I@70ecf57b]
decoding (0,001917)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0019166666666666668, scalar=0.0019166666666666668, encoding=[I@1a336906]
decoding (0,001938)=> scalar:[0,00]
topdown => [EncoderResult(value=0.0019166666666666668, scalar=0.0019166666666666668, encoding=[I@75d539b9]
decoding (0,001958)=> scalar:[0,00]
topdown => [EncoderResult(value=0.002, scalar=0.002, encoding=[I@210c1b9d]
decoding (0,001979)=> scalar:[0,00]
topdown => [EncoderResult(value=0.002, scalar=0.002, encoding=[I@3578a45b]

Testing non-periodic encoder decoding resolution of 83333333,250000...
decoding (1,000000)=> scalar:[1,00]
topdown => [EncoderResult(value=1.0, scalar=1.0, encoding=[I@65e05005]
decoding (20833334,312500)=> scalar:[1,00]
topdown => [EncoderResult(value=1.0, scalar=1.0, encoding=[I@1efcba00]
decoding (41666667,625000)=> scalar:[83333334,25]
topdown => [EncoderResult(value=8.333333425E7, scalar=8.333333425E7, encoding=[I@569a26ab]
decoding (62500000,937500)=> scalar:[83333334,25]
topdown => [EncoderResult(value=8.333333425E7, scalar=8.333333425E7, encoding=[I@77ce8bc5]
decoding (83333334,250000)=> scalar:[83333334,25]
topdown => [EncoderResult(value=8.333333425E7, scalar=8.333333425E7, encoding=[I@28e48b65]
decoding (104166667,562500)=> scalar:[83333334,25]
topdown => [EncoderResult(value=8.333333425E7, scalar=8.333333425E7, encoding=[I@6f4d2294]
decoding (125000000,875000)=> scalar:[166666667,50]
topdown => [EncoderResult(value=1.666666675E8, scalar=1.666666675E8, encoding=[I@2e0516a3]
decoding (145833334,187500)=> scalar:[166666667,50]
topdown => [EncoderResult(value=1.666666675E8, scalar=1.666666675E8, encoding=[I@347b370c]
decoding (166666667,500000)=> scalar:[166666667,50]
topdown => [EncoderResult(value=1.666666675E8, scalar=1.666666675E8, encoding=[I@20184ade]
decoding (187500000,812500)=> scalar:[166666667,50]
topdown => [EncoderResult(value=1.666666675E8, scalar=1.666666675E8, encoding=[I@5855b0ed]
decoding (208333334,125000)=> scalar:[250000000,75]
topdown => [EncoderResult(value=2.5000000075E8, scalar=2.5000000075E8, encoding=[I@6b0325d0]
decoding (229166667,437500)=> scalar:[250000000,75]
topdown => [EncoderResult(value=2.5000000075E8, scalar=2.5000000075E8, encoding=[I@72a33316]
decoding (250000000,750000)=> scalar:[250000000,75]
topdown => [EncoderResult(value=2.5000000075E8, scalar=2.5000000075E8, encoding=[I@77204651]
decoding (270833334,062500)=> scalar:[250000000,75]
topdown => [EncoderResult(value=2.5000000075E8, scalar=2.5000000075E8, encoding=[I@3a9c11fb]
decoding (291666667,375000)=> scalar:[333333334,00]
topdown => [EncoderResult(value=3.33333334E8, scalar=3.33333334E8, encoding=[I@340b4f07]
decoding (312500000,687500)=> scalar:[333333334,00]
topdown => [EncoderResult(value=3.33333334E8, scalar=3.33333334E8, encoding=[I@5a205ee5]
decoding (333333334,000000)=> scalar:[333333334,00]
topdown => [EncoderResult(value=3.33333334E8, scalar=3.33333334E8, encoding=[I@11295cb1]
decoding (354166667,312500)=> scalar:[333333334,00]
topdown => [EncoderResult(value=3.33333334E8, scalar=3.33333334E8, encoding=[I@5256fbc]
decoding (375000000,625000)=> scalar:[416666667,25]
topdown => [EncoderResult(value=4.1666666725E8, scalar=4.1666666725E8, encoding=[I@3620eab]
decoding (395833333,937500)=> scalar:[416666667,25]
topdown => [EncoderResult(value=4.1666666725E8, scalar=4.1666666725E8, encoding=[I@2619cb76]
decoding (416666667,250000)=> scalar:[416666667,25]
topdown => [EncoderResult(value=4.1666666725E8, scalar=4.1666666725E8, encoding=[I@457692cb]
decoding (437500000,562500)=> scalar:[416666667,25]
topdown => [EncoderResult(value=4.1666666725E8, scalar=4.1666666725E8, encoding=[I@5d297d4d]
decoding (458333333,875000)=> scalar:[500000000,50]
topdown => [EncoderResult(value=5.000000005E8, scalar=5.000000005E8, encoding=[I@6cc56b32]
decoding (479166667,187500)=> scalar:[500000000,50]
topdown => [EncoderResult(value=5.000000005E8, scalar=5.000000005E8, encoding=[I@552bee2f]
decoding (500000000,500000)=> scalar:[500000000,50]
topdown => [EncoderResult(value=5.000000005E8, scalar=5.000000005E8, encoding=[I@2d0f548a]
decoding (520833333,812500)=> scalar:[500000000,50]
topdown => [EncoderResult(value=5.000000005E8, scalar=5.000000005E8, encoding=[I@15130002]
decoding (541666667,125000)=> scalar:[583333333,75]
topdown => [EncoderResult(value=5.8333333375E8, scalar=5.8333333375E8, encoding=[I@900649e]
decoding (562500000,437500)=> scalar:[583333333,75]
topdown => [EncoderResult(value=5.8333333375E8, scalar=5.8333333375E8, encoding=[I@526893f]
decoding (583333333,750000)=> scalar:[583333333,75]
topdown => [EncoderResult(value=5.8333333375E8, scalar=5.8333333375E8, encoding=[I@37caecda]
decoding (604166667,062500)=> scalar:[583333333,75]
topdown => [EncoderResult(value=5.8333333375E8, scalar=5.8333333375E8, encoding=[I@4ab9d160]
decoding (625000000,375000)=> scalar:[666666667,00]
topdown => [EncoderResult(value=6.66666667E8, scalar=6.66666667E8, encoding=[I@35554635]
decoding (645833333,687500)=> scalar:[666666667,00]
topdown => [EncoderResult(value=6.66666667E8, scalar=6.66666667E8, encoding=[I@74431832]
decoding (666666667,000000)=> scalar:[666666667,00]
topdown => [EncoderResult(value=6.66666667E8, scalar=6.66666667E8, encoding=[I@70592729]
decoding (687500000,312500)=> scalar:[666666667,00]
topdown => [EncoderResult(value=6.66666667E8, scalar=6.66666667E8, encoding=[I@43b172e3]
decoding (708333333,625000)=> scalar:[750000000,25]
topdown => [EncoderResult(value=7.5000000025E8, scalar=7.5000000025E8, encoding=[I@304068]
decoding (729166666,937500)=> scalar:[750000000,25]
topdown => [EncoderResult(value=7.5000000025E8, scalar=7.5000000025E8, encoding=[I@1cb849b2]
decoding (750000000,250000)=> scalar:[750000000,25]
topdown => [EncoderResult(value=7.5000000025E8, scalar=7.5000000025E8, encoding=[I@6dd38df2]
decoding (770833333,562500)=> scalar:[750000000,25]
topdown => [EncoderResult(value=7.5000000025E8, scalar=7.5000000025E8, encoding=[I@57b711b6]
decoding (791666666,875000)=> scalar:[833333333,50]
topdown => [EncoderResult(value=8.333333335E8, scalar=8.333333335E8, encoding=[I@5c79c5ec]
decoding (812500000,187500)=> scalar:[833333333,50]
topdown => [EncoderResult(value=8.333333335E8, scalar=8.333333335E8, encoding=[I@5bbf744b]
decoding (833333333,500000)=> scalar:[833333333,50]
topdown => [EncoderResult(value=8.333333335E8, scalar=8.333333335E8, encoding=[I@474ce6b8]
decoding (854166666,812500)=> scalar:[833333333,50]
topdown => [EncoderResult(value=8.333333335E8, scalar=8.333333335E8, encoding=[I@4b61e97]
decoding (875000000,125000)=> scalar:[916666666,75]
topdown => [EncoderResult(value=9.1666666675E8, scalar=9.1666666675E8, encoding=[I@31082efa]
decoding (895833333,437500)=> scalar:[916666666,75]
topdown => [EncoderResult(value=9.1666666675E8, scalar=9.1666666675E8, encoding=[I@7853363c]
decoding (916666666,750000)=> scalar:[916666666,75]
topdown => [EncoderResult(value=9.1666666675E8, scalar=9.1666666675E8, encoding=[I@120d6cbf]
decoding (937500000,062500)=> scalar:[916666666,75]
topdown => [EncoderResult(value=9.1666666675E8, scalar=9.1666666675E8, encoding=[I@1115be8c]
decoding (958333333,375000)=> scalar:[1000000000,00]
topdown => [EncoderResult(value=1.0E9, scalar=1.0E9, encoding=[I@1dfcf85a]
decoding (979166666,687500)=> scalar:[1000000000,00]
topdown => [EncoderResult(value=1.0E9, scalar=1.0E9, encoding=[I@6550ce46]
decoding [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] (1,000000)=> scalar:[1,00]
topdown => EncoderResult(value=1.25, scalar=1.25, encoding=[I@54997f67
bucket index => 0
decoding [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] (1,125000)=> scalar:[1,00]
topdown => EncoderResult(value=1.25, scalar=1.25, encoding=[I@1a67f8b4
bucket index => 0
decoding [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] (1,250000)=> scalar:[1,00]
topdown => EncoderResult(value=1.25, scalar=1.25, encoding=[I@76fc5687
bucket index => 0
decoding [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1] (1,375000)=> scalar:[1,00]
topdown => EncoderResult(value=1.25, scalar=1.25, encoding=[I@44a14de0
bucket index => 0
decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (1,500000)=> scalar:[1,50]
topdown => EncoderResult(value=1.75, scalar=1.75, encoding=[I@d0a2c82
bucket index => 1
decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (1,625000)=> scalar:[1,50]
topdown => EncoderResult(value=1.75, scalar=1.75, encoding=[I@4e52d2f2
bucket index => 1
decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (1,750000)=> scalar:[1,50]
topdown => EncoderResult(value=1.75, scalar=1.75, encoding=[I@7ec508e6
bucket index => 1
decoding [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (1,875000)=> scalar:[1,50]
topdown => EncoderResult(value=1.75, scalar=1.75, encoding=[I@75f32817
bucket index => 1
decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,000000)=> scalar:[2,00]
topdown => EncoderResult(value=2.25, scalar=2.25, encoding=[I@61d09475
bucket index => 2
decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,125000)=> scalar:[2,00]
topdown => EncoderResult(value=2.25, scalar=2.25, encoding=[I@1a66be41
bucket index => 2
decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,250000)=> scalar:[2,00]
topdown => EncoderResult(value=2.25, scalar=2.25, encoding=[I@3f64d943
bucket index => 2
decoding [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,375000)=> scalar:[2,00]
topdown => EncoderResult(value=2.25, scalar=2.25, encoding=[I@6d2db15b
bucket index => 2
decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,500000)=> scalar:[2,50]
topdown => EncoderResult(value=2.75, scalar=2.75, encoding=[I@59b98ad1
bucket index => 3
decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,625000)=> scalar:[2,50]
topdown => EncoderResult(value=2.75, scalar=2.75, encoding=[I@2248d140
bucket index => 3
decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,750000)=> scalar:[2,50]
topdown => EncoderResult(value=2.75, scalar=2.75, encoding=[I@ce19c86
bucket index => 3
decoding [0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0] (2,875000)=> scalar:[2,50]
topdown => EncoderResult(value=2.75, scalar=2.75, encoding=[I@1b317e7d
bucket index => 3
decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0] (3,000000)=> scalar:[3,00]
topdown => EncoderResult(value=3.25, scalar=3.25, encoding=[I@295d54d6
bucket index => 4
decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0] (3,125000)=> scalar:[3,00]
topdown => EncoderResult(value=3.25, scalar=3.25, encoding=[I@56b66a26
bucket index => 4
decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0] (3,250000)=> scalar:[3,00]
topdown => EncoderResult(value=3.25, scalar=3.25, encoding=[I@6eaf030c
bucket index => 4
decoding [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0] (3,375000)=> scalar:[3,00]
topdown => EncoderResult(value=3.25, scalar=3.25, encoding=[I@7a3a49e5
bucket index => 4
decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0] (3,500000)=> scalar:[3,50]
topdown => EncoderResult(value=3.75, scalar=3.75, encoding=[I@3ea9a091
bucket index => 5
decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0] (3,625000)=> scalar:[3,50]
topdown => EncoderResult(value=3.75, scalar=3.75, encoding=[I@45c408a4
bucket index => 5
decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0] (3,750000)=> scalar:[3,50]
topdown => EncoderResult(value=3.75, scalar=3.75, encoding=[I@69d7bc1a
bucket index => 5
decoding [0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0] (3,875000)=> scalar:[3,50]
topdown => EncoderResult(value=3.75, scalar=3.75, encoding=[I@75ee6f89
bucket index => 5
decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0] (4,000000)=> scalar:[4,00]
topdown => EncoderResult(value=4.25, scalar=4.25, encoding=[I@6f4adaab
bucket index => 6
decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0] (4,125000)=> scalar:[4,00]
topdown => EncoderResult(value=4.25, scalar=4.25, encoding=[I@6d6f6ca9
bucket index => 6
decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0] (4,250000)=> scalar:[4,00]
topdown => EncoderResult(value=4.25, scalar=4.25, encoding=[I@236b4a44
bucket index => 6
decoding [0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0] (4,375000)=> scalar:[4,00]
topdown => EncoderResult(value=4.25, scalar=4.25, encoding=[I@35af52dc
bucket index => 6
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0] (4,500000)=> scalar:[4,50]
topdown => EncoderResult(value=4.75, scalar=4.75, encoding=[I@6aaa678d
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0] (4,625000)=> scalar:[4,50]
topdown => EncoderResult(value=4.75, scalar=4.75, encoding=[I@4e10a320
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0] (4,750000)=> scalar:[4,50]
topdown => EncoderResult(value=4.75, scalar=4.75, encoding=[I@4c13ca07
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0] (4,875000)=> scalar:[4,50]
topdown => EncoderResult(value=4.75, scalar=4.75, encoding=[I@5d68954d
bucket index => 7
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0] (5,000000)=> scalar:[5,00]
topdown => EncoderResult(value=5.25, scalar=5.25, encoding=[I@5534e6f1
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0] (5,125000)=> scalar:[5,00]
topdown => EncoderResult(value=5.25, scalar=5.25, encoding=[I@6ad112de
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0] (5,250000)=> scalar:[5,00]
topdown => EncoderResult(value=5.25, scalar=5.25, encoding=[I@66e12c3b
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0] (5,375000)=> scalar:[5,00]
topdown => EncoderResult(value=5.25, scalar=5.25, encoding=[I@22604c7e
bucket index => 8
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0] (5,500000)=> scalar:[5,50]
topdown => EncoderResult(value=5.75, scalar=5.75, encoding=[I@ab2009f
bucket index => 9
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0] (5,625000)=> scalar:[5,50]
topdown => EncoderResult(value=5.75, scalar=5.75, encoding=[I@5b5b9521
bucket index => 9
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0] (5,750000)=> scalar:[5,50]
topdown => EncoderResult(value=5.75, scalar=5.75, encoding=[I@14b5325f
bucket index => 9
decoding [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0] (5,875000)=> scalar:[5,50]
topdown => EncoderResult(value=5.75, scalar=5.75, encoding=[I@6b6fd0
bucket index => 9
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] (6,000000)=> scalar:[6,00]
topdown => EncoderResult(value=6.25, scalar=6.25, encoding=[I@8aa5ab4
bucket index => 10
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] (6,125000)=> scalar:[6,00]
topdown => EncoderResult(value=6.25, scalar=6.25, encoding=[I@1450ffa3
bucket index => 10
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] (6,250000)=> scalar:[6,00]
topdown => EncoderResult(value=6.25, scalar=6.25, encoding=[I@6adcf059
bucket index => 10
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0] (6,375000)=> scalar:[6,00]
topdown => EncoderResult(value=6.25, scalar=6.25, encoding=[I@7a7f9d45
bucket index => 10
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0] (6,500000)=> scalar:[6,50]
topdown => EncoderResult(value=6.75, scalar=6.75, encoding=[I@949d347
bucket index => 11
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0] (6,625000)=> scalar:[6,50]
topdown => EncoderResult(value=6.75, scalar=6.75, encoding=[I@45ad3cd8
bucket index => 11
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0] (6,750000)=> scalar:[6,50]
topdown => EncoderResult(value=6.75, scalar=6.75, encoding=[I@6bdedbbd
bucket index => 11
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0] (6,875000)=> scalar:[6,50]
topdown => EncoderResult(value=6.75, scalar=6.75, encoding=[I@2d230cff
bucket index => 11
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1] (7,000000)=> scalar:[7,00]
topdown => EncoderResult(value=7.25, scalar=7.25, encoding=[I@54556723
bucket index => 12
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1] (7,125000)=> scalar:[7,00]
topdown => EncoderResult(value=7.25, scalar=7.25, encoding=[I@3bc891f2
bucket index => 12
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1] (7,250000)=> scalar:[7,00]
topdown => EncoderResult(value=7.25, scalar=7.25, encoding=[I@4a0c3aa8
bucket index => 12
decoding [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1] (7,375000)=> scalar:[7,00]
topdown => EncoderResult(value=7.25, scalar=7.25, encoding=[I@26a33cf
bucket index => 12
decoding [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1] (7,500000)=> scalar:[7,50]
topdown => EncoderResult(value=7.75, scalar=7.75, encoding=[I@5bf523e3
bucket index => 13
decoding [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1] (7,625000)=> scalar:[7,50]
topdown => EncoderResult(value=7.75, scalar=7.75, encoding=[I@4bff28e7
bucket index => 13
decoding [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1] (7,750000)=> scalar:[7,50]
topdown => EncoderResult(value=7.75, scalar=7.75, encoding=[I@6c1f15df
bucket index => 13
decoding [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1] (7,875000)=> scalar:[7,50]
topdown => EncoderResult(value=7.75, scalar=7.75, encoding=[I@73ddb7ef
bucket index => 13

Testing periodic encoder decoding, resolution of 0.5

Encoded missing data as: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.153 sec - in org.numenta.nupic.encoders.ScalarEncoderTest
Running org.numenta.nupic.encoders.MultiEncoderAssemblerTest
map = {testfield={maxVal=8.0, fieldName=testfield, minVal=0.0, forced=true, w=3, radius=0.0, resolution=0.0, fieldType=string, n=0, encoderType=CategoryEncoder}}
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.016 sec - in org.numenta.nupic.encoders.MultiEncoderAssemblerTest
Running org.numenta.nupic.encoders.MultiEncoderTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in org.numenta.nupic.encoders.MultiEncoderTest
Running org.numenta.nupic.encoders.CategoryEncoderTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec - in org.numenta.nupic.encoders.CategoryEncoderTest
Running org.numenta.nupic.network.PersistenceAPITest
expected(HTMSensor): org.numenta.nupic.network.sensor.HTMSensor@42225ab actual: (HTMSensor): org.numenta.nupic.network.sensor.HTMSensor@42225ab
[10, 11, 43, 47, 49, 50, 54, 102, 105, 110, 111]
[10, 11, 43, 47, 49, 50, 54, 102, 105, 110, 111]
expected(Connections): org.numenta.nupic.model.Connections@d8b02274 actual: (Connections): org.numenta.nupic.model.Connections@4f451fd8
expected(Network): org.numenta.nupic.network.Network@65e4ecda actual: (Network): org.numenta.nupic.network.Network@65e4ecda
------------ SpatialPooler Parameters ------------------
numInputs                  = 1
numColumns                 = 20
cellsPerColumn             = 6
columnDimensions           = [20]
numActiveColumnsPerInhArea = 5.0
potentialPct               = 0.5
potentialRadius            = 12
globalInhibition           = false
localAreaDensity           = -1.0
inhibitionRadius           = 0
stimulusThreshold          = 1.0
synPermActiveInc           = 0.1
synPermInactiveDec         = 0.01
synPermConnected           = 0.1
minPctOverlapDutyCycle     = 0.1
minPctActiveDutyCycle      = 0.1
dutyCyclePeriod            = 10
maxBoost                   = 10.0
version                    = 1.0

------------ TemporalMemory Parameters ------------------
activationThreshold        = 4
learningRadius             = 2048
minThreshold               = 5
maxNewSynapseCount         = 6
maxSynapsesPerSegment      = 255
maxSegmentsPerCell         = 255
initialPermanence          = 0.2
connectedPermanence        = 0.8
permanenceIncrement        = 0.05
permanenceDecrement        = 0.05
predictedSegmentDecrement  = 0.0
expected(Column): 0 actual: (Column): 0
expected(Cell): 0 actual: (Cell): 0
expected(Cell): 1 actual: (Cell): 1
expected(Cell): 2 actual: (Cell): 2
expected(Cell): 3 actual: (Cell): 3
expected(Cell): 4 actual: (Cell): 4
expected(Cell): 5 actual: (Cell): 5
expected(Column): 1 actual: (Column): 1
expected(Cell): 6 actual: (Cell): 6
expected(Cell): 7 actual: (Cell): 7
expected(Cell): 8 actual: (Cell): 8
expected(Cell): 9 actual: (Cell): 9
expected(Cell): 10 actual: (Cell): 10
expected(Cell): 11 actual: (Cell): 11
expected(Column): 2 actual: (Column): 2
expected(Cell): 12 actual: (Cell): 12
expected(Cell): 13 actual: (Cell): 13
expected(Cell): 14 actual: (Cell): 14
expected(Cell): 15 actual: (Cell): 15
expected(Cell): 16 actual: (Cell): 16
expected(Cell): 17 actual: (Cell): 17
expected(Column): 3 actual: (Column): 3
expected(Cell): 18 actual: (Cell): 18
expected(Cell): 19 actual: (Cell): 19
expected(Cell): 20 actual: (Cell): 20
expected(Cell): 21 actual: (Cell): 21
expected(Cell): 22 actual: (Cell): 22
expected(Cell): 23 actual: (Cell): 23
expected(Column): 4 actual: (Column): 4
expected(Cell): 24 actual: (Cell): 24
expected(Cell): 25 actual: (Cell): 25
expected(Cell): 26 actual: (Cell): 26
expected(Cell): 27 actual: (Cell): 27
expected(Cell): 28 actual: (Cell): 28
expected(Cell): 29 actual: (Cell): 29
expected(Column): 5 actual: (Column): 5
expected(Cell): 30 actual: (Cell): 30
expected(Cell): 31 actual: (Cell): 31
expected(Cell): 32 actual: (Cell): 32
expected(Cell): 33 actual: (Cell): 33
expected(Cell): 34 actual: (Cell): 34
expected(Cell): 35 actual: (Cell): 35
expected(Column): 6 actual: (Column): 6
expected(Cell): 36 actual: (Cell): 36
expected(Cell): 37 actual: (Cell): 37
expected(Cell): 38 actual: (Cell): 38
expected(Cell): 39 actual: (Cell): 39
expected(Cell): 40 actual: (Cell): 40
expected(Cell): 41 actual: (Cell): 41
expected(Column): 7 actual: (Column): 7
expected(Cell): 42 actual: (Cell): 42
expected(Cell): 43 actual: (Cell): 43
expected(Cell): 44 actual: (Cell): 44
expected(Cell): 45 actual: (Cell): 45
expected(Cell): 46 actual: (Cell): 46
expected(Cell): 47 actual: (Cell): 47
expected(Column): 8 actual: (Column): 8
expected(Cell): 48 actual: (Cell): 48
expected(Cell): 49 actual: (Cell): 49
expected(Cell): 50 actual: (Cell): 50
expected(Cell): 51 actual: (Cell): 51
expected(Cell): 52 actual: (Cell): 52
expected(Cell): 53 actual: (Cell): 53
expected(Column): 9 actual: (Column): 9
expected(Cell): 54 actual: (Cell): 54
expected(Cell): 55 actual: (Cell): 55
expected(Cell): 56 actual: (Cell): 56
expected(Cell): 57 actual: (Cell): 57
expected(Cell): 58 actual: (Cell): 58
expected(Cell): 59 actual: (Cell): 59
expected(Column): 10 actual: (Column): 10
expected(Cell): 60 actual: (Cell): 60
expected(Cell): 61 actual: (Cell): 61
expected(Cell): 62 actual: (Cell): 62
expected(Cell): 63 actual: (Cell): 63
expected(Cell): 64 actual: (Cell): 64
expected(Cell): 65 actual: (Cell): 65
expected(Column): 11 actual: (Column): 11
expected(Cell): 66 actual: (Cell): 66
expected(Cell): 67 actual: (Cell): 67
expected(Cell): 68 actual: (Cell): 68
expected(Cell): 69 actual: (Cell): 69
expected(Cell): 70 actual: (Cell): 70
expected(Cell): 71 actual: (Cell): 71
expected(Column): 12 actual: (Column): 12
expected(Cell): 72 actual: (Cell): 72
expected(Cell): 73 actual: (Cell): 73
expected(Cell): 74 actual: (Cell): 74
expected(Cell): 75 actual: (Cell): 75
expected(Cell): 76 actual: (Cell): 76
expected(Cell): 77 actual: (Cell): 77
expected(Column): 13 actual: (Column): 13
expected(Cell): 78 actual: (Cell): 78
expected(Cell): 79 actual: (Cell): 79
expected(Cell): 80 actual: (Cell): 80
expected(Cell): 81 actual: (Cell): 81
expected(Cell): 82 actual: (Cell): 82
expected(Cell): 83 actual: (Cell): 83
expected(Column): 14 actual: (Column): 14
expected(Cell): 84 actual: (Cell): 84
expected(Cell): 85 actual: (Cell): 85
expected(Cell): 86 actual: (Cell): 86
expected(Cell): 87 actual: (Cell): 87
expected(Cell): 88 actual: (Cell): 88
expected(Cell): 89 actual: (Cell): 89
expected(Column): 15 actual: (Column): 15
expected(Cell): 90 actual: (Cell): 90
expected(Cell): 91 actual: (Cell): 91
expected(Cell): 92 actual: (Cell): 92
expected(Cell): 93 actual: (Cell): 93
expected(Cell): 94 actual: (Cell): 94
expected(Cell): 95 actual: (Cell): 95
expected(Column): 16 actual: (Column): 16
expected(Cell): 96 actual: (Cell): 96
expected(Cell): 97 actual: (Cell): 97
expected(Cell): 98 actual: (Cell): 98
expected(Cell): 99 actual: (Cell): 99
expected(Cell): 100 actual: (Cell): 100
expected(Cell): 101 actual: (Cell): 101
expected(Column): 17 actual: (Column): 17
expected(Cell): 102 actual: (Cell): 102
expected(Cell): 103 actual: (Cell): 103
expected(Cell): 104 actual: (Cell): 104
expected(Cell): 105 actual: (Cell): 105
expected(Cell): 106 actual: (Cell): 106
expected(Cell): 107 actual: (Cell): 107
expected(Column): 18 actual: (Column): 18
expected(Cell): 108 actual: (Cell): 108
expected(Cell): 109 actual: (Cell): 109
expected(Cell): 110 actual: (Cell): 110
expected(Cell): 111 actual: (Cell): 111
expected(Cell): 112 actual: (Cell): 112
expected(Cell): 113 actual: (Cell): 113
expected(Column): 19 actual: (Column): 19
expected(Cell): 114 actual: (Cell): 114
expected(Cell): 115 actual: (Cell): 115
expected(Cell): 116 actual: (Cell): 116
expected(Cell): 117 actual: (Cell): 117
expected(Cell): 118 actual: (Cell): 118
expected(Cell): 119 actual: (Cell): 119
expected(Column): 0 actual: (Column): 0
expected(Cell): 0 actual: (Cell): 0
expected(Cell): 1 actual: (Cell): 1
expected(Cell): 2 actual: (Cell): 2
expected(Cell): 3 actual: (Cell): 3
expected(Cell): 4 actual: (Cell): 4
expected(Cell): 5 actual: (Cell): 5
expected(Column): 1 actual: (Column): 1
expected(Cell): 6 actual: (Cell): 6
expected(Cell): 7 actual: (Cell): 7
expected(Cell): 8 actual: (Cell): 8
expected(Cell): 9 actual: (Cell): 9
expected(Cell): 10 actual: (Cell): 10
expected(Cell): 11 actual: (Cell): 11
expected(Column): 2 actual: (Column): 2
expected(Cell): 12 actual: (Cell): 12
expected(Cell): 13 actual: (Cell): 13
expected(Cell): 14 actual: (Cell): 14
expected(Cell): 15 actual: (Cell): 15
expected(Cell): 16 actual: (Cell): 16
expected(Cell): 17 actual: (Cell): 17
expected(Column): 3 actual: (Column): 3
expected(Cell): 18 actual: (Cell): 18
expected(Cell): 19 actual: (Cell): 19
expected(Cell): 20 actual: (Cell): 20
expected(Cell): 21 actual: (Cell): 21
expected(Cell): 22 actual: (Cell): 22
expected(Cell): 23 actual: (Cell): 23
expected(Column): 4 actual: (Column): 4
expected(Cell): 24 actual: (Cell): 24
expected(Cell): 25 actual: (Cell): 25
expected(Cell): 26 actual: (Cell): 26
expected(Cell): 27 actual: (Cell): 27
expected(Cell): 28 actual: (Cell): 28
expected(Cell): 29 actual: (Cell): 29
expected(Column): 5 actual: (Column): 5
expected(Cell): 30 actual: (Cell): 30
expected(Cell): 31 actual: (Cell): 31
expected(Cell): 32 actual: (Cell): 32
expected(Cell): 33 actual: (Cell): 33
expected(Cell): 34 actual: (Cell): 34
expected(Cell): 35 actual: (Cell): 35
expected(Column): 6 actual: (Column): 6
expected(Cell): 36 actual: (Cell): 36
expected(Cell): 37 actual: (Cell): 37
expected(Cell): 38 actual: (Cell): 38
expected(Cell): 39 actual: (Cell): 39
expected(Cell): 40 actual: (Cell): 40
expected(Cell): 41 actual: (Cell): 41
expected(Column): 7 actual: (Column): 7
expected(Cell): 42 actual: (Cell): 42
expected(Cell): 43 actual: (Cell): 43
expected(Cell): 44 actual: (Cell): 44
expected(Cell): 45 actual: (Cell): 45
expected(Cell): 46 actual: (Cell): 46
expected(Cell): 47 actual: (Cell): 47
expected(Column): 8 actual: (Column): 8
expected(Cell): 48 actual: (Cell): 48
expected(Cell): 49 actual: (Cell): 49
expected(Cell): 50 actual: (Cell): 50
expected(Cell): 51 actual: (Cell): 51
expected(Cell): 52 actual: (Cell): 52
expected(Cell): 53 actual: (Cell): 53
expected(Column): 9 actual: (Column): 9
expected(Cell): 54 actual: (Cell): 54
expected(Cell): 55 actual: (Cell): 55
expected(Cell): 56 actual: (Cell): 56
expected(Cell): 57 actual: (Cell): 57
expected(Cell): 58 actual: (Cell): 58
expected(Cell): 59 actual: (Cell): 59
expected(Column): 10 actual: (Column): 10
expected(Cell): 60 actual: (Cell): 60
expected(Cell): 61 actual: (Cell): 61
expected(Cell): 62 actual: (Cell): 62
expected(Cell): 63 actual: (Cell): 63
expected(Cell): 64 actual: (Cell): 64
expected(Cell): 65 actual: (Cell): 65
expected(Column): 11 actual: (Column): 11
expected(Cell): 66 actual: (Cell): 66
expected(Cell): 67 actual: (Cell): 67
expected(Cell): 68 actual: (Cell): 68
expected(Cell): 69 actual: (Cell): 69
expected(Cell): 70 actual: (Cell): 70
expected(Cell): 71 actual: (Cell): 71
expected(Column): 12 actual: (Column): 12
expected(Cell): 72 actual: (Cell): 72
expected(Cell): 73 actual: (Cell): 73
expected(Cell): 74 actual: (Cell): 74
expected(Cell): 75 actual: (Cell): 75
expected(Cell): 76 actual: (Cell): 76
expected(Cell): 77 actual: (Cell): 77
expected(Column): 13 actual: (Column): 13
expected(Cell): 78 actual: (Cell): 78
expected(Cell): 79 actual: (Cell): 79
expected(Cell): 80 actual: (Cell): 80
expected(Cell): 81 actual: (Cell): 81
expected(Cell): 82 actual: (Cell): 82
expected(Cell): 83 actual: (Cell): 83
expected(Column): 14 actual: (Column): 14
expected(Cell): 84 actual: (Cell): 84
expected(Cell): 85 actual: (Cell): 85
expected(Cell): 86 actual: (Cell): 86
expected(Cell): 87 actual: (Cell): 87
expected(Cell): 88 actual: (Cell): 88
expected(Cell): 89 actual: (Cell): 89
expected(Column): 15 actual: (Column): 15
expected(Cell): 90 actual: (Cell): 90
expected(Cell): 91 actual: (Cell): 91
expected(Cell): 92 actual: (Cell): 92
expected(Cell): 93 actual: (Cell): 93
expected(Cell): 94 actual: (Cell): 94
expected(Cell): 95 actual: (Cell): 95
expected(Column): 16 actual: (Column): 16
expected(Cell): 96 actual: (Cell): 96
expected(Cell): 97 actual: (Cell): 97
expected(Cell): 98 actual: (Cell): 98
expected(Cell): 99 actual: (Cell): 99
expected(Cell): 100 actual: (Cell): 100
expected(Cell): 101 actual: (Cell): 101
expected(Column): 17 actual: (Column): 17
expected(Cell): 102 actual: (Cell): 102
expected(Cell): 103 actual: (Cell): 103
expected(Cell): 104 actual: (Cell): 104
expected(Cell): 105 actual: (Cell): 105
expected(Cell): 106 actual: (Cell): 106
expected(Cell): 107 actual: (Cell): 107
expected(Column): 18 actual: (Column): 18
expected(Cell): 108 actual: (Cell): 108
expected(Cell): 109 actual: (Cell): 109
expected(Cell): 110 actual: (Cell): 110
expected(Cell): 111 actual: (Cell): 111
expected(Cell): 112 actual: (Cell): 112
expected(Cell): 113 actual: (Cell): 113
expected(Column): 19 actual: (Column): 19
expected(Cell): 114 actual: (Cell): 114
expected(Cell): 115 actual: (Cell): 115
expected(Cell): 116 actual: (Cell): 116
expected(Cell): 117 actual: (Cell): 117
expected(Cell): 118 actual: (Cell): 118
expected(Cell): 119 actual: (Cell): 119
expected(int[]): [I@296a71df actual: (int[]): [I@57f83c82
expected(Integer): 6 actual: (Integer): 6
expected(Boolean): true actual: (Boolean): true
expected(FastRandom): org.numenta.nupic.util.FastRandom@52849956 actual: (FastRandom): org.numenta.nupic.util.FastRandom@7a600e21
expected(Integer): 42 actual: (Integer): 42
expected(Integer): 4 actual: (Integer): 4
expected(Integer): 2048 actual: (Integer): 2048
expected(Integer): 5 actual: (Integer): 5
expected(Integer): 6 actual: (Integer): 6
expected(Integer): 255 actual: (Integer): 255
expected(Integer): 255 actual: (Integer): 255
expected(Double): 0.2 actual: (Double): 0.2
expected(Double): 0.8 actual: (Double): 0.8
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.0 actual: (Double): 0.0
expected(int[]): [I@4db4431b actual: (int[]): [I@458b4487
expected(Integer): 12 actual: (Integer): 12
expected(Double): 0.5 actual: (Double): 0.5
expected(Boolean): false actual: (Boolean): false
expected(Integer): 0 actual: (Integer): 0
expected(Double): -1.0 actual: (Double): -1.0
expected(Double): 5.0 actual: (Double): 5.0
expected(Double): 1.0 actual: (Double): 1.0
expected(Double): 0.01 actual: (Double): 0.01
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.01 actual: (Double): 0.01
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.1 actual: (Double): 0.1
expected(Integer): 10 actual: (Integer): 10
expected(Double): 10.0 actual: (Double): 10.0
expected(Boolean): true actual: (Boolean): true
expected(Integer): 500 actual: (Integer): 500
expected(Integer): 21 actual: (Integer): 21
expected(Double): 0.0 actual: (Double): 0.0
expected(Double): 1000.0 actual: (Double): 1000.0
expected(Double): 21.0 actual: (Double): 21.0
expected(Double): 1.0 actual: (Double): 1.0
expected(Boolean): false actual: (Boolean): false
expected(Boolean): false actual: (Boolean): false
expected(Boolean): false actual: (Boolean): false
expected(String): UNSET actual: (String): UNSET
expected(String): int actual: (String): int
expected(String): ScalarEncoder actual: (String): ScalarEncoder
expected(EmptyMap): {} actual: (EmptyMap): {}
expected(Boolean): false actual: (Boolean): false
expected(HashMap): {} actual: (HashMap): {}
expected(int[]): [I@297454f7 actual: (int[]): [I@57f83c82
expected(Integer): 6 actual: (Integer): 6
expected(Boolean): true actual: (Boolean): true
expected(FastRandom): org.numenta.nupic.util.FastRandom@5f8d4b51 actual: (FastRandom): org.numenta.nupic.util.FastRandom@7a600e21
expected(Integer): 42 actual: (Integer): 42
expected(Integer): 4 actual: (Integer): 4
expected(Integer): 2048 actual: (Integer): 2048
expected(Integer): 5 actual: (Integer): 5
expected(Integer): 6 actual: (Integer): 6
expected(Integer): 255 actual: (Integer): 255
expected(Integer): 255 actual: (Integer): 255
expected(Double): 0.2 actual: (Double): 0.2
expected(Double): 0.8 actual: (Double): 0.8
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.0 actual: (Double): 0.0
expected(int[]): [I@602b7944 actual: (int[]): [I@458b4487
expected(Integer): 12 actual: (Integer): 12
expected(Double): 0.5 actual: (Double): 0.5
expected(Boolean): false actual: (Boolean): false
expected(Integer): 0 actual: (Integer): 0
expected(Double): -1.0 actual: (Double): -1.0
expected(Double): 5.0 actual: (Double): 5.0
expected(Double): 1.0 actual: (Double): 1.0
expected(Double): 0.01 actual: (Double): 0.01
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.01 actual: (Double): 0.01
expected(Double): 0.05 actual: (Double): 0.05
expected(Double): 0.1 actual: (Double): 0.1
expected(Double): 0.1 actual: (Double): 0.1
expected(Integer): 10 actual: (Integer): 10
expected(Double): 10.0 actual: (Double): 10.0
expected(Boolean): true actual: (Boolean): true
expected(Integer): 500 actual: (Integer): 500
expected(Integer): 21 actual: (Integer): 21
expected(Double): 0.0 actual: (Double): 0.0
expected(Double): 1000.0 actual: (Double): 1000.0
expected(Double): 21.0 actual: (Double): 21.0
expected(Double): 1.0 actual: (Double): 1.0
expected(Boolean): false actual: (Boolean): false
expected(Boolean): false actual: (Boolean): false
expected(Boolean): false actual: (Boolean): false
expected(String): UNSET actual: (String): UNSET
expected(String): int actual: (String): int
expected(String): ScalarEncoder actual: (String): ScalarEncoder
expected(EmptyMap): {} actual: (EmptyMap): {}
expected(Boolean): false actual: (Boolean): false
expected(HashMap): {} actual: (HashMap): {}
expected(HTMSensor): org.numenta.nupic.network.sensor.HTMSensor@42225ab actual: (HTMSensor): org.numenta.nupic.network.sensor.HTMSensor@42225ab
expected(Network): org.numenta.nupic.network.Network@41f44db9 actual: (Network): org.numenta.nupic.network.Network@41f44db9
expected(Connections): org.numenta.nupic.model.Connections@f8cfab1b actual: (Connections): org.numenta.nupic.model.Connections@af03e972
expected(ObservableSensor): org.numenta.nupic.network.sensor.ObservableSensor@a6017f9 actual: (ObservableSensor): org.numenta.nupic.network.sensor.ObservableSensor@2295535f
expected(Layer): org.numenta.nupic.network.Layer@79cbfbe4 actual: (Layer): org.numenta.nupic.network.Layer@79cbfbe4
cleaning up...
Tests run: 27, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 45.958 sec - in org.numenta.nupic.network.PersistenceAPITest
Running org.numenta.nupic.network.PublisherSupplierTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in org.numenta.nupic.network.PublisherSupplierTest
Running org.numenta.nupic.network.ManualInputTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.006 sec - in org.numenta.nupic.network.ManualInputTest
Running org.numenta.nupic.network.sensor.URISensorTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec - in org.numenta.nupic.network.sensor.URISensorTest
Running org.numenta.nupic.network.sensor.FileSensorTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec - in org.numenta.nupic.network.sensor.FileSensorTest
Running org.numenta.nupic.network.sensor.HeaderTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in org.numenta.nupic.network.sensor.HeaderTest
Running org.numenta.nupic.network.sensor.PublisherTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in org.numenta.nupic.network.sensor.PublisherTest
Running org.numenta.nupic.network.sensor.CSVSourceTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.013 sec - in org.numenta.nupic.network.sensor.CSVSourceTest
Running org.numenta.nupic.network.sensor.BatchedCsvStreamTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.085 sec - in org.numenta.nupic.network.sensor.BatchedCsvStreamTest
Running org.numenta.nupic.network.sensor.ObservableSensorTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 sec - in org.numenta.nupic.network.sensor.ObservableSensorTest
Running org.numenta.nupic.network.sensor.HTMSensorTest
[0, 7/2/10 0:00, 21.2]
[1, 7/2/10 1:00, 34.0]
[2, 7/2/10 2:00, 40.4]
[3, 7/2/10 3:00, 123.4]
[0, 7/2/10 0:00, 21.2]
[1, 7/2/10 1:00, 16.4]
[2, 7/2/10 2:00, 4.7]
[3, 7/2/10 3:00, 4.7]
[4, 7/2/10 4:00, 4.6]
[5, 7/2/10 5:00, 23.5]
[6, 7/2/10 6:00, 47.5]
[7, 7/2/10 7:00, 45.4]
[8, 7/2/10 8:00, 46.1]
[9, 7/2/10 9:00, 41.5]
[10, 7/2/10 10:00, 43.4]
[11, 7/2/10 11:00, 43.8]
[12, 7/2/10 12:00, 37.8]
[13, 7/2/10 13:00, 36.6]
[14, 7/2/10 14:00, 35.7]
[15, 7/2/10 15:00, 38.9]
[16, 7/2/10 16:00, 36.2]
[0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]
output = [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Tests run: 18, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.103 sec - in org.numenta.nupic.network.sensor.HTMSensorTest
Running org.numenta.nupic.network.NetworkConsistencyTest
USING SAMPLE #: 75
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.273 sec - in org.numenta.nupic.network.NetworkConsistencyTest
Running org.numenta.nupic.network.RegionTest
output = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
output = [12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.561 sec - in org.numenta.nupic.network.RegionTest
Running org.numenta.nupic.network.LayerTest
------------ SpatialPooler Parameters ------------------
numInputs                  = 1
numColumns                 = 1
cellsPerColumn             = 32
columnDimensions           = [2048]
numActiveColumnsPerInhArea = 0.0
potentialPct               = 0.5
potentialRadius            = 16
globalInhibition           = false
localAreaDensity           = -1.0
inhibitionRadius           = 0
stimulusThreshold          = 0.0
synPermActiveInc           = 0.05
synPermInactiveDec         = 0.008
synPermConnected           = 0.1
minPctOverlapDutyCycle     = 0.001
minPctActiveDutyCycle      = 0.001
dutyCyclePeriod            = 1000
maxBoost                   = 10.0
version                    = 1.0

------------ TemporalMemory Parameters ------------------
activationThreshold        = 13
learningRadius             = 2048
minThreshold               = 10
maxNewSynapseCount         = 20
maxSynapsesPerSegment      = 255
maxSegmentsPerCell         = 255
initialPermanence          = 0.21
connectedPermanence        = 0.5
permanenceIncrement        = 0.1
permanenceDecrement        = 0.1
predictedSegmentDecrement  = 0.0
------------ SpatialPooler Parameters ------------------
numInputs                  = 1
numColumns                 = 1
cellsPerColumn             = 32
columnDimensions           = [2048]
numActiveColumnsPerInhArea = 0.0
potentialPct               = 0.5
potentialRadius            = 16
globalInhibition           = false
localAreaDensity           = -1.0
inhibitionRadius           = 0
stimulusThreshold          = 0.0
synPermActiveInc           = 0.05
synPermInactiveDec         = 0.008
synPermConnected           = 0.1
minPctOverlapDutyCycle     = 0.001
minPctActiveDutyCycle      = 0.001
dutyCyclePeriod            = 1000
maxBoost                   = 10.0
version                    = 1.0

------------ TemporalMemory Parameters ------------------
activationThreshold        = 13
learningRadius             = 2048
minThreshold               = 10
maxNewSynapseCount         = 20
maxSynapsesPerSegment      = 255
maxSegmentsPerCell         = 255
initialPermanence          = 0.21
connectedPermanence        = 0.5
permanenceIncrement        = 0.1
permanenceDecrement        = 0.1
predictedSegmentDecrement  = 0.0
seq: 4200  --> 0  output = [7, 9, 32, 45, 47, 70, 71, 73, 76, 97, 100], 				 cols = [1, 5, 7, 11, 12, 16]
seq: 4201  --> 1  output = [6, 8, 33, 35, 68, 69, 76, 77, 80, 82], 				 cols = [1, 5, 11, 12, 13]
seq: 4202  --> 2  output = [16, 18, 67, 71, 72, 74, 77, 78, 79, 80, 83, 84, 88], 				 cols = [2, 3, 11, 12, 13, 14]
seq: 4203  --> 3  output = [13, 15, 16, 18, 19, 23, 49, 53, 56, 57, 72, 73, 102, 103, 108, 112], 				 cols = [2, 3, 8, 9, 12, 17, 18]
seq: 4204  --> 4  output = [12, 13, 20, 21, 50, 52, 74, 102, 104, 109], 				 cols = [2, 3, 8, 12, 17, 18]
seq: 4205  --> 5  output = [15, 17, 42, 51, 52, 58, 106, 107, 111, 112, 116, 118], 				 cols = [2, 7, 8, 9, 17, 18, 19]
seq: 4206  --> 6  output = [9, 11, 45, 47, 48, 49, 54, 105, 106, 110, 113], 				 cols = [1, 7, 8, 9, 17, 18]
seq: 4207  --> 0  output = [7, 9, 32, 45, 47, 70, 71, 73, 76, 97, 100], 				 cols = [1, 5, 7, 11, 12, 16]
seq: 4208  --> 1  output = [6, 8, 33, 35, 68, 69, 76, 77, 80, 82], 				 cols = [1, 5, 11, 12, 13]
seq: 4209  --> 2  output = [16, 18, 67, 71, 72, 74, 77, 78, 79, 80, 83, 84, 88], 				 cols = [2, 3, 11, 12, 13, 14]
seq: 4210  --> 3  output = [13, 15, 16, 18, 19, 23, 49, 53, 56, 57, 72, 73, 102, 103, 108, 112], 				 cols = [2, 3, 8, 9, 12, 17, 18]
seq: 4211  --> 4  output = [12, 13, 20, 21, 50, 52, 74, 102, 104, 109], 				 cols = [2, 3, 8, 12, 17, 18]
seq: 4212  --> 5  output = [15, 17, 42, 51, 52, 58, 106, 107, 111, 112, 116, 118], 				 cols = [2, 7, 8, 9, 17, 18, 19]
seq: 4213  --> 6  output = [9, 11, 45, 47, 48, 49, 54, 105, 106, 110, 113], 				 cols = [1, 7, 8, 9, 17, 18]
------------ SpatialPooler Parameters ------------------
numInputs                  = 1
numColumns                 = 1
cellsPerColumn             = 32
columnDimensions           = [2048]
numActiveColumnsPerInhArea = 0.0
potentialPct               = 0.5
potentialRadius            = 16
globalInhibition           = false
localAreaDensity           = -1.0
inhibitionRadius           = 0
stimulusThreshold          = 0.0
synPermActiveInc           = 0.05
synPermInactiveDec         = 0.008
synPermConnected           = 0.1
minPctOverlapDutyCycle     = 0.001
minPctActiveDutyCycle      = 0.001
dutyCyclePeriod            = 1000
maxBoost                   = 10.0
version                    = 1.0

------------ TemporalMemory Parameters ------------------
activationThreshold        = 13
learningRadius             = 2048
minThreshold               = 10
maxNewSynapseCount         = 20
maxSynapsesPerSegment      = 255
maxSegmentsPerCell         = 255
initialPermanence          = 0.21
connectedPermanence        = 0.5
permanenceIncrement        = 0.1
permanenceDecrement        = 0.1
predictedSegmentDecrement  = 0.0
Tests run: 37, Failures: 1, Errors: 2, Skipped: 0, Time elapsed: 2.789 sec <<< FAILURE! - in org.numenta.nupic.network.LayerTest
testGetAllPredictions(org.numenta.nupic.network.LayerTest)  Time elapsed: 2.04 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.numenta.nupic.network.Layer.getAllPredictions(Layer.java:1385)
	at org.numenta.nupic.network.LayerTest.testGetAllPredictions(LayerTest.java:1277)

testGetAllValues(org.numenta.nupic.network.LayerTest)  Time elapsed: 0.011 sec  <<< ERROR!
java.lang.NullPointerException: null
	at org.numenta.nupic.network.Layer.getAllValues(Layer.java:1360)
	at org.numenta.nupic.network.LayerTest.testGetAllValues(LayerTest.java:250)

testFullLayerFluentAssembly(org.numenta.nupic.network.LayerTest)  Time elapsed: 0.126 sec  <<< FAILURE!
java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.assertTrue(Assert.java:41)
	at org.junit.Assert.assertTrue(Assert.java:52)
	at org.numenta.nupic.network.LayerTest.testFullLayerFluentAssembly(LayerTest.java:1461)

Running org.numenta.nupic.network.AlgorithmDeterminacyTest
-1
[9, 11, 45, 47, 48, 49, 54, 105, 106, 110, 113]
[9, 11, 45, 47, 48, 49, 54, 105, 106, 110, 113]
[9, 11, 45, 47, 48, 49, 54, 105, 106, 110, 113]
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.723 sec - in org.numenta.nupic.network.AlgorithmDeterminacyTest
Running org.numenta.nupic.network.ObservableTestBaseTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.network.ObservableTestBaseTest
Running org.numenta.nupic.network.NetworkTest
halting publisher = org.numenta.nupic.network.sensor.Publisher@29f8bf13



 Network Restart 



0,21.2,1.0
1,16.4,1.0
2,4.7,1.0
3,4.7,1.0
4,4.6,1.0
5,23.5,1.0
6,47.5,1.0
7,45.4,1.0
8,46.1,1.0
9,41.5,1.0
0,21.2,1.0
1,16.4,1.0
2,4.7,1.0
3,4.7,1.0
4,4.6,1.0
5,23.5,1.0
6,47.5,1.0
7,45.4,1.0
8,46.1,1.0
9,41.5,1.0
10,43.4,1.0
11,43.8,1.0
12,37.8,1.0
13,36.6,1.0
14,35.7,1.0
15,38.9,1.0
16,36.2,1.0
17,36.6,1.0
18,37.2,1.0
19,38.2,1.0
Tests run: 25, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 45.684 sec <<< FAILURE! - in org.numenta.nupic.network.NetworkTest
testNetworkComputeWithNoSensor(org.numenta.nupic.network.NetworkTest)  Time elapsed: 0.476 sec  <<< ERROR!
java.lang.RuntimeException: java.lang.NullPointerException
	at org.numenta.nupic.network.NetworkTest$12.onNext(NetworkTest.java:750)
	at org.numenta.nupic.network.NetworkTest$12.onNext(NetworkTest.java:747)
	at rx.Observable$33.onNext(Observable.java:7480)
	at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:130)
	at org.numenta.nupic.network.Layer$4.onNext(Layer.java:1892)
	at org.numenta.nupic.network.Layer$4.onNext(Layer.java:1871)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1858)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1838)
	at rx.Observable$33.onNext(Observable.java:7480)
	at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:130)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorCast$1.onNext(OperatorCast.java:50)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.subjects.SubjectSubscriptionManager$SubjectObserver.onNext(SubjectSubscriptionManager.java:224)
	at rx.subjects.PublishSubject.onNext(PublishSubject.java:114)
	at org.numenta.nupic.network.Layer.compute(Layer.java:951)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:656)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:649)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1858)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1838)
	at rx.Observable$33.onNext(Observable.java:7480)
	at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:130)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorCast$1.onNext(OperatorCast.java:50)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.subjects.SubjectSubscriptionManager$SubjectObserver.onNext(SubjectSubscriptionManager.java:224)
	at rx.subjects.PublishSubject.onNext(PublishSubject.java:114)
	at org.numenta.nupic.network.Layer.compute(Layer.java:951)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:656)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:649)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1858)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1838)
	at rx.Observable$33.onNext(Observable.java:7480)
	at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:130)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorCast$1.onNext(OperatorCast.java:50)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.subjects.SubjectSubscriptionManager$SubjectObserver.onNext(SubjectSubscriptionManager.java:224)
	at rx.subjects.PublishSubject.onNext(PublishSubject.java:114)
	at org.numenta.nupic.network.Layer.compute(Layer.java:951)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:656)
	at org.numenta.nupic.network.Region$2.onNext(Region.java:649)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1858)
	at org.numenta.nupic.network.Layer$3.onNext(Layer.java:1838)
	at rx.Observable$33.onNext(Observable.java:7480)
	at rx.observers.SafeSubscriber.onNext(SafeSubscriber.java:130)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.internal.operators.OperatorMap$1.onNext(OperatorMap.java:55)
	at rx.internal.operators.OperatorCast$1.onNext(OperatorCast.java:50)
	at rx.internal.operators.OperatorFilter$1.onNext(OperatorFilter.java:54)
	at rx.subjects.SubjectSubscriptionManager$SubjectObserver.onNext(SubjectSubscriptionManager.java:224)
	at rx.subjects.PublishSubject.onNext(PublishSubject.java:114)
	at org.numenta.nupic.network.Layer.compute(Layer.java:951)
	at org.numenta.nupic.network.Region.compute(Region.java:250)
	at org.numenta.nupic.network.Network.compute(Network.java:606)
	at org.numenta.nupic.network.NetworkTest.testNetworkComputeWithNoSensor(NetworkTest.java:756)

Running org.numenta.nupic.model.ConnectionsTest
expected = [1]
actual = [1]
missing: inferredFields
Tests run: 23, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.291 sec <<< FAILURE! - in org.numenta.nupic.model.ConnectionsTest
testGetPrintString(org.numenta.nupic.model.ConnectionsTest)  Time elapsed: 0.01 sec  <<< FAILURE!
java.lang.AssertionError: null
	at org.junit.Assert.fail(Assert.java:86)
	at org.junit.Assert.fail(Assert.java:95)
	at org.numenta.nupic.model.ConnectionsTest.testGetPrintString(ConnectionsTest.java:678)

Running org.numenta.nupic.model.PoolTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in org.numenta.nupic.model.PoolTest
Running org.numenta.nupic.model.ComputeCycleTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in org.numenta.nupic.model.ComputeCycleTest
Running org.numenta.nupic.model.DistalDendriteTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in org.numenta.nupic.model.DistalDendriteTest
Running org.numenta.nupic.model.SDRTest
result = [0, 3, 4, 4095]
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec - in org.numenta.nupic.model.SDRTest
Running org.numenta.nupic.serialize.HTMObjectInputOutputTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.06 sec - in org.numenta.nupic.serialize.HTMObjectInputOutputTest
Running org.numenta.nupic.serialize.SerializerCoreTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.029 sec - in org.numenta.nupic.serialize.SerializerCoreTest
Running org.numenta.nupic.algorithms.ClassificationTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in org.numenta.nupic.algorithms.ClassificationTest
Running org.numenta.nupic.algorithms.SpatialPoolerCompatibilityTest
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.07 sec - in org.numenta.nupic.algorithms.SpatialPoolerCompatibilityTest
Running org.numenta.nupic.algorithms.MovingAverageTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.002 sec - in org.numenta.nupic.algorithms.MovingAverageTest
Running org.numenta.nupic.algorithms.AnomalyTest
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.005 sec - in org.numenta.nupic.algorithms.AnomalyTest
Running org.numenta.nupic.algorithms.AnomalyLikelihoodTest
Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.224 sec - in org.numenta.nupic.algorithms.AnomalyLikelihoodTest
Running org.numenta.nupic.algorithms.CLAClassifierTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec - in org.numenta.nupic.algorithms.CLAClassifierTest
Running org.numenta.nupic.algorithms.SpatialPoolerTest
Tests run: 34, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.508 sec - in org.numenta.nupic.algorithms.SpatialPoolerTest
Running org.numenta.nupic.algorithms.SDRClassifierTest
Tests run: 20, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.874 sec - in org.numenta.nupic.algorithms.SDRClassifierTest
Running org.numenta.nupic.algorithms.SampleTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in org.numenta.nupic.algorithms.SampleTest
Running org.numenta.nupic.algorithms.TemporalMemoryTest
Tests run: 28, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.122 sec - in org.numenta.nupic.algorithms.TemporalMemoryTest
Running org.numenta.nupic.algorithms.AnomalyLikelihoodMetricsTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.007 sec - in org.numenta.nupic.algorithms.AnomalyLikelihoodMetricsTest

Results :

Failed tests: 
  BitHistoryTest.testPFormatArray:22 expected:<[ 2[.00 4.]00 ]> but was:<[ 2[,00 4,]00 ]>
  ParametersTest.testKeys:254 null
  ParametersTest.testSize:248 expected:<48> but was:<49>
  ConnectionsTest.testGetPrintString:678 null
  MonitoredTemporalMemoryTest.test_mmPrettyPrintConnections:42 null
  LayerTest.testFullLayerFluentAssembly:1461 null
Tests in error: 
  LayerTest.testGetAllPredictions:1277 » NullPointer
  LayerTest.testGetAllValues:250 » NullPointer
  NetworkTest.testNetworkComputeWithNoSensor:759->ObservableTestBase.checkObserver:17 » Runtime

Tests run: 649, Failures: 6, Errors: 3, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 02:11 min
[INFO] Finished at: 2017-03-05T22:25:57+01:00
[INFO] Final Memory: 17M/241M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.18.1:test (default-test) on project htm.java: There are test failures.
[ERROR] 
[ERROR] Please refer to /home/repairnator/workspace/20170305_202614/numenta/htm.java/207958447/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
