[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Spring MVC to RAML Synchronizer
[INFO] Spring MVC to RAML Synchronizer Annotations
[INFO] Spring MVC to RAML Synchronizer Parser
[INFO] Spring MVC to RAML Synchronizer Maven Plugin
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer 0.10.13
[INFO] ------------------------------------------------------------------------
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer Annotations 0.10.13
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springmvc-raml-annotations ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/phoenixnap/springmvc-raml-plugin/318593331/springmvc-raml-annotations/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ springmvc-raml-annotations ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springmvc-raml-annotations ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/phoenixnap/springmvc-raml-plugin/318593331/springmvc-raml-annotations/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ springmvc-raml-annotations ---
[INFO] No sources to compile
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ springmvc-raml-annotations ---
[INFO] No tests to run.
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Spring MVC to RAML Synchronizer Parser 0.10.13
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ springmvc-raml-parser ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 1 resource
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:compile (default-compile) @ springmvc-raml-parser ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ springmvc-raml-parser ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 149 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.3:testCompile (default-testCompile) @ springmvc-raml-parser ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ springmvc-raml-parser ---
[INFO] Surefire report directory: /root/workspace/phoenixnap/springmvc-raml-plugin/318593331/springmvc-raml-parser/target/surefire-reports
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.pom (3 KB at 2.9 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.12.4/surefire-providers-2.12.4.pom (3 KB at 65.5 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.12.4/surefire-junit4-2.12.4.jar (37 KB at 364.2 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running test.phoenixnap.oss.plugin.naming.RamlStyleCheckerTest
2017-12-19 14:09:30 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /base
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGet
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGetAndPost
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /secondBase
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithGet
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /endpointWithURIParam
2017-12-19 14:09:30 DEBUG [checkers.ResourceUrlStyleChecker] - Checking resource /{uriParam}
2017-12-19 14:09:31 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:31 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:31 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-12-19 14:09:31 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:31 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: PUT
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: PUT
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ignored
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /thisShouldBeIgnored
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /balls
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /balls
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoreMeId}
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /books
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /books
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{bookId}
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /houses
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /houses
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{houseId}
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ResponseBodySchemaStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: POST
2017-12-19 14:09:32 DEBUG [checkers.ActionSecurityResponseChecker] - Checking Action: GET
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ignored
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /thisShouldBeIgnored
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /ball
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /ball
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoremeId}
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /books
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /books
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{bookId}
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /house
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Collection Resource identified: /house
2017-12-19 14:09:32 DEBUG [checkers.ResourceCollectionPluralisationChecker] - Checking resource /{ignoreMeId}
2017-12-19 14:09:32 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: PUT
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: DELETE
2017-12-19 14:09:32 DEBUG [checkers.ResponseCodeDefinitionStyleChecker] - Checking Action: GET
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.781 sec
Running test.phoenixnap.oss.plugin.naming.SpringMvcResourceParserTest
2017-12-19 14:09:32 INFO [parser.ResourceParser] - Parsing resource: TestController 
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody GET from method: getMethodBodyParameter
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody POST from method: postMethodBodyParameter
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter POST from method: postMethodSimpleParameter
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter GET from method: getMethodTwoParameter
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter POST from method: postMethodTwoParameter
2017-12-19 14:09:32 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBodyObject POST from method: postMethodTwoParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBodyObject GET from method: postMethodTwoParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} GET from method: getMethodSimpleParameterPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} POST from method: postMethodSimpleParameterPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/miscCases/{pathVariable} GET from method: getMethodMiscCasesPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/responseObject POST from method: postResponseObject
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/responseObject GET from method: postResponseObject
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/methodBodyIgnore PUT from method: putMethodBodyIgnore
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/descriptionTest/secondBlock/thirdBlock/stuff PUT from method: descriptionTest
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod GET from method: simpleGetMethod
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll DELETE from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll PUT from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll HEAD from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll TRACE from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll POST from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll PATCH from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethodAll OPTIONS from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod POST from method: simplePostMethod
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter GET from method: getMethodSimpleParameter
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: UriPrefixIgnoredController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint GET from method: endpoint
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint GET from method: endpointAgain
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint POST from method: secondEndpoint
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /the/url/that/should/be/ignored/base/endpoint POST from method: secondEndpointAgain
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: BugController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /forgotStuff/{somethingID}/resendStuff POST from method: forgotStuffResendStuff
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: MultipleContentTypeTestController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint GET from method: endpoint
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint GET from method: endpointAgain
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint POST from method: secondEndpoint
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpoint POST from method: secondEndpointAgain
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: WrappedResponseBodyTestController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType GET from method: anotherEndpointWithResponseType
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseTypeNonGeneric GET from method: endpointWithResponseTypeNonGeneric
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseTypeNonGeneric POST from method: anotherEndpointWithResponseTypeNonGeneric
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: ShorthandTestController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody GET from method: getMethodBodyParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameterBody POST from method: postMethodBodyParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter POST from method: postMethodSimpleParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter GET from method: getMethodTwoParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/twoParameter POST from method: postMethodTwoParameter
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} GET from method: getMethodSimpleParameterPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter/{pathVariable} POST from method: postMethodSimpleParameterPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/miscCases/{pathVariable} GET from method: getMethodMiscCasesPathVariable
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/methodBodyIgnore PUT from method: putMethodBodyIgnore
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/descriptionTest/secondBlock/thirdBlock/stuff PUT from method: descriptionTest
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod GET from method: simpleGetMethod
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/simpleMethod POST from method: simplePostMethod
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base/oneParameter GET from method: getMethodSimpleParameter
2017-12-19 14:09:33 INFO [parser.ResourceParser] - Parsing resource: NoValueController 
2017-12-19 14:09:33 INFO [parser.SpringMvcResourceParser] - Added call: /base GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:33 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter ObjectTypeInterpreter for type ObjectTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter BooleanTypeInterpreter for type BooleanTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter NullTypeInterpreter for type NullTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter NumberTypeInterpreter for type NumberTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter ArrayTypeInterpreter for type ArrayTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter AnyTypeInterpreter for type AnyTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter FileTypeInterpreter for type FileTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter DateTypeInterpreter for type DateTimeOnlyTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter DateTypeInterpreter for type DateTimeTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter DateTypeInterpreter for type DateTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter DateTypeInterpreter for type TimeOnlyTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter UnionTypeInterpreter for type UnionTypeDeclaration
2017-12-19 14:09:33 INFO [pojo.RamlInterpreterFactory] - Adding Interpreter StringTypeInterpreter for type StringTypeDeclaration
2017-12-19 14:09:33 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:33 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:33 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: id to TestType
2017-12-19 14:09:34 DEBUG [pojo.PojoBuilder] - Adding field: name to TestType
2017-12-19 14:09:34 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.222 sec
Running test.phoenixnap.oss.plugin.naming.SchemaHelperTest
Tests run: 7, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec
Running test.phoenixnap.oss.plugin.naming.BugfixTest
2017-12-19 14:09:34 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.146 sec
Running test.phoenixnap.oss.plugin.naming.JavaDocEntryTest
Tests run: 10, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.02 sec
Running test.phoenixnap.oss.plugin.naming.RamlVerifierTest
2017-12-19 14:09:34 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:34 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:34 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-12-19 14:09:34 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:34 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:34 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerDowngradeToWarning 
2017-12-19 14:09:34 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-12-19 14:09:34 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:34 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:34 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param3 in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:34 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param4 in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-12-19 14:09:34 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param5 in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-12-19 14:09:34 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param6 in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:34 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:34 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:34 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: StyleCheckResourceDuplicateCommand 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/child GET from method: isSomethingCoolChild
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/{somethingCoolId}/child GET from method: isAParticularSomethingCoolChild
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: StyleCheckResourceDuplicateCommandSecond 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/status GET from method: isSomethingCoolStatus
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /somethingCool/{somethingCoolId}/status GET from method: isAParticularSomethingCoolStatus
2017-12-19 14:09:35 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /somethingCool
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{somethingCoolId}
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /somethingCool
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{somethingCoolId}
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /child
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /status
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /secondBase in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ContentTypeTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithNoContentType GET from method: endpointWithNoContentType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestType POST from method: endpointWithRequestType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestAndResponseType POST from method: endpointWithRequestAndResponseType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: MultiContentTypeTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithNoContentType GET from method: endpointWithNoContentType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestType POST from method: endpointWithRequestType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithDifferentResponseType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithRequestAndResponseType POST from method: endpointWithRequestAndResponseType
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/everything.
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Processing key application/json.
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithNoContentType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithNoContentType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action GET
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithRequestAndResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithRequestAndResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionContentTypeChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerPostWarning 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter but found in Form Parameters  param5 in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter but found in Form Parameters  param6 in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is different element2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is missing element3
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ResponseBodyTestControllerError 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithResponseType POST from method: endpointWithResponseType
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Found body for mime type application/test+json
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Response Body field type is missing element3
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithResponseType in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithResponseType
2017-12-19 14:09:35 DEBUG [checkers.ActionResponseBodySchemaChecker] - Checking action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierUriParamTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/{someUriParam}/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting URI Param resource: /{someUriParam} in CONTRACT instead of /{aURiParam} as expected
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{aURiParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{aURiParam}/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{aURiParam}/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{aURiParam}/endpointWithGetAndPost in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{aURiParam}/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/{aURiParam}/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting URI Param resource: /{aURiParam} in SOURCE instead of /{someUriParam} as expected
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{someUriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{someUriParam}/endpointWithGetAndPost in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/{someUriParam}/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{someUriParam}/endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/{someUriParam}/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/{someUriParam}/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestControllerPostMissing 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} POST from method: endpointWithURIParamPost
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param5
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param5 in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param6
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param6 in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: POST /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action POST
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 2 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: POST in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /secondBase/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /base
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGetAndPost in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGetAndPost
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: POST in CONTRACT
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected action missing: GET in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /secondBase
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /secondBase/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ActionExistenceChecker] - Checking Action /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /secondBase/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /{differentNameParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /{uriParam} in CONTRACT
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 3 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: VerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost POST from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGetAndPost GET from method: simpleGetMethod
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: SecondVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /secondBase/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParam
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ThirdVerifierTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /thirdBase/endpointWithGet GET from method: simpleMethodAllHttpMethods
2017-12-19 14:09:35 INFO [checkers.ResourceExistenceChecker] - Performing Resource Existence Checks
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in implementation
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Checking for any missing resources in RAML
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /base
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGetAndPost
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /secondBase
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /endpointWithURIParam
2017-12-19 14:09:35 DEBUG [checkers.ResourceExistenceChecker] - Expecting and found resource: /{uriParam}
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Expected resource missing: /thirdBase in CONTRACT
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:35 INFO [generation.RamlGenerator] - Generating Raml for test v0.0.1 from 1 annotated classes
2017-12-19 14:09:35 INFO [parser.ResourceParser] - Parsing resource: ParamTestController 
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithGet GET from method: endpointWithGet
2017-12-19 14:09:35 INFO [parser.SpringMvcResourceParser] - Added call: /base/endpointWithURIParam/{uriParam} GET from method: endpointWithURIParamGet
2017-12-19 14:09:35 INFO [checkers.RamlCheckerResourceVisitorCoordinator] - Performing Resource and Action Visitor Checks
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using contract as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Skipping visiting action POST /base/endpointWithURIParam/{uriParam} in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Checking resources using implementation as reference. Warnings only
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithGet in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithGet
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param1
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param2
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting resource: /base/endpointWithURIParam/{uriParam} in SOURCE
2017-12-19 14:09:35 DEBUG [checkers.RamlCheckerResourceVisitorCoordinator] - Visiting action: GET /base/endpointWithURIParam/{uriParam}
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - Checking Action GET
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param3
2017-12-19 14:09:35 ERROR [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param3 in CONTRACT
2017-12-19 14:09:35 DEBUG [checkers.ActionQueryParameterChecker] - ActionQueryParameterChecker Checking param param4
2017-12-19 14:09:35 WARN [checkers.RamlCheckerResourceVisitorCoordinator] - Missing Query Parameter.  param4 in CONTRACT
Tests run: 19, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.104 sec
Running test.phoenixnap.oss.plugin.naming.NamingHelperTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec
Running com.phoenixnap.oss.ramlapisync.pojo.UnionTypeInterpretorTest
2017-12-19 14:09:35 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Device
2017-12-19 14:09:35 DEBUG [pojo.ObjectTypeInterpreter] - mime: Phone
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Phone
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: manufacturer to Phone
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: numberOfSIMCards to Phone
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: Phone to Device
2017-12-19 14:09:35 DEBUG [pojo.ObjectTypeInterpreter] - mime: Notebook
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Notebook
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: manufacturer to Notebook
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: numberOfUSBPorts to Notebook
2017-12-19 14:09:35 DEBUG [pojo.PojoBuilder] - Adding field: Notebook to Device
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.157 sec
Running com.phoenixnap.oss.ramlapisync.raml.rjp.raml10v2.RJP10V2RamlRootTest
Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.179 sec
Running com.phoenixnap.oss.ramlapisync.raml.rjp.raml10v2.RJP10V2RamlActionTest
Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.151 sec
Running com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlEquivalenceTest
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{managerId} against /{managerId}
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /managers against /managers
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{managerId} against /{managerId}
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /office against /office
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources: /{nestedId} against /{nestedId}
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions are null
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: GET against GET
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking actions: POST against POST
2017-12-19 14:09:36 DEBUG [interpreters.RamlEquivalenceTest] - Checking resources are null
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.496 sec
Running com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Enum com.gen.foo.EnumChecks already exists. Reusing it!
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 1984577273583054078L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private EnumChecks anotherEnumAgain;
    @NotNull
    private List<Object> testDefArray = new ArrayList<Object>();
    @NotNull
    private Object fileObject;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @NotNull
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @NotNull
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}

2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.BigStuff.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 2409265649249436009L;
    private Double theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 7702171720160972555L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.FeeCategory.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = 2470407554036552522L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.test.model.FeeParent.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = 2462145133658164586L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 7756703687786385261L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.test.model.Person.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 7743483817757944940L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = 2442315330762987754L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 2359691131274075688L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private EnumChecks anotherEnumAgain;
    private List<Object> testDefArray = new ArrayList<Object>();
    private Object fileObject;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}
-----------------------------------com.gen.test.BigStuffController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface BigStuffController {


    /**
     * No description
     * 
     */
    public ResponseEntity<BigStuff> getBigStuff();

}
-----------------------------------com.gen.test.BigStuffControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/bigStuff", produces = "application/json")
@Validated
public class BigStuffControllerDecorator
    implements BigStuffController
{

    @Autowired
    private BigStuffController bigStuffControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<BigStuff> getBigStuff() {
        return this.bigStuffControllerDelegate.getBigStuff();
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Manager>> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(
        @Valid
        Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
@Validated
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Manager>> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
@Validated
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.foo.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
@Validated
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
@Validated
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.SongController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface SongController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Song> getSongs();

}
-----------------------------------com.gen.test.SongControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/songs", produces = "application/json")
@Validated
public class SongControllerDecorator
    implements SongController
{

    @Autowired
    private SongController songControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongs() {
        return this.songControllerDelegate.getSongs();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
@Validated
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 2129995861075766786L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.foo.NestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 2176265412617758851L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.foo.NestedNestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = 2240712288133210917L;
    private List<Person> childList = new ArrayList<Person>();

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(childList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(childList, otherObject.childList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("childList", childList).toString();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 2161393059372634403L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}

2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
-----------------------------------com.gen.foo.BigStuff.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.math.BigDecimal;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 7862462660898809711L;
    private BigDecimal theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(BigDecimal theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public BigDecimal getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(BigDecimal theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}

2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.BigStuff.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 8108682767558927189L;
    private Double theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 8303675873027000218L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.FeeCategory.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = 8136774995127459254L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.test.model.FeeParent.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = 8183044546669451319L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 8376385168920840220L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 8321853197000460218L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = 8197916904209543063L;
    private List<Person> childList = new ArrayList<Person>();

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(childList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(childList, otherObject.childList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("childList", childList).toString();
    }

}
-----------------------------------com.gen.test.model.Person.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 8356555357435728795L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = 8151647348372583702L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 8130165062260722742L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private EnumChecks anotherEnumAgain;
    private List<Object> testDefArray = new ArrayList<Object>();
    private Object fileObject;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}
-----------------------------------com.gen.test.BigStuffController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface BigStuffController {


    /**
     * No description
     * 
     */
    public ResponseEntity<BigStuff> getBigStuff();

}
-----------------------------------com.gen.test.BigStuffControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/bigStuff", produces = "application/json")
@Validated
public class BigStuffControllerDecorator
    implements BigStuffController
{

    @Autowired
    private BigStuffController bigStuffControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<BigStuff> getBigStuff() {
        return this.bigStuffControllerDelegate.getBigStuff();
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Manager>> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(
        @Valid
        Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
@Validated
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Manager>> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
@Validated
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
@Validated
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
@Validated
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.SongController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface SongController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Song> getSongs();

}
-----------------------------------com.gen.test.SongControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/songs", produces = "application/json")
@Validated
public class SongControllerDecorator
    implements SongController
{

    @Autowired
    private SongController songControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongs() {
        return this.songControllerDelegate.getSongs();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
@Validated
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.FeeCategory.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = 7768271078893108749L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.foo.FeeParent.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = 7814540626140133518L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.foo.Song.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = 7781490948921549069L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}

2017-12-19 14:09:37 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.foo.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 6765213319689244244L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private EnumChecks anotherEnumAgain;
    @NotNull
    private List<Object> testDefArray = new ArrayList<Object>();
    @NotNull
    private Object fileObject;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @NotNull
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @NotNull
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}

2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.foo.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 6753645932877488052L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private EnumChecks anotherEnumAgain;
    @NotNull
    private List<Object> testDefArray = new ArrayList<Object>();
    @NotNull
    private Object fileObject;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @NotNull
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @NotNull
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}

2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:38 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.BigStuff.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 6314085208260948969L;
    private Double theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 6576830155677842319L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.FeeCategory.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = 6366964688374710250L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.test.model.FeeParent.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = 6309127754315929289L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 6565262764571118831L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 6525603150190830574L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = 5218488354563034926L;
    private List<Person> childList = new ArrayList<Person>();

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(childList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(childList, otherObject.childList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("childList", childList).toString();
    }

}
-----------------------------------com.gen.test.model.Person.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 6560305314921066447L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = 6386794499859821675L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 6702418931685443603L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private EnumChecks anotherEnumAgain;
    private List<Object> testDefArray = new ArrayList<Object>();
    private Object fileObject;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}
-----------------------------------com.gen.test.BigStuffController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface BigStuffController {


    /**
     * No description
     * 
     */
    public ResponseEntity<BigStuff> getBigStuff();

}
-----------------------------------com.gen.test.BigStuffControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/bigStuff", produces = "application/json")
@Validated
public class BigStuffControllerDecorator
    implements BigStuffController
{

    @Autowired
    private BigStuffController bigStuffControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<BigStuff> getBigStuff() {
        return this.bigStuffControllerDelegate.getBigStuff();
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Manager>> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(
        @Valid
        Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
@Validated
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Manager>> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
@Validated
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
@Validated
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
@Validated
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.SongController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface SongController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Song> getSongs();

}
-----------------------------------com.gen.test.SongControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/songs", produces = "application/json")
@Validated
public class SongControllerDecorator
    implements SongController
{

    @Autowired
    private SongController songControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongs() {
        return this.songControllerDelegate.getSongs();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
@Validated
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 6360354755507973738L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}

2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 5568814951118892727L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 5273020317893480335L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 5266410385026743823L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}


2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
-----------------------------------com.gen.foo.BigStuff.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.math.BigInteger;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 5577077367202313367L;
    private Double theDecimal;
    private BigInteger theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, BigInteger theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public BigInteger getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(BigInteger theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}


2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 5443226166521356852L;
    @NotNull
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 5461403490494816852L;
    @NotNull
    private Department department;
    @NotNull
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 5454793553333113044L;
    @NotNull
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}

2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.BigStuff.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = 5767113023020334012L;
    private Double theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 5659701562396258137L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.FeeCategory.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = 5844779764269259101L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.test.model.FeeParent.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = 5838169827107555293L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 5742325761885170203L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 5696056210343178138L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = -7332193016447235649L;
    private List<Person> childList = new ArrayList<Person>();

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(childList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(childList, otherObject.childList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("childList", childList).toString();
    }

}
-----------------------------------com.gen.test.model.Person.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 5735715824723466395L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = 5856347151081015294L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = 5791900279860530524L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private EnumChecks anotherEnumAgain;
    private List<Object> testDefArray = new ArrayList<Object>();
    private Object fileObject;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}
-----------------------------------com.gen.test.BigStuffController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface BigStuffController {


    /**
     * No description
     * 
     */
    public ResponseEntity<BigStuff> getBigStuff();

}
-----------------------------------com.gen.test.BigStuffControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/bigStuff", produces = "application/json")
@Validated
public class BigStuffControllerDecorator
    implements BigStuffController
{

    @Autowired
    private BigStuffController bigStuffControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<BigStuff> getBigStuff() {
        return this.bigStuffControllerDelegate.getBigStuff();
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Manager>> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(
        @Valid
        Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
@Validated
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Manager>> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
@Validated
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
@Validated
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
@Validated
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.SongController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface SongController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Song> getSongs();

}
-----------------------------------com.gen.test.SongControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/songs", produces = "application/json")
@Validated
public class SongControllerDecorator
    implements SongController
{

    @Autowired
    private SongController songControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongs() {
        return this.songControllerDelegate.getSongs();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
@Validated
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.ClearanceLevel.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = 5818340019917411165L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.foo.Manager.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = 5477928331251592724L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = 5471318394089888916L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}

2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: songId to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: songTitle to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: artist to Song
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeParent
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: abc to FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: efg to FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: fee to Song
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: FeeCategory
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: otherFee to Song
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theDecimal to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: theInteger to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to BigStuff
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.EnumChecks
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Enum com.gen.test.model.EnumChecks already exists. Reusing it!
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:39 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedNestedArrayPerson
2017-12-19 14:09:39 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedNestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedNestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedNestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedNestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedNestedArrayPerson
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: childList to NestedNestedArrayPerson
-----------------------------------com.gen.test.model.AnEnum.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.BigStuff.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class BigStuff implements Serializable
{

    final static long serialVersionUID = -7005001189219922937L;
    private Double theDecimal;
    private Long theInteger;
    private EnumChecks anotherEnum;

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff() {
        super();
    }

    /**
     * Creates a new BigStuff.
     * 
     */
    public BigStuff(Double theDecimal, Long theInteger, EnumChecks anotherEnum) {
        super();
        this.theDecimal = theDecimal;
        this.theInteger = theInteger;
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the theDecimal.
     * 
     * @return
     *     theDecimal
     */
    public Double getTheDecimal() {
        return theDecimal;
    }

    /**
     * Set the theDecimal.
     * 
     * @param theDecimal
     *     the new theDecimal
     */
    public void setTheDecimal(Double theDecimal) {
        this.theDecimal = theDecimal;
    }

    /**
     * Returns the theInteger.
     * 
     * @return
     *     theInteger
     */
    public Long getTheInteger() {
        return theInteger;
    }

    /**
     * Set the theInteger.
     * 
     * @param theInteger
     *     the new theInteger
     */
    public void setTheInteger(Long theInteger) {
        this.theInteger = theInteger;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(theDecimal).append(theInteger).append(anotherEnum).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        BigStuff otherObject = ((BigStuff) other);
        return new EqualsBuilder().append(theDecimal, otherObject.theDecimal).append(theInteger, otherObject.theInteger).append(anotherEnum, otherObject.anotherEnum).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("theDecimal", theDecimal).append("theInteger", theInteger).append("anotherEnum", anotherEnum).toString();
    }

}
-----------------------------------com.gen.test.model.ClearanceLevel.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum ClearanceLevel {

    @JsonProperty("low")
    LOW("low"),
    @JsonProperty("high")
    HIGH("high");
    private final String value;
    private final static Map<String, ClearanceLevel> VALUE_CACHE = new HashMap<String, ClearanceLevel>();

    static {
        for (ClearanceLevel c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private ClearanceLevel(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static ClearanceLevel fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.Department.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -6833142861670329589L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.test.model.EnumChecks.java-----------------------------------

package com.gen.test.model;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.test.model.FeeCategory.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeCategory
    extends FeeParent
    implements Serializable
{

    final static long serialVersionUID = -6927334447970997847L;
    private String efg;

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory() {
        super();
    }

    /**
     * Creates a new FeeCategory.
     * 
     */
    public FeeCategory(String abc, String efg) {
        super(abc);
        this.efg = efg;
    }

    /**
     * Returns the efg.
     * 
     * @return
     *     efg
     */
    public String getEfg() {
        return efg;
    }

    /**
     * Set the efg.
     * 
     * @param efg
     *     the new efg
     */
    public void setEfg(String efg) {
        this.efg = efg;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(efg).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeCategory otherObject = ((FeeCategory) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(efg, otherObject.efg).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("efg", efg).toString();
    }

}
-----------------------------------com.gen.test.model.FeeParent.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class FeeParent implements Serializable
{

    final static long serialVersionUID = -6933944385132701655L;
    private String abc;

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent() {
        super();
    }

    /**
     * Creates a new FeeParent.
     * 
     */
    public FeeParent(String abc) {
        super();
        this.abc = abc;
    }

    /**
     * Returns the abc.
     * 
     * @return
     *     abc
     */
    public String getAbc() {
        return abc;
    }

    /**
     * Set the abc.
     * 
     * @param abc
     *     the new abc
     */
    public void setAbc(String abc) {
        this.abc = abc;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(abc).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        FeeParent otherObject = ((FeeParent) other);
        return new EqualsBuilder().append(abc, otherObject.abc).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("abc", abc).toString();
    }

}
-----------------------------------com.gen.test.model.Manager.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Manager
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -6770348473666528947L;
    private Department department;
    private ClearanceLevel clearanceLevel;

    /**
     * Creates a new Manager.
     * 
     */
    public Manager() {
        super();
    }

    /**
     * Creates a new Manager.
     * 
     */
    public Manager(String firstname, String lastname, Long id, Department department, ClearanceLevel clearanceLevel) {
        super(firstname, lastname, id);
        this.department = department;
        this.clearanceLevel = clearanceLevel;
    }

    /**
     * Returns the department.
     * 
     * @return
     *     department
     */
    public Department getDepartment() {
        return department;
    }

    /**
     * Set the department.
     * 
     * @param department
     *     the new department
     */
    public void setDepartment(Department department) {
        this.department = department;
    }

    /**
     * Returns the clearanceLevel.
     * 
     * @return
     *     clearanceLevel
     */
    public ClearanceLevel getClearanceLevel() {
        return clearanceLevel;
    }

    /**
     * Set the clearanceLevel.
     * 
     * @param clearanceLevel
     *     the new clearanceLevel
     */
    public void setClearanceLevel(ClearanceLevel clearanceLevel) {
        this.clearanceLevel = clearanceLevel;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(department).append(clearanceLevel).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Manager otherObject = ((Manager) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(department, otherObject.department).append(clearanceLevel, otherObject.clearanceLevel).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("department", department).append("clearanceLevel", clearanceLevel).toString();
    }

}
-----------------------------------com.gen.test.model.NestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -8224534344298688727L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.test.model.NestedNestedArrayPerson.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedNestedArrayPerson
    extends NestedArrayPerson
    implements Serializable
{

    final static long serialVersionUID = -8165044918433289045L;
    private List<Person> childList = new ArrayList<Person>();

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedNestedArrayPerson.
     * 
     */
    public NestedNestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList, List<Person> childList) {
        super(firstname, lastname, id, departmentList);
        this.childList = childList;
    }

    /**
     * Returns the childList.
     * 
     * @return
     *     childList
     */
    public List<Person> getChildList() {
        return childList;
    }

    /**
     * Set the childList.
     * 
     * @param childList
     *     the new childList
     */
    public void setChildList(List<Person> childList) {
        this.childList = childList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(childList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedNestedArrayPerson otherObject = ((NestedNestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(childList, otherObject.childList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("childList", childList).toString();
    }

}
-----------------------------------com.gen.test.model.Person.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -6791830764073357204L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}
-----------------------------------com.gen.test.model.Song.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Song implements Serializable
{

    final static long serialVersionUID = -6889327312512426422L;
    private String songId;
    private String songTitle;
    private String artist;
    private FeeCategory fee;
    private FeeCategory otherFee;

    /**
     * Creates a new Song.
     * 
     */
    public Song() {
        super();
    }

    /**
     * Creates a new Song.
     * 
     */
    public Song(String songId, String songTitle, String artist, FeeCategory fee, FeeCategory otherFee) {
        super();
        this.songId = songId;
        this.songTitle = songTitle;
        this.artist = artist;
        this.fee = fee;
        this.otherFee = otherFee;
    }

    /**
     * Returns the songId.
     * 
     * @return
     *     songId
     */
    public String getSongId() {
        return songId;
    }

    /**
     * Set the songId.
     * 
     * @param songId
     *     the new songId
     */
    public void setSongId(String songId) {
        this.songId = songId;
    }

    /**
     * Returns the songTitle.
     * 
     * @return
     *     songTitle
     */
    public String getSongTitle() {
        return songTitle;
    }

    /**
     * Set the songTitle.
     * 
     * @param songTitle
     *     the new songTitle
     */
    public void setSongTitle(String songTitle) {
        this.songTitle = songTitle;
    }

    /**
     * Returns the artist.
     * 
     * @return
     *     artist
     */
    public String getArtist() {
        return artist;
    }

    /**
     * Set the artist.
     * 
     * @param artist
     *     the new artist
     */
    public void setArtist(String artist) {
        this.artist = artist;
    }

    /**
     * Returns the fee.
     * 
     * @return
     *     fee
     */
    public FeeCategory getFee() {
        return fee;
    }

    /**
     * Set the fee.
     * 
     * @param fee
     *     the new fee
     */
    public void setFee(FeeCategory fee) {
        this.fee = fee;
    }

    /**
     * Returns the otherFee.
     * 
     * @return
     *     otherFee
     */
    public FeeCategory getOtherFee() {
        return otherFee;
    }

    /**
     * Set the otherFee.
     * 
     * @param otherFee
     *     the new otherFee
     */
    public void setOtherFee(FeeCategory otherFee) {
        this.otherFee = otherFee;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(songId).append(songTitle).append(artist).append(fee).append(otherFee).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Song otherObject = ((Song) other);
        return new EqualsBuilder().append(songId, otherObject.songId).append(songTitle, otherObject.songTitle).append(artist, otherObject.artist).append(fee, otherObject.fee).append(otherFee, otherObject.otherFee).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("songId", songId).append("songTitle", songTitle).append("artist", artist).append("fee", fee).append("otherFee", otherFee).toString();
    }

}
-----------------------------------com.gen.test.model.Validation.java-----------------------------------

package com.gen.test.model;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -7051270745056882298L;
    private String firstname;
    private String lastname;
    private String pattern;
    private String length;
    private String minLength;
    private Long id;
    private AnEnum anEnum;
    private EnumChecks anotherEnum;
    private EnumChecks anotherEnumAgain;
    private List<Object> testDefArray = new ArrayList<Object>();
    private Object fileObject;
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}
-----------------------------------com.gen.test.BigStuffController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface BigStuffController {


    /**
     * No description
     * 
     */
    public ResponseEntity<BigStuff> getBigStuff();

}
-----------------------------------com.gen.test.BigStuffControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.BigStuff;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/bigStuff", produces = "application/json")
@Validated
public class BigStuffControllerDecorator
    implements BigStuffController
{

    @Autowired
    private BigStuffController bigStuffControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<BigStuff> getBigStuff() {
        return this.bigStuffControllerDelegate.getBigStuff();
    }

}
-----------------------------------com.gen.test.ManagerController.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ManagerController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Manager>> getManagers();

    /**
     * No description
     * 
     */
    public ResponseEntity<?> createManager(
        @Valid
        Manager manager);

    /**
     * No description
     * 
     */
    public ResponseEntity<?> deleteManagers();

}
-----------------------------------com.gen.test.ManagerControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import javax.validation.Valid;
import com.gen.test.model.Manager;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/managers", produces = "application/json")
@Validated
public class ManagerControllerDecorator
    implements ManagerController
{

    @Autowired
    private ManagerController managerControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Manager>> getManagers() {
        return this.managerControllerDelegate.getManagers();
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> createManager(
        @Valid
        @RequestBody
        Manager manager) {
        return this.managerControllerDelegate.createManager(manager);
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.DELETE)
    public ResponseEntity<?> deleteManagers() {
        return this.managerControllerDelegate.deleteManagers();
    }

}
-----------------------------------com.gen.test.NestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedArrayPersons", produces = "application/json")
@Validated
public class NestedArrayPersonControllerDecorator
    implements NestedArrayPersonController
{

    @Autowired
    private NestedArrayPersonController nestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedArrayPerson>> getNestedArrayPersons() {
        return this.nestedArrayPersonControllerDelegate.getNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.NestedNestedArrayPersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface NestedNestedArrayPersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons();

}
-----------------------------------com.gen.test.NestedNestedArrayPersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.NestedNestedArrayPerson;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/nestedNestedArrayPersons", produces = "application/json")
@Validated
public class NestedNestedArrayPersonControllerDecorator
    implements NestedNestedArrayPersonController
{

    @Autowired
    private NestedNestedArrayPersonController nestedNestedArrayPersonControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<NestedNestedArrayPerson>> getNestedNestedArrayPersons() {
        return this.nestedNestedArrayPersonControllerDelegate.getNestedNestedArrayPersons();
    }

}
-----------------------------------com.gen.test.PersonController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersons();

}
-----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/persons", produces = "application/json")
@Validated
public class PersonControllerDecorator
    implements PersonController
{

    @Autowired
    private PersonController personControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersons() {
        return this.personControllerDelegate.getPersons();
    }

}
-----------------------------------com.gen.test.PersonListController.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface PersonListController {


    /**
     * No description
     * 
     */
    public ResponseEntity<List<Person>> getPersonLists();

}
-----------------------------------com.gen.test.PersonListControllerDecorator.java-----------------------------------

package com.gen.test;

import java.util.List;
import com.gen.test.model.Person;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/personLists", produces = "application/json")
@Validated
public class PersonListControllerDecorator
    implements PersonListController
{

    @Autowired
    private PersonListController personListControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Person>> getPersonLists() {
        return this.personListControllerDelegate.getPersonLists();
    }

}
-----------------------------------com.gen.test.SongController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface SongController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Song> getSongs();

}
-----------------------------------com.gen.test.SongControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Song;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/songs", produces = "application/json")
@Validated
public class SongControllerDecorator
    implements SongController
{

    @Autowired
    private SongController songControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Song> getSongs() {
        return this.songControllerDelegate.getSongs();
    }

}
-----------------------------------com.gen.test.ValidationController.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.http.ResponseEntity;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
public interface ValidationController {


    /**
     * No description
     * 
     */
    public ResponseEntity<Validation> getValidations();

}
-----------------------------------com.gen.test.ValidationControllerDecorator.java-----------------------------------

package com.gen.test;

import com.gen.test.model.Validation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/validations", produces = "application/json")
@Validated
public class ValidationControllerDecorator
    implements ValidationController
{

    @Autowired
    private ValidationController validationControllerDelegate;

    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<Validation> getValidations() {
        return this.validationControllerDelegate.getValidations();
    }

}
-----------------------------------com.gen.foo.Department.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Department implements Serializable
{

    final static long serialVersionUID = -7264441174498415327L;
    private String name;

    /**
     * Creates a new Department.
     * 
     */
    public Department() {
        super();
    }

    /**
     * Creates a new Department.
     * 
     */
    public Department(String name) {
        super();
        this.name = name;
    }

    /**
     * Returns the name.
     * 
     * @return
     *     name
     */
    public String getName() {
        return name;
    }

    /**
     * Set the name.
     * 
     * @param name
     *     the new name
     */
    public void setName(String name) {
        this.name = name;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(name).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Department otherObject = ((Department) other);
        return new EqualsBuilder().append(name, otherObject.name).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("name", name).toString();
    }

}
-----------------------------------com.gen.foo.NestedArrayPerson.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class NestedArrayPerson
    extends Person
    implements Serializable
{

    final static long serialVersionUID = -7204951748633015646L;
    private List<Department> departmentList = new ArrayList<Department>();

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson() {
        super();
    }

    /**
     * Creates a new NestedArrayPerson.
     * 
     */
    public NestedArrayPerson(String firstname, String lastname, Long id, List<Department> departmentList) {
        super(firstname, lastname, id);
        this.departmentList = departmentList;
    }

    /**
     * Returns the departmentList.
     * 
     * @return
     *     departmentList
     */
    public List<Department> getDepartmentList() {
        return departmentList;
    }

    /**
     * Set the departmentList.
     * 
     * @param departmentList
     *     the new departmentList
     */
    public void setDepartmentList(List<Department> departmentList) {
        this.departmentList = departmentList;
    }

    public int hashCode() {
        return new HashCodeBuilder().appendSuper(super.hashCode()).append(departmentList).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        NestedArrayPerson otherObject = ((NestedArrayPerson) other);
        return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(departmentList, otherObject.departmentList).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).appendSuper(super.toString()).append("departmentList", departmentList).toString();
    }

}
-----------------------------------com.gen.foo.Person.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Person implements Serializable
{

    final static long serialVersionUID = -7277661044526855648L;
    private String firstname;
    private String lastname;
    private Long id;

    /**
     * Creates a new Person.
     * 
     */
    public Person() {
        super();
    }

    /**
     * Creates a new Person.
     * 
     */
    public Person(String firstname, String lastname, Long id) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.id = id;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(id).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Person otherObject = ((Person) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(id, otherObject.id).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("id", id).toString();
    }

}

2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.foo.Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: pattern to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: length to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: minLength to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to Validation
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.AnEnum
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: blue to AnEnum
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: red to AnEnum
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: green to AnEnum
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: anEnum to Validation
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: one to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: two to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: three to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: value_with_underscore to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: value with space to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: testfee to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Adding field: fee to EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnum to Validation
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.foo.EnumChecks
2017-12-19 14:09:40 DEBUG [pojo.EnumBuilder] - Enum com.gen.foo.EnumChecks already exists. Reusing it!
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: anotherEnumAgain to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: testDefArray to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: fileObject to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: dateO to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: timeO to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: dateTO to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: dateT to Validation
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Validation
-----------------------------------com.gen.foo.AnEnum.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum AnEnum {

    @JsonProperty("blue")
    BLUE("blue"),
    @JsonProperty("red")
    RED("red"),
    @JsonProperty("green")
    GREEN("green");
    private final String value;
    private final static Map<String, AnEnum> VALUE_CACHE = new HashMap<String, AnEnum>();

    static {
        for (AnEnum c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private AnEnum(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static AnEnum fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.EnumChecks.java-----------------------------------

package com.gen.foo;

import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonProperty;

public enum EnumChecks {

    @JsonProperty("one")
    ONE("one"),
    @JsonProperty("two")
    TWO("two"),
    @JsonProperty("three")
    THREE("three"),
    @JsonProperty("value_with_underscore")
    VALUE_WITH_UNDERSCORE("value_with_underscore"),
    @JsonProperty("value with space")
    VALUE_WITH_SPACE("value with space"),
    @JsonProperty("testfee")
    TESTFEE("testfee"),
    @JsonProperty("fee")
    FEE("fee");
    private final String value;
    private final static Map<String, EnumChecks> VALUE_CACHE = new HashMap<String, EnumChecks>();

    static {
        for (EnumChecks c: values()) {
            VALUE_CACHE.put(c.value, c);
        }
    }

    private EnumChecks(String value) {
        this.value = value;
    }

    public String value() {
        return this.value;
    }

    public static EnumChecks fromValue(String value) {
        return VALUE_CACHE.get(value);
    }

    @Override
    public String toString() {
        return this.value;
    }

}
-----------------------------------com.gen.foo.Validation.java-----------------------------------

package com.gen.foo;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import com.fasterxml.jackson.annotation.JsonFormat;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Validation implements Serializable
{

    final static long serialVersionUID = -8122080337619632532L;
    private String firstname;
    @NotNull
    private String lastname;
    @NotNull
    @Pattern(regexp = "[0-9|-]+")
    private String pattern;
    @NotNull
    @Size(min = 1, max = 3)
    private String length;
    @Size(min = 5)
    private String minLength;
    @NotNull
    @DecimalMin("1.0")
    @DecimalMax("42.3")
    private Long id;
    @NotNull
    private AnEnum anEnum;
    @NotNull
    private EnumChecks anotherEnum;
    @NotNull
    private EnumChecks anotherEnumAgain;
    @NotNull
    private List<Object> testDefArray = new ArrayList<Object>();
    @NotNull
    private Object fileObject;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd")
    private Date dateO;
    @NotNull
    @JsonFormat(pattern = "HH:mm:ss")
    private Date timeO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss")
    private Date dateTO;
    @NotNull
    @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ssXXX")
    private Date dateT;
    @NotNull
    @JsonFormat(pattern = "EEE, dd MMM yyyy HH:mm:ss z")
    private Date datetimeRFC2616;

    /**
     * Creates a new Validation.
     * 
     */
    public Validation() {
        super();
    }

    /**
     * Creates a new Validation.
     * 
     */
    public Validation(String firstname, String lastname, String pattern, String length, String minLength, Long id, AnEnum anEnum, EnumChecks anotherEnum, EnumChecks anotherEnumAgain, List<Object> testDefArray, Object fileObject, Date dateO, Date timeO, Date dateTO, Date dateT, Date datetimeRFC2616) {
        super();
        this.firstname = firstname;
        this.lastname = lastname;
        this.pattern = pattern;
        this.length = length;
        this.minLength = minLength;
        this.id = id;
        this.anEnum = anEnum;
        this.anotherEnum = anotherEnum;
        this.anotherEnumAgain = anotherEnumAgain;
        this.testDefArray = testDefArray;
        this.fileObject = fileObject;
        this.dateO = dateO;
        this.timeO = timeO;
        this.dateTO = dateTO;
        this.dateT = dateT;
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    /**
     * Returns the firstname.
     * 
     * @return
     *     firstname
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     * Set the firstname.
     * 
     * @param firstname
     *     the new firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     * Returns the lastname.
     * 
     * @return
     *     lastname
     */
    public String getLastname() {
        return lastname;
    }

    /**
     * Set the lastname.
     * 
     * @param lastname
     *     the new lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     * Returns the pattern.
     * 
     * @return
     *     pattern
     */
    public String getPattern() {
        return pattern;
    }

    /**
     * Set the pattern.
     * 
     * @param pattern
     *     the new pattern
     */
    public void setPattern(String pattern) {
        this.pattern = pattern;
    }

    /**
     * Returns the length.
     * 
     * @return
     *     length
     */
    public String getLength() {
        return length;
    }

    /**
     * Set the length.
     * 
     * @param length
     *     the new length
     */
    public void setLength(String length) {
        this.length = length;
    }

    /**
     * Returns the minLength.
     * 
     * @return
     *     minLength
     */
    public String getMinLength() {
        return minLength;
    }

    /**
     * Set the minLength.
     * 
     * @param minLength
     *     the new minLength
     */
    public void setMinLength(String minLength) {
        this.minLength = minLength;
    }

    /**
     * Returns the id.
     * 
     * @return
     *     id
     */
    public Long getId() {
        return id;
    }

    /**
     * Set the id.
     * 
     * @param id
     *     the new id
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Returns the anEnum.
     * 
     * @return
     *     anEnum
     */
    public AnEnum getAnEnum() {
        return anEnum;
    }

    /**
     * Set the anEnum.
     * 
     * @param anEnum
     *     the new anEnum
     */
    public void setAnEnum(AnEnum anEnum) {
        this.anEnum = anEnum;
    }

    /**
     * Returns the anotherEnum.
     * 
     * @return
     *     anotherEnum
     */
    public EnumChecks getAnotherEnum() {
        return anotherEnum;
    }

    /**
     * Set the anotherEnum.
     * 
     * @param anotherEnum
     *     the new anotherEnum
     */
    public void setAnotherEnum(EnumChecks anotherEnum) {
        this.anotherEnum = anotherEnum;
    }

    /**
     * Returns the anotherEnumAgain.
     * 
     * @return
     *     anotherEnumAgain
     */
    public EnumChecks getAnotherEnumAgain() {
        return anotherEnumAgain;
    }

    /**
     * Set the anotherEnumAgain.
     * 
     * @param anotherEnumAgain
     *     the new anotherEnumAgain
     */
    public void setAnotherEnumAgain(EnumChecks anotherEnumAgain) {
        this.anotherEnumAgain = anotherEnumAgain;
    }

    /**
     * Returns the testDefArray.
     * 
     * @return
     *     testDefArray
     */
    public List<Object> getTestDefArray() {
        return testDefArray;
    }

    /**
     * Set the testDefArray.
     * 
     * @param testDefArray
     *     the new testDefArray
     */
    public void setTestDefArray(List<Object> testDefArray) {
        this.testDefArray = testDefArray;
    }

    /**
     * Returns the fileObject.
     * 
     * @return
     *     fileObject
     */
    public Object getFileObject() {
        return fileObject;
    }

    /**
     * Set the fileObject.
     * 
     * @param fileObject
     *     the new fileObject
     */
    public void setFileObject(Object fileObject) {
        this.fileObject = fileObject;
    }

    /**
     * Returns the dateO.
     * 
     * @return
     *     dateO
     */
    public Date getDateO() {
        return dateO;
    }

    /**
     * Set the dateO.
     * 
     * @param dateO
     *     the new dateO
     */
    public void setDateO(Date dateO) {
        this.dateO = dateO;
    }

    /**
     * Returns the timeO.
     * 
     * @return
     *     timeO
     */
    public Date getTimeO() {
        return timeO;
    }

    /**
     * Set the timeO.
     * 
     * @param timeO
     *     the new timeO
     */
    public void setTimeO(Date timeO) {
        this.timeO = timeO;
    }

    /**
     * Returns the dateTO.
     * 
     * @return
     *     dateTO
     */
    public Date getDateTO() {
        return dateTO;
    }

    /**
     * Set the dateTO.
     * 
     * @param dateTO
     *     the new dateTO
     */
    public void setDateTO(Date dateTO) {
        this.dateTO = dateTO;
    }

    /**
     * Returns the dateT.
     * 
     * @return
     *     dateT
     */
    public Date getDateT() {
        return dateT;
    }

    /**
     * Set the dateT.
     * 
     * @param dateT
     *     the new dateT
     */
    public void setDateT(Date dateT) {
        this.dateT = dateT;
    }

    /**
     * Returns the datetimeRFC2616.
     * 
     * @return
     *     datetimeRFC2616
     */
    public Date getDatetimeRFC2616() {
        return datetimeRFC2616;
    }

    /**
     * Set the datetimeRFC2616.
     * 
     * @param datetimeRFC2616
     *     the new datetimeRFC2616
     */
    public void setDatetimeRFC2616(Date datetimeRFC2616) {
        this.datetimeRFC2616 = datetimeRFC2616;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstname).append(lastname).append(pattern).append(length).append(minLength).append(id).append(anEnum).append(anotherEnum).append(anotherEnumAgain).append(testDefArray).append(fileObject).append(dateO).append(timeO).append(dateTO).append(dateT).append(datetimeRFC2616).toHashCode();
    }

    public boolean equals(java.lang.Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Validation otherObject = ((Validation) other);
        return new EqualsBuilder().append(firstname, otherObject.firstname).append(lastname, otherObject.lastname).append(pattern, otherObject.pattern).append(length, otherObject.length).append(minLength, otherObject.minLength).append(id, otherObject.id).append(anEnum, otherObject.anEnum).append(anotherEnum, otherObject.anotherEnum).append(anotherEnumAgain, otherObject.anotherEnumAgain).append(testDefArray, otherObject.testDefArray).append(fileObject, otherObject.fileObject).append(dateO, otherObject.dateO).append(timeO, otherObject.timeO).append(dateTO, otherObject.dateTO).append(dateT, otherObject.dateT).append(datetimeRFC2616, otherObject.datetimeRFC2616).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstname", firstname).append("lastname", lastname).append("pattern", pattern).append("length", length).append("minLength", minLength).append("id", id).append("anEnum", anEnum).append("anotherEnum", anotherEnum).append("anotherEnumAgain", anotherEnumAgain).append("testDefArray", testDefArray).append("fileObject", fileObject).append("dateO", dateO).append("timeO", timeO).append("dateTO", dateTO).append("dateT", dateT).append("datetimeRFC2616", datetimeRFC2616).toString();
    }

}

Tests run: 15, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.356 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue169RulesTest
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.13 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue158RulesTest
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: User
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.User
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: firstName to User
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: lastName to User
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.091 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue208RulesTest
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Product
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to Product
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: Group
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Group
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to Group
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: name to Group
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: groups to Product
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.ProductUpdate
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: Product
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: id to ProductUpdate
2017-12-19 14:09:40 DEBUG [pojo.ObjectTypeInterpreter] - mime: Group
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: groups to ProductUpdate
2017-12-19 14:09:40 DEBUG [pojo.PojoBuilder] - Adding field: locationId to ProductUpdate
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.273 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.184 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesTest
2017-12-19 14:09:40 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:41 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:41 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:41 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Manager
2017-12-19 14:09:41 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Manager
2017-12-19 14:09:41 DEBUG [pojo.PojoBuilder] - Adding field: departman to Manager
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.283 sec <<< FAILURE!
applySpring4ControllerInterfaceWithShortcutAnnotationsRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest)  Time elapsed: 0.219 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...parser v.0.10.13)
 *[
 */
@RestController
@Validated
@RequestMapping(value = "/api/organization/persons/managers", produces = "application/json")
public interface PersonManagerController {


    /**
     * No description
     *
     */
    @GetMapping
    public ResponseEntity<List<Manager>> getPersonsManagers();

    /**
     * No description
     *
     */
    @PostMapping
    public ResponseEntity<Manager> createPersonsManager(
        @Valid
        @RequestBody
        Manager manager);

    /**
     * No description
     *
     */
    @PatchMapping
    public ResponseEntity<Manager> modifyPersonsManagers(
        @RequestBody
        Manager manager);

    /**
     * No description
     *
     */
    @PutMapping("/{id}")
    public ResponseEntity<?> updateById(
        @PathVariable
        String id,
        @Valid
        @RequestBody
        Manager manager);

    /**
     * No description
     *
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<?> delete]ById(
        @PathV...> but was:<...parser v.0.10.13)
 *[ 
 */
@RestController
@Validated
@RequestMapping(value = "/api/organization/persons/managers", produces = "application/json")
public interface PersonManagerController {


    /**
     * No description
     * 
     */
    @GetMapping
    public ResponseEntity<List<Manager>> getPersonsManagers();

    /**
     * No description
     * 
     */
    @PostMapping
    public ResponseEntity<Manager> createPersonsManager(
        @Valid
        @RequestBody
        Manager manager);

    /**
     * No description
     * 
     */
    @PatchMapping
    public ResponseEntity<Manager> modifyPersonsManagers(
        @RequestBody
        Manager manager);

    /**
     * No description
     * 
     */
    @PutMapping("/{id}")
    public ResponseEntity<?> updateManagerById(
        @PathVariable
        String id,
        @Valid
        @RequestBody
        Manager manager);

    /**
     * No description
     * 
     */
    @DeleteMapping("/{id}")
    public ResponseEntity<?> deleteManager]ById(
        @PathV...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.phoenixnap.oss.ramlapisync.generation.rules.AbstractRuleTestBase.verifyGeneratedCode(AbstractRuleTestBase.java:124)
	at com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest.applySpring4ControllerInterfaceWithShortcutAnnotationsRule_shouldCreate_validCode(ShortcutMappingsTest.java:38)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.phoenixnap.oss.ramlapisync.generation.rules.PatternConstraintTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.019 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.064 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ClassFieldDeclarationRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.049 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.MethodParamsRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.066 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ImplementsControllerInferfaceRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.032 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.MethodCommentRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.033 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ClassCommentRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerClassDeclarationRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.041 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.DelegatingMethodBodyRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.015 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.PackageRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.063 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerInterfaceDeclarationRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.076 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ImplementMeMethodBodyRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.basic.ControllerMethodSignatureRuleTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.043 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue175RulesTest
2017-12-19 14:09:41 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.124 sec <<< FAILURE!
applySpring4ControllerStubRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.Issue175RulesTest)  Time elapsed: 0.073 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ntity<?> getStringBy[Id(
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 4, max = 14)
        @PathVariable(name = "uri_string_param", required = false)
        Optional<String> uriStringParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = {
        "/integer/{uri_int_param}",
        "/integer/"
    }, method = RequestMethod.GET)
    public ResponseEntity<?> getIntegerByUri_int_param(
        @Min(14L)
        @Max(24L)
        @PathVariable(name = "uri_int_param", required = false)
        Optional<Long> uriIntParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

}
-----------------------------------com.gen.test.CResourceController.java-----------------------------------

package com.gen.test;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/c_resource", produces = "application/json")
@Validated
public class CResourceController {


    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> updateCResource(
        @Min(15L)
        @Max(25L)
        @RequestParam(name = "form_int_param", required = false)
        Long formIntParam,
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 5, max = 15)
        @RequestParam(name = "form_string_param", required = false)
        String formStringParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

}]> but was:<...ntity<?> getStringBy[Uri_string_param(
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 4, max = 14)
        @PathVariable(name = "uri_string_param", required = false)
        Optional<String> uriStringParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = {
        "/integer/{uri_int_param}",
        "/integer/"
    }, method = RequestMethod.GET)
    public ResponseEntity<?> getIntegerByUri_int_param(
        @Min(14L)
        @Max(24L)
        @PathVariable(name = "uri_int_param", required = false)
        Optional<Long> uriIntParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

}
-----------------------------------com.gen.test.CResourceController.java-----------------------------------

package com.gen.test;

import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@RequestMapping(value = "/api/c_resource", produces = "application/json")
@Validated
public class CResourceController {


    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseEntity<?> updateCResource(
        @Min(15L)
        @Max(25L)
        @RequestParam(name = "form_int_param", required = false)
        Long formIntParam,
        @Pattern(regexp = "^[a-z]+$")
        @Size(min = 5, max = 15)
        @RequestParam(name = "form_string_param", required = false)
        String formStringParam) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

}
]>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.phoenixnap.oss.ramlapisync.generation.rules.AbstractRuleTestBase.verifyGeneratedCode(AbstractRuleTestBase.java:124)
	at com.phoenixnap.oss.ramlapisync.generation.rules.Issue175RulesTest.applySpring4ControllerStubRule_shouldCreate_validCode(Issue175RulesTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue210RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.ObjectTypeInterpreter] - mime: User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: nickNames to User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: orderNumbers to User
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.037 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.RamlSchemaWithInheritanceTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Person
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Person
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: age to Person
2017-12-19 14:09:42 DEBUG [pojo.ObjectTypeInterpreter] - mime: User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.User
2017-12-19 14:09:42 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: firstName to User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: lastName to User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: age to User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: username to User
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue177RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.171 sec <<< FAILURE!
applySpring4ControllerStubRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.Issue177RulesTest)  Time elapsed: 0.143 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...seEntity<?> getStrBy[Id(
        @PathVariable(name = "uri_string_param")
        String uriStrDisplayName) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/int/{uri_int_param}", method = RequestMethod.GET)
    public ResponseEntity<?> getIntById](
        @PathVaria...> but was:<...seEntity<?> getStrBy[Uri_string_param(
        @PathVariable(name = "uri_string_param")
        String uriStrDisplayName) {
        return null; //TODO Autogenerated Method Stub. Implement me please.
    }

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/int/{uri_int_param}", method = RequestMethod.GET)
    public ResponseEntity<?> getIntByUri_int_param](
        @PathVaria...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.phoenixnap.oss.ramlapisync.generation.rules.AbstractRuleTestBase.verifyGeneratedCode(AbstractRuleTestBase.java:124)
	at com.phoenixnap.oss.ramlapisync.generation.rules.Issue177RulesTest.applySpring4ControllerStubRule_shouldCreate_validCode(Issue177RulesTest.java:34)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Manager
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Manager
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: departman to Manager
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.118 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue161RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.TestT
2017-12-19 14:09:42 DEBUG [pojo.EnumBuilder] - Adding field: A to TestT
2017-12-19 14:09:42 DEBUG [pojo.EnumBuilder] - Adding field: B to TestT
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue181RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: firstName to User
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: lastName to User
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.087 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.044 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.056 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue183RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: name to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: dateOnly to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: timeOnly to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: datetimeOnly to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: datetimeNoFormat to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC3339 to Data
2017-12-19 14:09:42 DEBUG [pojo.PojoBuilder] - Adding field: datetimeRFC2616 to Data
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.103 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:42 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.093 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest
2017-12-19 14:09:42 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema raml/Person.json
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema raml/Person.json
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema sample_unit.json
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: id to Person
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: Manager
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Manager
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: firstname to Manager
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: lastname to Manager
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: id to Manager
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: Department
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Department
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: name to Department
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: department to Manager
2017-12-19 14:09:43 DEBUG [pojo.EnumBuilder] - Creating Enum com.gen.test.model.ClearanceLevel
2017-12-19 14:09:43 DEBUG [pojo.EnumBuilder] - Adding field: low to ClearanceLevel
2017-12-19 14:09:43 DEBUG [pojo.EnumBuilder] - Adding field: high to ClearanceLevel
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: clearanceLevel to Manager
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: NestedArrayPerson
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.NestedArrayPerson
2017-12-19 14:09:43 DEBUG [pojo.ObjectTypeInterpreter] - mime: Person
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: firstname to NestedArrayPerson
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: lastname to NestedArrayPerson
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: id to NestedArrayPerson
2017-12-19 14:09:43 DEBUG [pojo.PojoBuilder] - Adding field: departmentList to NestedArrayPerson
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.28 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue173RulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.023 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesHtppHeadersTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.033 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.spring.SpringRulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.067 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.066 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.05 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue204RulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.156 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.pojogen.JsonSchema2PojoTest
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema pojogen/address.schema
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema classpath:pojogen/nested.schema
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema pojogen/B.json
2017-12-19 14:09:43 DEBUG [naming.SchemaHelper] - Referenced Schema contains self $refs or not found in classpath. Regenerating model withouth classpath: for Accounts
2017-12-19 14:09:43 INFO [naming.SchemaHelper] - Loading referenced schema pojogen/B.json
Tests run: 11, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.32 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest
2017-12-19 14:09:43 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Booking
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Booking
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: firstName to Booking
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: lastName to Booking
Tests run: 3, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.276 sec <<< FAILURE!
testWithMatchingResourseNameAndPathVariable(com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest)  Time elapsed: 0.101 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<... new Booking.
     *[
     */
    public Booking() {
        super();
    }

    /**
     * Creates a new Booking.
     *
     */
    public Booking(String firstName, String lastName) {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /**
     * Returns the firstName.
     *
     * @return
     *     firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the firstName.
     *
     * @param firstName
     *     the new firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Returns the lastName.
     *
     * @return
     *     lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Set the lastName.
     *
     * @param lastName
     *     the new lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstName).append(lastName).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Booking otherObject = ((Booking) other);
        return new EqualsBuilder().append(firstName, otherObject.firstName).append(lastName, otherObject.lastName).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstName", firstName).append("lastName", lastName).toString();
    }

}
-----------------------------------com.gen.test.BookingController.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.List;
import com.gen.test.model.Booking;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 *
 */
@RestController
@Validated
@RequestMapping("/api/bookings")
public interface BookingController {


    /**
     * No description
     *
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Booking>> getBookings();

    /**
     * No description
     *
     */
    @RequestMapping(value = "/{bookingRef}", method = RequestMethod.GET)
    public ResponseEntity<Booking> getBookingById](
        @PathVaria...> but was:<... new Booking.
     *[ 
     */
    public Booking() {
        super();
    }

    /**
     * Creates a new Booking.
     * 
     */
    public Booking(String firstName, String lastName) {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /**
     * Returns the firstName.
     * 
     * @return
     *     firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the firstName.
     * 
     * @param firstName
     *     the new firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Returns the lastName.
     * 
     * @return
     *     lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Set the lastName.
     * 
     * @param lastName
     *     the new lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstName).append(lastName).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Booking otherObject = ((Booking) other);
        return new EqualsBuilder().append(firstName, otherObject.firstName).append(lastName, otherObject.lastName).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstName", firstName).append("lastName", lastName).toString();
    }

}
-----------------------------------com.gen.test.BookingController.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.List;
import com.gen.test.model.Booking;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@Validated
@RequestMapping("/api/bookings")
public interface BookingController {


    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Booking>> getBookings();

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{bookingRef}", method = RequestMethod.GET)
    public ResponseEntity<Booking> getBookingByRef](
        @PathVaria...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.phoenixnap.oss.ramlapisync.generation.rules.AbstractRuleTestBase.verifyGeneratedCode(AbstractRuleTestBase.java:124)
	at com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest.testWithMatchingResourseNameAndPathVariable(Issue212RulesTest.java:35)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

testWithLongRootUrl(com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest)  Time elapsed: 0.064 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<... new Booking.
     *[
     */
    public Booking() {
        super();
    }

    /**
     * Creates a new Booking.
     *
     */
    public Booking(String firstName, String lastName) {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /**
     * Returns the firstName.
     *
     * @return
     *     firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the firstName.
     *
     * @param firstName
     *     the new firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Returns the lastName.
     *
     * @return
     *     lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Set the lastName.
     *
     * @param lastName
     *     the new lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstName).append(lastName).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Booking otherObject = ((Booking) other);
        return new EqualsBuilder().append(firstName, otherObject.firstName).append(lastName, otherObject.lastName).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstName", firstName).append("lastName", lastName).toString();
    }

}
-----------------------------------com.gen.test.BookingController.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.List;
import com.gen.test.model.Booking;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 *
 */
@RestController
@Validated
@RequestMapping("/api/customers/{customerId}/bookings")
public interface BookingController {


    /**
     * No description
     *
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Booking>> getCustomerBookings(
        @PathVariable
        BigDecimal customerId);

    /**
     * No description
     *
     */
    @RequestMapping(value = "/{bookingRef}", method = RequestMethod.GET)
    public ResponseEntity<Booking> getByBooking]Ref(
        @PathVa...> but was:<... new Booking.
     *[ 
     */
    public Booking() {
        super();
    }

    /**
     * Creates a new Booking.
     * 
     */
    public Booking(String firstName, String lastName) {
        super();
        this.firstName = firstName;
        this.lastName = lastName;
    }

    /**
     * Returns the firstName.
     * 
     * @return
     *     firstName
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the firstName.
     * 
     * @param firstName
     *     the new firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * Returns the lastName.
     * 
     * @return
     *     lastName
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Set the lastName.
     * 
     * @param lastName
     *     the new lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public int hashCode() {
        return new HashCodeBuilder().append(firstName).append(lastName).toHashCode();
    }

    public boolean equals(Object other) {
        if (other == null) {
            return false;
        }
        if (other == this) {
            return true;
        }
        if (this.getClass()!= other.getClass()) {
            return false;
        }
        Booking otherObject = ((Booking) other);
        return new EqualsBuilder().append(firstName, otherObject.firstName).append(lastName, otherObject.lastName).isEquals();
    }

    public String toString() {
        return new ToStringBuilder(this).append("firstName", firstName).append("lastName", lastName).toString();
    }

}
-----------------------------------com.gen.test.BookingController.java-----------------------------------

package com.gen.test;

import java.math.BigDecimal;
import java.util.List;
import com.gen.test.model.Booking;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


/**
 * No description
 * (Generated with springmvc-raml-parser v.0.10.13)
 * 
 */
@RestController
@Validated
@RequestMapping("/api/customers/{customerId}/bookings")
public interface BookingController {


    /**
     * No description
     * 
     */
    @RequestMapping(value = "", method = RequestMethod.GET)
    public ResponseEntity<List<Booking>> getCustomerBookings(
        @PathVariable
        BigDecimal customerId);

    /**
     * No description
     * 
     */
    @RequestMapping(value = "/{bookingRef}", method = RequestMethod.GET)
    public ResponseEntity<Booking> getBookingBy]Ref(
        @PathVa...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at org.junit.Assert.assertEquals(Assert.java:144)
	at com.phoenixnap.oss.ramlapisync.generation.rules.AbstractRuleTestBase.verifyGeneratedCode(AbstractRuleTestBase.java:124)
	at com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest.testWithLongRootUrl(Issue212RulesTest.java:24)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)
	at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)

Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue172RulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.EventCreate
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: eventName to EventCreate
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: EventPayload
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.EventPayload
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: eventPayload to EventCreate
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.MultipartMimeRequestTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.047 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue76RulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.027 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue176RulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.089 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.201 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.084 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue199RulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.EmployeeRq
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: Employee
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.Employee
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: name to Employee
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: skill to Employee
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: employees to EmployeeRq
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.EmployeeRs
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: EmployeeExtended
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Creating class com.gen.test.model.EmployeeExtended
2017-12-19 14:09:44 DEBUG [pojo.ObjectTypeInterpreter] - mime: Employee
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: name to EmployeeExtended
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: skill to EmployeeExtended
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: job to EmployeeExtended
2017-12-19 14:09:44 DEBUG [pojo.PojoBuilder] - Adding field: employees to EmployeeRs
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.171 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue156RulesTest
2017-12-19 14:09:44 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:44 ERROR [raml.RamlModelFactoryOfFactories] - Loaded RAML has validation errors: Unexpected key 'description'. Options are : All of :Integer,Maximum value -- issue-156-normal_invalidity.raml [line=8, col=7],Unexpected key 'body'. Options are : All of :Integer,Maximum value -- issue-156-normal_invalidity.raml [line=9, col=7]
2017-12-19 14:09:44 ERROR [raml.RamlModelFactoryOfFactories] - Loaded RAML has validation errors: Unsupported version 0.5
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.031 sec
Running com.phoenixnap.oss.ramlapisync.generation.rules.Issue215RulesTest
2017-12-19 14:09:45 INFO [raml.RamlModelFactoryOfFactories] - RJP08V1RamlModelFactory Instantiated
2017-12-19 14:09:45 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:45 WARN [spring.SpringRequestMappingMethodAnnotationRule] - 2 optional path variables (uriParameters) found which can lead to unpredictable results. Please consider refactoring your API!
2017-12-19 14:09:45 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
2017-12-19 14:09:45 INFO [raml.RamlModelFactoryOfFactories] - RJP10V2RamlModelFactory Instantiated
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.201 sec

Results :

Failed tests:   applySpring4ControllerInterfaceWithShortcutAnnotationsRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest): expected:<...parser v.0.10.13)(..)
  applySpring4ControllerStubRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.Issue175RulesTest): expected:<...ntity<?> getStringBy[Id((..)
  applySpring4ControllerStubRule_shouldCreate_validCode(com.phoenixnap.oss.ramlapisync.generation.rules.Issue177RulesTest): expected:<...seEntity<?> getStrBy[Id((..)
  testWithMatchingResourseNameAndPathVariable(com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest): expected:<... new Booking.(..)
  testWithLongRootUrl(com.phoenixnap.oss.ramlapisync.generation.rules.Issue212RulesTest): expected:<... new Booking.(..)

Tests run: 226, Failures: 5, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Spring MVC to RAML Synchronizer .................... SUCCESS [  0.004 s]
[INFO] Spring MVC to RAML Synchronizer Annotations ........ SUCCESS [  2.538 s]
[INFO] Spring MVC to RAML Synchronizer Parser ............. FAILURE [ 21.232 s]
[INFO] Spring MVC to RAML Synchronizer Maven Plugin ....... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25.232 s
[INFO] Finished at: 2017-12-19T14:09:45+01:00
[INFO] Final Memory: 27M/598M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project springmvc-raml-parser: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/phoenixnap/springmvc-raml-plugin/318593331/springmvc-raml-parser/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :springmvc-raml-parser
