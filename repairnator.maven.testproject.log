[INFO] Scanning for projects...
[INFO] Computing target platform for MavenProject: com.google.googlejavaformat:google-java-format-eclipse-plugin:1.4.0 @ /root/workspace/google/google-java-format/214566402/eclipse_plugin/pom.xml
[INFO] Fetching p2.index from http://download.eclipse.org/releases/mars/
[INFO] Fetching p2.index from http://download.eclipse.org/releases/mars/
[INFO] Adding repository http://download.eclipse.org/releases/mars
[INFO] Fetching p2.index from http://download.eclipse.org/technology/epp/packages/mars/
[INFO] Fetching p2.index from http://download.eclipse.org/releases/mars/201506241002/
[INFO] Fetching p2.index from http://download.eclipse.org/releases/mars/201510021000/
[INFO] Fetching p2.index from http://download.eclipse.org/releases/mars/201602261000/
[INFO] Resolving dependencies of MavenProject: com.google.googlejavaformat:google-java-format-eclipse-plugin:1.4.0 @ /root/workspace/google/google-java-format/214566402/eclipse_plugin/pom.xml
[WARNING] The following locally built units have been used to resolve project dependencies:
[WARNING]   google-java-format-eclipse-plugin/1.4.0
[INFO] Resolving class path of MavenProject: com.google.googlejavaformat:google-java-format-eclipse-plugin:1.4.0 @ /root/workspace/google/google-java-format/214566402/eclipse_plugin/pom.xml
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Google Java Format Parent
[INFO] Google Java Format
[INFO] google-java-format Plugin for Eclipse 4.5+
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Google Java Format Parent 1.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ google-java-format-parent ---
[INFO] Skipping Rule Enforcement.
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Google Java Format 1.4-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-enforcer-plugin:1.0:enforce (enforce-maven) @ google-java-format ---
[INFO] Skipping Rule Enforcement.
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:resources (default-resources) @ google-java-format ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/google/google-java-format/214566402/core/src/main/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ google-java-format ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:3.0.1:testResources (default-testResources) @ google-java-format ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 288 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ google-java-format ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.18:test (default-test) @ google-java-format ---
[INFO] Surefire report directory: /root/workspace/google/google-java-format/214566402/core/target/surefire-reports
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18/surefire-junit4-2.18.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18/surefire-junit4-2.18.pom (3 KB at 4.1 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.18/surefire-providers-2.18.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.18/surefire-providers-2.18.pom (3 KB at 66.4 KB/sec)
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18/surefire-junit4-2.18.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.18/surefire-junit4-2.18.jar (67 KB at 566.9 KB/sec)

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running com.google.googlejavaformat.java.MainTest
Tests run: 8, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 1.97 sec <<< FAILURE! - in com.google.googlejavaformat.java.MainTest
javadoc(com.google.googlejavaformat.java.MainTest)  Time elapsed: 1.241 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ed do eiusmod tempor[
 *    ] incididunt ut labor...> but was:<...ed do eiusmod tempor[] incididunt ut labor...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.MainTest.javadoc(MainTest.java:155)

Running com.google.googlejavaformat.java.JavadocFormattingTest
Tests run: 57, Failures: 10, Errors: 0, Skipped: 0, Time elapsed: 0.451 sec <<< FAILURE! - in com.google.googlejavaformat.java.JavadocFormattingTest
listItemWrap(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<... 234567890 234567890[
 *      ] 234567890
 * </ul>
...> but was:<... 234567890 234567890[] 234567890
 * </ul>
...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.listItemWrap(JavadocFormattingTest.java:798)

paragraphTagNewlines(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...tempor incididunt ut[
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   *] anim id est laborum...> but was:<...tempor incididunt ut[ labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit] anim id est laborum...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.paragraphTagNewlines(JavadocFormattingTest.java:1148)

unicodeCharacterCountArguableBug(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12
 * 456789𝄞12 456789𝄞
] */
class Test {}
> but was:</**[ 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.unicodeCharacterCountArguableBug(JavadocFormattingTest.java:906)

multilineWrap(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.008 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 45678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 45678901] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.multilineWrap(JavadocFormattingTest.java:448)

joinedAtSign(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.011 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 456789012 @5678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 @5678901] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.joinedAtSign(JavadocFormattingTest.java:518)

oneLinerWouldBe101(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 5678
] */
class Test {}
> but was:</**[ 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 5678] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.oneLinerWouldBe101(JavadocFormattingTest.java:428)

joinedTokens(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 4<b>8901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 4<b>8901] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.joinedTokens(JavadocFormattingTest.java:495)

paramsContinuationIndented(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<... 567890123 567890123[
 *    ] 567890123
 * @param...> but was:<... 567890123 567890123[] 567890123
 * @param...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.paramsContinuationIndented(JavadocFormattingTest.java:969)

links(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.018 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...12 456789012 4567 <a[
 * href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 456789 <a href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 4567890 <a href=foo>
 * ]foo</a>.
 *
 * <p><a...> but was:<...12 456789012 4567 <a[ href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 456789 <a href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 4567890 <a href=foo>]foo</a>.
 *
 * <p><a...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.links(JavadocFormattingTest.java:637)

joinedMultipleAtSign(com.google.googlejavaformat.java.JavadocFormattingTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 456789012 @56789012 @5678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 @56789012 @5678901] */
class Test {}
>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.JavadocFormattingTest.doFormatTest(JavadocFormattingTest.java:1342)
	at com.google.googlejavaformat.java.JavadocFormattingTest.joinedMultipleAtSign(JavadocFormattingTest.java:538)

Running com.google.googlejavaformat.java.RemoveUnusedImportsTest
Tests run: 22, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.187 sec - in com.google.googlejavaformat.java.RemoveUnusedImportsTest
Running com.google.googlejavaformat.java.FormatterTest
Tests run: 23, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.405 sec <<< FAILURE! - in com.google.googlejavaformat.java.FormatterTest
testFormatAosp(com.google.googlejavaformat.java.FormatterTest)  Time elapsed: 0.019 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...EndUpGettingWrapped([
                    ]because, it, is, jus...> but was:<...EndUpGettingWrapped([]because, it, is, jus...>
	at com.google.common.truth.Platform.comparisonFailure(Platform.java:133)
	at com.google.common.truth.Truth$1.failComparing(Truth.java:77)
	at com.google.common.truth.StringSubject.isEqualTo(StringSubject.java:69)
	at com.google.googlejavaformat.java.FormatterTest.testFormatAosp(FormatterTest.java:72)

Running com.google.googlejavaformat.java.PartialFormattingTest
Tests run: 156, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 3.531 sec <<< FAILURE! - in com.google.googlejavaformat.java.PartialFormattingTest
blankAndComment[0](com.google.googlejavaformat.java.PartialFormattingTest)  Time elapsed: 0.023 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.PartialFormattingTest.blankAndComment(PartialFormattingTest.java:633)

blankAndComment[1](com.google.googlejavaformat.java.PartialFormattingTest)  Time elapsed: 0.019 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.PartialFormattingTest.blankAndComment(PartialFormattingTest.java:633)

blankAndComment[2](com.google.googlejavaformat.java.PartialFormattingTest)  Time elapsed: 0.021 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.PartialFormattingTest.blankAndComment(PartialFormattingTest.java:633)

Running com.google.googlejavaformat.java.ArrayDimensionTest
Tests run: 38, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.074 sec - in com.google.googlejavaformat.java.ArrayDimensionTest
Running com.google.googlejavaformat.java.CommandLineFlagsTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.google.googlejavaformat.java.CommandLineFlagsTest
Running com.google.googlejavaformat.java.DiagnosticTest
Tests run: 8, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.097 sec - in com.google.googlejavaformat.java.DiagnosticTest
Running com.google.googlejavaformat.java.ModifierOrdererTest
Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.003 sec - in com.google.googlejavaformat.java.ModifierOrdererTest
Running com.google.googlejavaformat.java.ImportOrdererTest
Tests run: 23, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.009 sec - in com.google.googlejavaformat.java.ImportOrdererTest
Running com.google.googlejavaformat.java.SnippetFormatterTest
Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.021 sec - in com.google.googlejavaformat.java.SnippetFormatterTest
Running com.google.googlejavaformat.java.TypeNameClassifierTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.google.googlejavaformat.java.TypeNameClassifierTest
Running com.google.googlejavaformat.java.CommandLineOptionsParserTest
Tests run: 13, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.011 sec - in com.google.googlejavaformat.java.CommandLineOptionsParserTest
Running com.google.googlejavaformat.java.LineRangesToCharRangesTest
Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.001 sec - in com.google.googlejavaformat.java.LineRangesToCharRangesTest
Running com.google.googlejavaformat.java.filer.FormattingFilerTest
Tests run: 2, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.639 sec - in com.google.googlejavaformat.java.filer.FormattingFilerTest
Running com.google.googlejavaformat.java.FormatterIntegrationTest
Tests run: 556, Failures: 236, Errors: 0, Skipped: 0, Time elapsed: 3.786 sec <<< FAILURE! - in com.google.googlejavaformat.java.FormatterIntegrationTest
format[0: A](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.059 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[0: A](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.031 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[0: A](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.034 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[0: A](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.042 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[5: B19950815](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[5: B19950815](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[5: B19950815](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[5: B19950815](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[8: B20128588](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.012 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[8: B20128588](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.014 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[8: B20128588](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.018 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[8: B20128588](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.021 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128588 expected:<...r;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<...r;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[9: B20128760](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[9: B20128760](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.008 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[9: B20128760](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.012 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[9: B20128760](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.025 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20128760 expected:<... void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<... void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[11: B20341001](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.059 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[11: B20341001](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.044 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[11: B20341001](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.033 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[11: B20341001](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.061 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[13: B20529113](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.032 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[13: B20529113](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[13: B20529113](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[13: B20529113](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20529113 expected:<...ENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...ENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[15: B20535125](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.033 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[15: B20535125](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.026 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[15: B20535125](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.009 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[15: B20535125](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.016 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[16: B20567842](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[16: B20567842](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[16: B20567842](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[16: B20567842](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[19: B20578077](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[19: B20578077](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[19: B20578077](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[19: B20578077](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[21: B20701054](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.031 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[21: B20701054](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.035 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[21: B20701054](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.028 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[21: B20701054](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[24: B21031147](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[24: B21031147](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[24: B21031147](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[24: B21031147](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}...> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[27: B21192435](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[27: B21192435](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[27: B21192435](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[27: B21192435](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[28: B21278211](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[28: B21278211](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[28: B21278211](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[28: B21278211](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[29: B21283374](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[29: B21283374](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[29: B21283374](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[29: B21283374](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[30: B21305044](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.026 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[30: B21305044](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[30: B21305044](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.018 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[30: B21305044](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21305044 expected:<...5044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...5044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[33: B21331232](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.016 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[33: B21331232](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[33: B21331232](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[33: B21331232](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[34: B21465217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.014 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[34: B21465217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[34: B21465217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[34: B21465217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.032 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[37: B21608216](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[37: B21608216](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[37: B21608216](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[37: B21608216](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21608216 expected:<...ied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 ...> but was:<...ied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[39: B21954779](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[39: B21954779](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[39: B21954779](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[39: B21954779](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[40: B22166687](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[40: B22166687](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[40: B22166687](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[40: B22166687](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[41: B22169269](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[41: B22169269](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[41: B22169269](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[41: B22169269](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[44: B22488373](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[44: B22488373](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[44: B22488373](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[44: B22488373](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[45: B22610221](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[45: B22610221](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[45: B22610221](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[45: B22610221](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.011 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[47: B22848286](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[47: B22848286](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[47: B22848286](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[47: B22848286](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22848286 expected:<...86 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...86 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[48: B22873322](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[48: B22873322](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[48: B22873322](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[48: B22873322](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B22873322 expected:<...73322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...73322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[51: B23514513](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[51: B23514513](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[51: B23514513](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[51: B23514513](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23514513 expected:<... Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<... Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[53: B23708487](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[53: B23708487](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.014 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[53: B23708487](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[53: B23708487](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[54: B23749160](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[54: B23749160](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[54: B23749160](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[54: B23749160](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    fina...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    fina...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[55: B23804934](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[55: B23804934](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[55: B23804934](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.009 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[55: B23804934](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[56: B24202287](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[56: B24202287](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[56: B24202287](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[56: B24202287](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[59: B24702438](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[59: B24702438](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[59: B24702438](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[59: B24702438](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[60: B24862959](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[60: B24862959](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[60: B24862959](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[60: B24862959](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[61: B24909927](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.064 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[61: B24909927](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.056 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[61: B24909927](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.063 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[61: B24909927](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.056 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
         ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
         ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[62: B24988078](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[62: B24988078](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[62: B24988078](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[62: B24988078](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[67: B26207047](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[67: B26207047](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[67: B26207047](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[67: B26207047](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26207047 expected:<...
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[69: B26293162](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[69: B26293162](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[69: B26293162](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[69: B26293162](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[70: B26884608](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[70: B26884608](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[70: B26884608](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[70: B26884608](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[84: B30223986](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[84: B30223986](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[84: B30223986](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[84: B30223986](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[87: B32114928](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[87: B32114928](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.015 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[87: B32114928](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[87: B32114928](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[89: B32397217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[89: B32397217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[89: B32397217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[89: B32397217](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for B32397217 expected:<...ass T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<...ass T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[93: C](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.019 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[93: C](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[93: C](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[93: C](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[94: D](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.007 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[94: D](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[94: D](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[94: D](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[95: E](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.011 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[95: E](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.024 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[95: E](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.017 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[95: E](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.033 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[97: F](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.025 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[97: F](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.019 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[97: F](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[97: F](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.023 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for F expected:<...;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
...> but was:<...;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[100: I](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.023 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[100: I](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.008 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[100: I](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[100: I](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.006 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I expected:<...va.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...va.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[101: I1](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.024 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;
  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[101: I1](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[101: I1](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[101: I1](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[106: M](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.11 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[106: M](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.081 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[106: M](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.092 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[106: M](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.047 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for M expected:<...va.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...va.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[108: Multivariables](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[108: Multivariables](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[108: Multivariables](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[108: Multivariables](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[111: P](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[111: P](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[111: P](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[111: P](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for P expected:<...at.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() ...> but was:<...at.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[115: R](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[115: R](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[115: R](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[115: R](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.005 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[116: S](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.009 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[116: S](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[116: S](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.024 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[116: S](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[118: SuperQualifier](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[118: SuperQualifier](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[118: SuperQualifier](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[118: SuperQualifier](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[119: T](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[119: T](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[119: T](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[119: T](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[120: TryWithResources](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[120: TryWithResources](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[120: TryWithResources](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[120: TryWithResources](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[121: U](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[121: U](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.003 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[121: U](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.015 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[121: U](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.004 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[123: Unformatted](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.015 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[123: Unformatted](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.012 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[123: Unformatted](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.014 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[123: Unformatted](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.01 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[124: Unformatted2](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[124: Unformatted2](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[124: Unformatted2](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[124: Unformatted2](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for Unformatted2 expected:<...lejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interfac...> but was:<...lejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interfac...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[126: V](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.001 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[126: V](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[126: V](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[126: V](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for V expected:<...at.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  in...> but was:<...at.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  in...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

format[127: W](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.format(FormatterIntegrationTest.java:104)

idempotentCR[127: W](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCR(FormatterIntegrationTest.java:126)

idempotentLF[127: W](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentLF(FormatterIntegrationTest.java:115)

idempotentCRLF[127: W](com.google.googlejavaformat.java.FormatterIntegrationTest)  Time elapsed: 0.002 sec  <<< FAILURE!
org.junit.ComparisonFailure: bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
	at org.junit.Assert.assertEquals(Assert.java:115)
	at com.google.googlejavaformat.java.FormatterIntegrationTest.idempotentCRLF(FormatterIntegrationTest.java:137)

Running com.google.googlejavaformat.NewlinesTest
Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0 sec - in com.google.googlejavaformat.NewlinesTest

Results :

Failed tests: 
  FormatterIntegrationTest.format:104 bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
  FormatterIntegrationTest.format:104 bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.format:104 bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;
  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
  FormatterIntegrationTest.format:104 bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
  FormatterIntegrationTest.format:104 bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.format:104 bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
  FormatterIntegrationTest.format:104 bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
  FormatterIntegrationTest.format:104 bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.format:104 bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
  FormatterIntegrationTest.format:104 bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
  FormatterIntegrationTest.format:104 bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
  FormatterIntegrationTest.format:104 bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
  FormatterIntegrationTest.format:104 bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
  FormatterIntegrationTest.format:104 bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
  FormatterIntegrationTest.format:104 bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
  FormatterIntegrationTest.format:104 bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
  FormatterIntegrationTest.format:104 bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
  FormatterIntegrationTest.format:104 bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
  FormatterIntegrationTest.format:104 bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
  FormatterIntegrationTest.format:104 bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
  FormatterIntegrationTest.format:104 bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
  FormatterIntegrationTest.format:104 bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
  FormatterIntegrationTest.format:104 bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.format:104 bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
  FormatterIntegrationTest.format:104 bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
  FormatterIntegrationTest.format:104 bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
  FormatterIntegrationTest.format:104 bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
  FormatterIntegrationTest.format:104 bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
  FormatterIntegrationTest.format:104 bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
  FormatterIntegrationTest.format:104 bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
  FormatterIntegrationTest.format:104 bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
  FormatterIntegrationTest.format:104 bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
  FormatterIntegrationTest.format:104 bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
  FormatterIntegrationTest.format:104 bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
  FormatterIntegrationTest.format:104 bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
  FormatterIntegrationTest.format:104 bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
  FormatterIntegrationTest.format:104 bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.format:104 bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
  FormatterIntegrationTest.format:104 bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
  FormatterIntegrationTest.format:104 bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
  FormatterIntegrationTest.format:104 bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
  FormatterIntegrationTest.format:104 bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
  FormatterIntegrationTest.format:104 bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
  FormatterIntegrationTest.format:104 bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
  FormatterIntegrationTest.format:104 bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
  FormatterIntegrationTest.format:104 bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
  FormatterIntegrationTest.format:104 bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
  FormatterIntegrationTest.format:104 bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
  FormatterIntegrationTest.format:104 bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
  FormatterIntegrationTest.format:104 bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
  FormatterIntegrationTest.format:104 bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
  FormatterIntegrationTest.format:104 bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
  FormatterIntegrationTest.format:104 bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
  FormatterIntegrationTest.format:104 bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for I expected:<...va.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...va.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for M expected:<...va.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...va.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for P expected:<...at.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() ...> but was:<...at.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() ...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for Unformatted2 expected:<...lejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interfac...> but was:<...lejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interfac...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for V expected:<...at.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  in...> but was:<...at.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  in...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20529113 expected:<...ENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...ENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}...> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21305044 expected:<...5044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...5044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21608216 expected:<...ied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 ...> but was:<...ied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 ...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22848286 expected:<...86 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...86 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B22873322 expected:<...73322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...73322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B23514513 expected:<... Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<... Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    fina...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    fina...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
         ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
         ...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B26207047 expected:<...
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B32397217 expected:<...ass T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<...ass T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20128588 expected:<...r;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<...r;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for F expected:<...;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
...> but was:<...;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
...>
  FormatterIntegrationTest.idempotentCRLF:137 bad output for B20128760 expected:<... void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<... void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
  FormatterIntegrationTest.idempotentCR:126 bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
  FormatterIntegrationTest.idempotentCR:126 bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentCR:126 bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
  FormatterIntegrationTest.idempotentCR:126 bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
  FormatterIntegrationTest.idempotentCR:126 bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCR:126 bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
  FormatterIntegrationTest.idempotentCR:126 bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
  FormatterIntegrationTest.idempotentCR:126 bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentCR:126 bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
  FormatterIntegrationTest.idempotentCR:126 bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
  FormatterIntegrationTest.idempotentCR:126 bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
  FormatterIntegrationTest.idempotentCR:126 bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
  FormatterIntegrationTest.idempotentCR:126 bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
  FormatterIntegrationTest.idempotentCR:126 bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
  FormatterIntegrationTest.idempotentCR:126 bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
  FormatterIntegrationTest.idempotentCR:126 bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
  FormatterIntegrationTest.idempotentCR:126 bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
  FormatterIntegrationTest.idempotentCR:126 bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
  FormatterIntegrationTest.idempotentLF:115 bad output for A expected:<...eMemberDeclarations,[
 * Annotations, AnonymousClassDeclarations, ArrayAccesses, ArrayCreations, ArrayInitializers,
 * ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default
        1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 =
      new int[] {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
        25, 26, 27, 28, 29, 30, 31
      };
  int[] array3 = {
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31
  };
  int[][] array4 = {
    {0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19},
    {20, 21}, {22, 23}
  };
  int[][][] arrayWithLongName =
      new int
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
              + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [];

  A a1 =
      new A() {
        int x =
            array1[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
           ] + 2 + 2 + 2 + 2 + 2...> but was:<...eMemberDeclarations,[ Annotations, AnonymousClassDeclarations,
 * ArrayAccesses, ArrayCreations, ArrayInitializers, ArrayTypes, AssertStatements, and Assignments.
 */
class A {
  public @interface X {
    int x();

    int y() default 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
  }

  @X(x = 1)
  private @interface Y {}

  // TODO(jdd): Add annotation declaration with empty body.

  @X(x = 1)
  @Y
  protected @interface Z {}

  // TODO(jdd): Include type annotations once we can include a higher language level.

  int[] array1 = new int[5];
  int[] array2 = new int[] {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[] array3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};
  int[][] array4 = {{0, 1}, {2, 3}, {4, 5}, {6, 7}, {8, 9}, {10, 11}, {12, 13}, {14, 15}, {16, 17}, {18, 19}, {20, 21}, {22, 23}};
  int[][][] arrayWithLongName =
      new int[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
          [0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][];

  A a1 =
      new A() {
        int x =
            array1[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array2[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array3[
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0]
                + array4[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0][
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
      };

  void f(int something) {
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1;
    assert 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        : "that was certainly unexpected!";
    arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] =
        arrayWithLongName[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0];
    something =
        2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2
            + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2] + 2 + 2 + 2 + 2 + 2...>
  FormatterIntegrationTest.idempotentLF:115 bad output for I expected:<...java.util.List;

/**[
 * Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers,
 * InstanceofExpressions, and IntersectionTypes.
 */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<
      T extends
          I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16
              & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0
              & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
           ] + 0 + 0 + 0 + 0 + 0...> but was:<...java.util.List;

/**[ Tests for IfStatements, ImportDeclarations, InfixExpressions, Initializers, InstanceofExpressions, and IntersectionTypes. */
class I {
  interface I0 {}

  interface I1 {}

  interface I2 {}

  interface I3 {}

  interface I4 {}

  interface I5 {}

  interface I6 {}

  interface I7 {}

  interface I8 {}

  interface I9 {}

  interface I10 {}

  interface I11 {}

  interface I12 {}

  interface I13 {}

  interface I14 {}

  interface I15 {}

  interface I16 {}

  interface I17 {}

  interface I18 {}

  interface I19 {}

  class II<T extends I0 & I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9 & I10 & I11 & I12 & I13 & I14 & I15 & I16 & I17 & I18 & I19> {}

  static class CC {
    static {
      int i = 0;
    }
  }

  int x =
      0 >>> 0 + 0 / 0 * 0 - 0 & 0 << 0 * 0 / 0 >> 0 - 0 ^ 0 * 0 / 0 >>> 0 << 0 * 0 - 0 / 0
          | 0 * 0 >> 0 + 0 / 0 * 0 - 0 << 0 & 0 * 0 / 0 >>> 0 - 0 * 0 >> 0 / 0 << 0 * 0 + 0 - 0 / 0 * 0
          | 0 - 0 * 0 >>> 0 << 0 / 0 * 0 >> 0 - 0 ^ 0 * 0 / 0 & 0 << 0 + 0;

  void f() {
    if (0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
        == 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentLF:115 bad output for I1 expected:<...nal @Nullable String[
      creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String
        creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable
  final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable
   ] final String creati...> but was:<...nal @Nullable String[ creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    final @Nullable String creationUserAgent;
    final ClientId clientId;
    final @Nullable String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;
    final Token externalId;
  }
}

class Test {
  final CreationMechanism creationMechanism;
  @Nullable final String creationUserAgent;
  final ClientId clientId;

  @Nullable final String creationUserAgentXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX;

  final Token externalId;

  {
    final CreationMechanism creationMechanism;
    @Nullable final String creationUserAgent;
    final ClientId clientId;
    @Nullable] final String creati...>
  FormatterIntegrationTest.idempotentLF:115 bad output for M expected:<...java.util.List;

/**[
 * Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and
 * Modifiers.
 */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
          Exception7, Exception8, Exception9 {}

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
          Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6,
              Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
              Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5,
                  Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<
            Pair<
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
        list3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(
                0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                    + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
            Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
        pair3 =
            ImmutableList
                .<Pair<
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                        Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>
                    of(null)
                .get(
                    0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                        + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity())
        .identity()
        .identity()
        .identity()
        .identity();
    f(
        x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13]
            + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }
  }

  static
  class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(
        int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx =
      null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
        .ffffffffff(0)
        .fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M()
        .ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
            0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .fff(0)
        .fff(0)
        .f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0)
        .ffffffffff(0);
    return this;
  }

  <
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX,
          XXXXXXXXXX>
      M(
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z,
          ZZZZZZZZZZ z)
          throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,
             ] EEEEEEEEEE, EEEEEEE...> but was:<...java.util.List;

/**[ Tests for MarkerAnnotations, MemberValuePairs, MethodDeclarations, MethodInvocations, and Modifiers. */
@MarkerAnnotation
class M {
  class Exception0 extends Exception {}

  class Exception1 extends Exception {}

  class Exception2 extends Exception {}

  class Exception3 extends Exception {}

  class Exception4 extends Exception {}

  class Exception5 extends Exception {}

  class Exception6 extends Exception {}

  class Exception7 extends Exception {}

  class Exception8 extends Exception {}

  class Exception9 extends Exception {}

  void methodName1(int x) {}

  void methodName2(int x) throws Exception {}

  /** JavaDoc. */
  void methodName3(int x)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  /** JavaDoc. */
  void methodName4(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v) {}

  /** JavaDoc. */
  void methodName5(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception {}

  /** JavaDoc. */
  void methodName6(
      int a,
      int b,
      int c,
      int d,
      int e,
      int f,
      int g,
      int h,
      int i,
      int j,
      int k,
      int l,
      int m,
      int n,
      int o,
      int p,
      int q,
      int r,
      int s,
      int t,
      int u,
      int v)
      throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {}

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName10(int x) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName12(int x) throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName11(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName15(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName14(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
      methodName13(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName20(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName21(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(int x)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName22(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName23(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      T methodName30(
          int a,
          int b,
          int c,
          int d,
          int e,
          int f,
          int g,
          int h,
          int i,
          int j,
          int k,
          int l,
          int m,
          int n,
          int o,
          int p,
          int q,
          int r,
          int s,
          int t,
          int u,
          int v)
          throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName31(int x) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName32(int x) throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(int x)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName41(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v) {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName40(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception {
    return null;
  }

  <
          T0,
          T1,
          T2,
          T3,
          T4,
          T5,
          T6,
          T7,
          T8,
          T9,
          T10,
          T11,
          T12,
          T13,
          T14,
          T15,
          T16,
          T17,
          T18,
          T19,
          T20,
          T21,
          T22,
          T23,
          T24,
          T25,
          T26,
          T27,
          T28,
          T29,
          T30,
          T31>
      Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
          methodName(
              int a,
              int b,
              int c,
              int d,
              int e,
              int f,
              int g,
              int h,
              int i,
              int j,
              int k,
              int l,
              int m,
              int n,
              int o,
              int p,
              int q,
              int r,
              int s,
              int t,
              int u,
              int v)
              throws Exception0, Exception1, Exception2, Exception3, Exception4, Exception5, Exception6, Exception7, Exception8, Exception9 {
    return null;
  }

  static <T0, T1, T2> void m() {}

  M identity() {
    return this;
  }

  void f(double x) {
    List<Pair<Integer, Integer>> list1 = ImmutableList.<Pair<Integer, Integer>>of(null);
    List<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> list2 = ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null);
    List<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>> list3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null);
    Pair<Integer, Integer> pair1 =
        ImmutableList.<Pair<Integer, Integer>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Integer, Integer>, Pair<Integer, Integer>> pair2 =
        ImmutableList.<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> pair3 =
        ImmutableList.<Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>of(null)
            .get(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
  }

  void f(int... x) {
    M m = null;
    ((m.identity().identity().identity().identity()).identity().identity().identity().identity()).identity().identity().identity().identity();
    f(x[0] + x[1] + x[2] + x[3] + x[4] + x[5] + x[6] + x[7] + x[8] + x[9] + x[11] + x[12] + x[13] + x[14] + x[15]);
  }

  static void method999(Object... args) {
    method999(1, 2, 3, 4, 5);
    method999(1, 2, 3, 4, 5);
    method999(
        1, 2,
        3, 4,
        5, 6);
    method999(1, 2, 3, 4, 5, 6);
    method999("one", 1, "two", 2, "three", 3);
    method999("one", 1);
    method999(
        "one", 1,
        "two", 2);
    method999(
        "one", 1,
        "two", 1 + 1,
        "three", 1 + 1 + 1);
    method999(
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx",
        "xxxxxxxxxxxxxx");
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }
  }

  static class Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {
    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx fff(int x) {
      return null;
    }

    static Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ffffffffff(int x) {
      return null;
    }
  }

  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;
  M xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx = null;

  M fff(int x) {
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(0 + 0).fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.fff(
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
        .fff(0);
    Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.ffffffffff(0).fff(0);
    return this;
  }

  M ffffffffff(int x) {
    return this;
  }

  M ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(int x) {
    new M().ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).fff(0).fff(0).f(0);
    ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(0).ffffffffff(0);
    return this;
  }

  <XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX, XXXXXXXXXX> M(
      ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z, ZZZZZZZZZZ z)
      throws EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE, EEEEEEEEEE,] EEEEEEEEEE, EEEEEEE...>
  FormatterIntegrationTest.idempotentLF:115 bad output for Multivariables expected:<...xxxxxxxxxxxxxxxxxxx,[
      yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,
     ] zzzzzzzzzzzzzzzzzzz...> but was:<...xxxxxxxxxxxxxxxxxxx,[ yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy,] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentLF:115 bad output for P expected:<...rmat.java.test;

/**[
 * Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions,
 * PrefixExpressions, and PrimitiveTypes.
 */
class P<
    T1,
    T2,
    T3,
    T4,
    T5,
    T6,
    T7,
    T8,
    T9,
    T10,
    T11,
    T12,
    T13,
    T14,
    T15,
    T16,
    T17,
    T18,
    T19,
    T20,
    T21,
    T22,
    T23,
   ] T24> {
  void f() {...> but was:<...rmat.java.test;

/**[ Tests for PackageDeclarations, ParameterizedTypes, ParenthesizedExpressions, PostfixExpressions, PrefixExpressions, and PrimitiveTypes. */
class P<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23,] T24> {
  void f() {...>
  FormatterIntegrationTest.idempotentLF:115 bad output for R expected:<... + x + x + x + x + x[
       ] + x + x + x + x + x...> but was:<... + x + x + x + x + x[] + x + x + x + x + x...>
  FormatterIntegrationTest.idempotentLF:115 bad output for S expected:<...ariableDeclarations,[
 * Statements, StringLiterals, SuperConstructorInvocations, SuperFieldAccesses,
 * SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and
 * SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
          + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
               ] + 0 + 0 + 0 + 0 + 0...> but was:<...ariableDeclarations,[ Statements, StringLiterals, SuperConstructorInvocations,
 * SuperFieldAccesses, SuperMethodInvocations, SuperMethodReferences, SwitchCases, SwitchStatements, and SynchronizedStatements.
 */
class S {
  // TODO(jdd): Add tests for higher language levels.

  int x = 0;

  @SingleMemberAnnotation(
      0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0)
  S() {
    super();
  }

  class SS extends S {
    SS() {
      super();
      super.x = 0;
      super.foo();
    }
  }

  void foo() {
    Object[] object = null;
    synchronized (
        object[0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0] + 0 + 0 + 0 + 0 + 0...>
  FormatterIntegrationTest.idempotentLF:115 bad output for SuperQualifier expected:<...his.toStringHelper()[
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper()
        .add("foo", foo_________________________________________)
        .add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(
        ]cccccccccccccccccccc...> but was:<...his.toStringHelper()[.add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  String b() {
    return super.toStringHelper().add("foo", foo_________________________________________).add("bar", bar_________________________________________);
  }

  {
    this.aaaaaaaaaaaaaaaa.bbbbbbbbbbbbbbbbbbb(]cccccccccccccccccccc...>
  FormatterIntegrationTest.idempotentLF:115 bad output for T expected:<...clarationStatements,[
 * TypeDeclarations, TypeLiterals, TypeMethodReferences,] TypeParameters, and...> but was:<...clarationStatements,[ TypeDeclarations, TypeLiterals, TypeMethodReferences,
 *] TypeParameters, and...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20341001 expected:<...1, 1, 1, 1, 1, 1, 1,[
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(
        item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,
       ] item13);
  }
}
> but was:<...1, 1, 1, 1, 1, 1, 1,[ 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    Foo.CONSTxx,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };
  int[] xs = {
    Foo_CONST, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo", "0123456", 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
  };
  int[] xs = {
    "foo",
    "01234567",
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1,
    1
  };

  {
    return ImmutableList.of(item1, item2, item3, item4, item5, item6, item7, item8, item9, item10, item11, item12,] item13);
  }
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for TryWithResources expected:<...feredWriter writer =[
       ] new BufferedWriter(...> but was:<...feredWriter writer =[] new BufferedWriter(...>
  FormatterIntegrationTest.idempotentLF:115 bad output for U expected:<... } catch (Exception0[
        | Exception1
        | Exception2
        | Exception3
        | Exception4
        | Exception5
        | Exception6
        | Exception7
        | Exception8
       ] | Exception9 e) {
 ...> but was:<... } catch (Exception0[ | Exception1 | Exception2 | Exception3 | Exception4 | Exception5 | Exception6 | Exception7 | Exception8] | Exception9 e) {
 ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for Unformatted expected:<...rectory, and confirm[
 * that the result is the same as the file in the output directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes =
          Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes =
          Files.readAllBytes(
              ]FileSystems.getDefau...> but was:<...rectory, and confirm[ that the result is the same as the file in the output
 * directory.
 */
public final class Unformatted extends TestCase {
  private static final int MAX_WIDTH = 100;

  public void testFormatter() throws Exception {
    Path inputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "input");
    Path outputPath = FileSystems.getDefault().getPath(TestPath.getDir(), "output");
    File inputDirectory = new File(inputPath.toString());
    File outputDirectory = new File(outputPath.toString());
    for (File file : inputDirectory.listFiles()) {
      assertTrue(file.isFile());
      String fileName = file.getName();
      assertTrue(fileName.endsWith(".java"));
      byte[] inputBytes = Files.readAllBytes(FileSystems.getDefault().getPath(inputDirectory.toString(), fileName));
      String inputString = new String(inputBytes, Charsets.UTF_8);
      byte[] expectedOutputBytes = Files.readAllBytes(]FileSystems.getDefau...>
  FormatterIntegrationTest.idempotentLF:115 bad output for Unformatted2 expected:<...oglejavaformat;

/**[
 * Rewrite comments. This interface is implemented by {@link
 * com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.
] */
public interface...> but was:<...oglejavaformat;

/**[ Rewrite comments. This interface is implemented by {@link com.google.googlejavaformat.java.JavaCommentsHelper JavaCommentsHelper}.] */
public interface...>
  FormatterIntegrationTest.idempotentLF:115 bad output for V expected:<...rmat.java.test;

/**[
 * Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and
 * VariableDeclarationStatements.
] */
class V {
  int ...> but was:<...rmat.java.test;

/**[ Tests for VariableDeclarationExpressions, VariableDeclarationFragments, and VariableDeclarationStatements.] */
class V {
  int ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for W expected:<...true == true == true[
       ] == true == true) {}...> but was:<...true == true == true[] == true == true) {}...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20529113 expected:<...MENTAL)
@BugPattern([
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  category = GUAVA,
  severity = NOT_A_PROBLEM,
  maturity = EXPERIMENTAL
)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation =
      "If an AsyncFunction always returns immediateFuture() and never throws, it can "
         ] + "be replaced with...> but was:<...MENTAL)
@BugPattern([name = "AsyncFunctionReturnsImmediate", summary = SIMPLIFY, category = GUAVA, severity = NOT_A_PROBLEM, maturity = EXPERIMENTAL)
@BugPattern(
  name = "AsyncFunctionReturnsImmediate",
  summary = SIMPLIFY,
  explanation = "If an AsyncFunction always returns immediateFuture() and never throws, it can "] + "be replaced with...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20535125 expected:<...putTransformations()[
       ] && Producers.isList...> but was:<...putTransformations()[] && Producers.isList...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20567842 expected:<...xxxxxxxxxxxxxxxx = {[
    1, 2, 3
  };

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1
  ]};
}
> but was:<...xxxxxxxxxxxxxxxx = {[1, 2, 3};

  // force block style, but not one-per-line for trailing ',':
  int[] x = {
    a.b, true ? 1 : 2, CONST,
  };

  // don't format one-per-line here:
  int[] x = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]};
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20578077 expected:<...atorTester<Integer>([
        ]4, MODIFIABLE, newAr...> but was:<...atorTester<Integer>([]4, MODIFIABLE, newAr...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20701054 expected:<...nputWhitelist.class)[
        .setBinding()
        .to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x =
        ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(
        veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results)
            .parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor
            .getImpressionBreakdownByAccountId()
            .parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource
            .read("readCrawlReportTable")
            .parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
        .field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test
            ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field
            .field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
        .ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
           ] xxxxxxxxxxxxxxxxxxx...> but was:<...nputWhitelist.class)[.setBinding().to(AllInputWhitelist.class);

    Foo z = Foo.INSTANCE.field;
    Foo z = Foo.INSTANCE.field.field;
    Foo z = Foo.INSTANCE.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field;
    Foo z = Foo.INSTANCE.field.field.field.field.field;

    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.INSTANCE.add(1).add(2).add(3).add(4).build();

    ImmutableList<String> x = ImmutableList.builder().add(1).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).build();
    ImmutableList<String> x = ImmutableList.builder().add(1).add(2).add(3).add(4).add(5).add(6).build();

    ImmutableList<String> x =
        new ImmutableList.Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    ImmutableList<String> x =
        ImmutableList.new Builder<>()
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .add(xxxxx)
            .build();

    System.err.println(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    Class.my.contrived.example.function(veryLongArgumentxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    PTable<Long, List<PageSpeedUrlResult>> latestResults =
        FJ.joinOneShot2(accountSummaryProvider.get(), results).parallelDo("extractPageSpeedUrls", new ExtractPageSpeedUrlsFn(false));

    PTable<Long, Long> adImpressionsByAccount =
        impressionExtractor.getImpressionBreakdownByAccountId().parallelDo("rekeyAdImpressionsByAccountId", new ExtractTotalImpressionsFn());

    PTable<String, CrawlError> crawlerErrorsByCode =
        crawlReportSource.read("readCrawlReportTable").parallelDo("reKeyErrorsByPropertyCode", new RekeyErrorsByPropertyCodeFn());

    if (ImmutableList.builder().add(1).add(2).add(3)) {}

    if (ImmutableList.builder().add(1).add(2).add(3).add(4)) {}

    if (value.fst.name.toString().equals("value")) {}

    analysis()
        .analyze(
            compilationUnit,
            context,
            configuration,
            new DescriptionListener() {
              @Override
              public void onDescribed(Description description) {
                listener.onDescribed(
                    description.filterFixes(
                        new Predicate<Fix>() {
                          @Override
                          public boolean apply(Fix fix) {
                            return compiles(fix, (JCCompilationUnit) compilationUnit, context);
                          }
                        }));
              }
            });

    (test ? xxx : yyy).zzz(xxx);

    (test ? xxx : yyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    zzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzz.zzzzzzzzzzzzzzzzzzzzzzzzzzzzz(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    (test ? xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx : yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy)
        .field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.field.method(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field.field.field.field.field.field.method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    field
        .field
        .field
        .field
        .field
        .field
        .method(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy();

    edu.oswego.cs.dl.util.concurrent.misc.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
            zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
        .zzzzzzz(zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz);

    int u =
        edu.oswego.cs.dl.util.concurrent.misc.zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.ImmutableList.builder(
                zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz)
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz
            .zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz;

    for (String configured : errorProneOptions().getSeverityMap().keySet()) {}

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    return fffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx)
        .fffffffffffff(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21031147 expected:<...ngBuilder(maxLength)[
        .append(seq, 0, truncationLength)
        .append(truncationIndicator)
        ].toString();
  }
}
> but was:<...ngBuilder(maxLength)[.append(seq, 0, truncationLength).append(truncationIndicator)].toString();
  }
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21192435 expected:<...xxxxxxxxxxxxxxxxxxxx[
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxx {}

  static class Test<
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx>
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx] implements Xxxxxxxx...> but was:<...xxxxxxxxxxxxxxxxxxxx[ implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxx {}

  static class Testxxxxxxxxx extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx implements Xxxxxxxxxxxxxxxx {}

  static class Test<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx> extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
     ] implements Xxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21278211 expected:<...zzzzzzzzzzzzzzzzzz()[
        .gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f()
        .g()
        ].hzzzzzzzzzzzzzzzzzz...> but was:<...zzzzzzzzzzzzzzzzzz()[.gzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz();

    x.f().g().h();
    x.f().g()].hzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21283374 expected:<...___________________([
        /*paramName=*/ false, thingy);
    assertThat__________________________________________________________(
        /*paramName=*/ false, thingy);

    f(
        arg1, /* which arg is this attached to? */
        arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        /* paramName1 */ arg1,
        /* paramName2 */ arg2,
        arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(
        arg1, /* paramName1 */
        arg2, /* paramName2 */
       ] arg3xxxxxxxxxxxxxxx...> but was:<...___________________([/*paramName=*/ false, thingy);
    assertThat__________________________________________________________(/*paramName=*/ false, thingy);

    f(arg1, /* which arg is this attached to? */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(/* paramName1 */ arg1, /* paramName2 */ arg2, arg3xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    f(arg1, /* paramName1 */ arg2, /* paramName2 */] arg3xxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21305044 expected:<...305044 {

  class T<[
          @Nullable X extends @Nullable Object,
          @Nullable Y extends @Nullable Object,
          @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<
            ? super
                @Crazy(
                  key = value,
                  other =
                      @Crazier({
                        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
                      })
                )
                Object>
        c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i =
      com.foo.bar
              .VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz
          ::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f =
        () ->
            System.err.println(
                "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f =
        (someParam) ->
           ] System.err.println(...> but was:<...305044 {

  class T<[@Nullable X extends @Nullable Object, @Nullable Y extends @Nullable Object, @Nullable Z extends @Nullable Object>
      extends Function<@Nullable X, @Nullable Y> implements Predicate<@Nullable Z> {
    public T(@Nullable T this, List<@Nullable X> xs) {}

    public T(@Nullable T B21305044.this, List<@Nullable X> xs) {}

    List<@Nullable ?> a;
    List<@Nullable ? extends @Nullable Object> b;
    List<@Nullable ? super @Nullable Object> c;

    List<? super @Crazy(key = value, other = @Crazier({1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20})) Object> c;
  }

  Function f = com.foo.bar.Baz::func;
  Function g = new Baz()::func;
  Function h = Baz::new;
  Function i = com.foo.bar.VeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongBaz::new;

  {
    Function f = () -> moderatelyLongResult;
    Function f =
        () ->
            breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult
                + breakableResult;
    Function f = () -> System.err.println("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
    Function f = (someParam) ->] System.err.println(...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21331232 expected:<...F, S> S instantiate([
      Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(
      @Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(
      ]T object, Funnel<? s...> but was:<...F, S> S instantiate([Class<?> wrapperType, Type t, FailureStrategy fs, SF factory, Iterable<T> data) {}

  public <T, C extends Iterable<T>> IterableSubject<? extends IterableSubject<?, T, C>, T, C> that(@Nullable Iterable<T> target) {
    return IterableSubject.create(getFailureStrategy(), target);
  }

  <T> boolean mightContain(]T object, Funnel<? s...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21465217 expected:<...treamWriter writer =[
            new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =
       ] env.getFiler().crea...> but was:<...treamWriter writer =[ new OutputStreamWriter(bout, UTF_8___________________________)) {}

    try (Writer sourceWriter =] env.getFiler().crea...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21608216 expected:<...fied",
  modules = {[
    BackendsModule.class,
    CommonBackendsModule.class,
    ChromeSuggestionsPlugin.ChromeSuggestionsModule.class
  }
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class
  }
)
@Module(
  library = true,
  complete = false,
  injects = {
    ClassInfoTracker.class,
    JslayoutMetaProto.class,
    JslayoutMetaProto.class,
    JslayoutMeta.class,
    JslayoutMeta.class
  }
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26
  }
)
@Module(
  library = true,
  complete = false,
  numbers = {
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,
    27, 28, 29, 30
  }
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class
})
@Module({
  ClassInfoTracker.class,
  JslayoutMetaProto.class,
  JslayoutMetaProto.class,
  JslayoutMeta.class,
  JslayoutMeta.class
]})
class B21608216 {...> but was:<...fied",
  modules = {[BackendsModule.class, CommonBackendsModule.class, ChromeSuggestionsPlugin.ChromeSuggestionsModule.class}
)
@Module(library = true, complete = false)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class}
)
@Module(
  library = true,
  complete = false,
  injects = {ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class}
)
@Module(
  injects = {One.class, Two.class},
  includes = {Three.class, Four.class}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26}
)
@Module(
  library = true,
  complete = false,
  numbers = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}
)
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class})
@Module({ClassInfoTracker.class, JslayoutMetaProto.class, JslayoutMetaProto.class, JslayoutMeta.class, JslayoutMeta.class]})
class B21608216 {...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B21954779 expected:<...eApi.findOrCreateVm([
            VM_METADATA,
            Optional.<InstanceProto>absent(),
            AssignReservedIp.YES,
            AttachDataDisk.YES))
        .thenReturn(OPERATION);

    fail(
        String.format(
            "       Experiment name %s is used multiple times in %s",
            expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(
                    application.getString(
                        R.string.working_on_project_format,
                        Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext()
        .getErrorReporter()
        .log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(
        new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<
            ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})
        ].then();
  }
}
> but was:<...eApi.findOrCreateVm([VM_METADATA, Optional.<InstanceProto>absent(), AssignReservedIp.YES, AttachDataDisk.YES)).thenReturn(OPERATION);

    fail(String.format("       Experiment name %s is used multiple times in %s", expName, envName, zzzzzzzzzzzz, zzzzzzzzzzzz));

    new Handler(Looper.getMainLooper())
        .post(
            new Runnable() {
              @Override
              public void run() {
                utils.showShortToast(application.getString(R.string.working_on_project_format, Utils.getProjectDisplayName(selectedProject)));
              }
            });

    (new Handler())
        .post(
            new Runnable() {
              @Override
              public void run() {
                showErrorAndSetDone(error);
              }
            });

    getContext().getErrorReporter().log(new RuntimeException("Called layout with a non-zero segment index: " + segmentIndex));

    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponse>>() {});

    // this isn't a feature; we'd prefer to keep `new Key...` as one unit
    bind(new Key<ServiceMethodRunner<SyncReferenceNumberRequest, SyncReferenceNumberResponses>>() {})].then();
  }
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22166687 expected:<...static class Wrapper[
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper
      extends CrossComponentSetBindingsWrapper<
          ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<
              ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<
              ]ExtensionWrapper<Foo...> but was:<...static class Wrapper[ extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>> {
    void m() {}
  }

  public static class Wrapper extends CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>
      implements CrossComponentSetBindingsWrapper<ExtensionWrapper<FootprintsGenericSearchResponseExtension>>,
          CrossComponentSetBindingsWrapper<]ExtensionWrapper<Foo...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22169269 expected:<...assNotFoundException[
        | NoSuchMethodException
        | InvocationTargetException
       ] | IllegalAccessExce...> but was:<...assNotFoundException[ | NoSuchMethodException | InvocationTargetException] | IllegalAccessExce...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22488373 expected:<...d().equals(DECLARED)[
           ] && !((DeclaredType)...> but was:<...d().equals(DECLARED)[] && !((DeclaredType)...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22610221 expected:<...ct>, Object> entry :[
       ] FOO.bar().bazs().<O...> but was:<...ct>, Object> entry :[] FOO.bar().bazs().<O...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22848286 expected:<...8286 {

  @FxxxSxxx([
    xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx",
    xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx."
  )
  int x;

  @FxxxGxxxxxxxx(
    xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"
  ])
  int y;
}
> but was:<...8286 {

  @FxxxSxxx([xxxx = "xxxxxx_xxxxxxx_xxxxxxxxx_xxxx", xxxx = "Xxxxx xxxx xx xxxxxx xxxxxxx xxxxxxxxx.")
  int x;

  @FxxxGxxxxxxxx(xxxx = "Xxx xxxxxx xxxxxxxxy xxx xxx xxxxxxxxx, x.x. xxx xxxxxx xxxxxxxx xxxxxxxxy"])
  int y;
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for B22873322 expected:<...2873322 {
  {
    f([
        param ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(
                param));
    f(
        (param1, param2) ->
            veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f(
        (int param) ->
           ] veryLoooooooooooooo...> but was:<...2873322 {
  {
    f([param -> veryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param));
    f((param1, param2) -> veryLooooooooooooooooooooooooooooooooooooooooooooooooongExpr(param1, param2));
    f((int param) ->] veryLoooooooooooooo...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B23514513 expected:<...ss Test {
  {
    f([
        rrr.kkkkk.uuuuuuuu,
        rrr.iiiiii.ggggggggggggggggg,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...ss Test {
  {
    f([rrr.kkkkk.uuuuuuuu, rrr.iiiiii.ggggggggggggggggg,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B23708487 expected:<...          .setScope([
                com.google.security.acl.proto2api.ACL.Scope.newBuilder()
                    ].setMdbUser(BorgTask...> but was:<...          .setScope([com.google.security.acl.proto2api.ACL.Scope.newBuilder()].setMdbUser(BorgTask...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B23749160 expected:<...maryModuleListFiller[
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX,
            YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
                anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller
        .buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(
            anyInt(), anyInt(), anyInt())
        .anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(
            anyInt(), anyInt(), anyInt()))
        ].then();

    final ...> but was:<...maryModuleListFiller[.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    mockDailySummaryModuleListFiller
        .<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt());

    foo.<XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX, YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY>
            buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt())
        .bar();

    // `.build`... and `anotherThing`... are technically at different syntactic
    // levels, but the indentation required to express that starts to get out
    // of hand
    MockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDayxxxxxxxxxxx(anyInt(), anyInt(), anyInt()).anotherThing();

    when(mockDailySummaryModuleListFiller.buildDailySummaryModulesWithHeadersOnlyAndOneExpandedDay(anyInt(), anyInt(), anyInt()))].then();

    final ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B23804934 expected:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[
          Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(
      zzz z,
      @Zzzzzzzz @Zzzzzzzzzz
          ZzzzzzzzzZzzz<Zzzzzz>
              zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ)
          zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ)
          zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz
         ] zzzzzzzzzzzzzzzzzzz...> but was:<...ZZZ_ZZZZ_ZZZZZZZZZZ)[ Zzzzzzzz<Zzzzzzz> zzzzzZzzzZzzzzzZzzzZzzzzzzzzz) {
    zzzz.zzzzzzzzZzzzzzZzzzzZzzzzzzz = zzzzzzzzZzzzzzZzzzzZzzzzzzz;
    zzzz.zzzzzzZzzzZzzzZzzzzzzz = zzzzzzZzzzZzzzZzzzzzzz;
    zzzz.zzzzzZzzzzzz = zzzzzZzzzzzz;
    zzzz.zzzzzZzzzZzzzzzZzzzZzzzzzzzzz = zzzzzZzzzZzzzzzZzzzZzzzzzzzzz;
  }

  zzzz z(zzz z, @Zzzzzzzz @Zzzzzzzzzz ZzzzzzzzzZzzz<Zzzzzz> zzzzZzzzZzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz) {}

  @ZzzZzzzZzzzzzzzzzz
  @Zzzzzzzz(zzzzzzzzz = Zzzzzzzzz.ZZ)
  ZzzzzzzzzzZzzzzz<ZzzZzzzzzzzzzzZzzzzzzzz> zzzzzzzZzzzzzzzzzz(
      @Zzz @Zzz zzzz zzzzZzzzZz,
      @Zzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZZ_ZZZ_ZZZ_ZZZZZZZ) zzzzzzz zzzzzzZzzZzzZzzzzzz,
      @Zzzzz @ZzzzzzzzzzZzzzz(zzzz = ZzzzzZzzzzzZzzzz.ZZZZZ_ZZZ_ZZZZZZZZZZZ) zzzzzzz zzzzzZzzZzzzzzzzzzz,
      @Zzzzz ZzzzzZzzz zzzzzZzzz) {}

  void fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff(
      final zzzzzzzzzzzzzz] zzzzzzzzzzzzzzzzzzz...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B24202287 expected:<...tentSource.values()[[
            ]mIntent.get().getInt...> but was:<...tentSource.values()[[]mIntent.get().getInt...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B24702438 expected:<...Nullable @Deprecated[
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated
          ImmutableList<String>
              veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated
          ImmutableList<String>
             ] veryVeryLoooooooooo...> but was:<...Nullable @Deprecated[ ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      int c) {}

  void g(
      @Nullable @Deprecated ImmutableList<String> veryVeryLooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong,
      @Nullable @Deprecated ImmutableList<String>] veryVeryLoooooooooo...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B19950815 expected:<...uncationLength >= 0,[
        "maxLength (%s) must be >= length of the truncation indicator (%s)",
        maxLength,
        truncationIndicator.length());
  }

  private String finishCollapseFrom(
      CharSequence sequence,
      int start,
      int end,
      char replacement,
      StringBuilder builder,
     ] boolean inMatchingG...> but was:<...uncationLength >= 0,[ "maxLength (%s) must be >= length of the truncation indicator (%s)", maxLength, truncationIndicator.length());
  }

  private String finishCollapseFrom(CharSequence sequence, int start, int end, char replacement, StringBuilder builder,] boolean inMatchingG...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B24862959 expected:<...X_XXXX_XXX_XXXXXXXX([
      ]"                   ...> but was:<...X_XXXX_XXX_XXXXXXXX([]"                   ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B24909927 expected:<...     .xxxXxxxxxXxxx([
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx
                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                -42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                    .xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(-42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(
                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxx(42)
                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxxXxxxXx(42)
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx
                                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxxx(
                                                                                                        -42)
                                                                                                    .xxxXxxx(
                                                                                                        XxxxXxxx
                                                                                                            .XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx
                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(
                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxx(-42)
                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(
                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxx(42)
                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(
                                                                                XxxxxxXxxx
                                                                                    .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                                    .xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx
                                                                                                            .xxxXxxxxxx()
                                                                                                            .xxxXxxxx(
                                                                                                                -42)
                                                                                                            .xxxXxxx(
                                                                                                                XxxxXxxx
                                                                                                                    .XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx
                                                                                            .xxxXxxxxxx()
                                                                                            .xxxXxxxx(
                                                                                                42)
                                                                                            .xxxXxxx(
                                                                                                XxxxXxxx
                                                                                                    .XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(
                                                                                        42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx
                                                            .XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx
                                                                            .xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx
                                                                                    .xxxXxxxxxx()
                                                                                    .xxxXxxxx(-42)
                                                                                    .xxxXxxx(
                                                                                        XxxxXxxx
                                                                                            .XXX)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(
                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxx(42)
                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxxXxxxXx(42)
                                                            ].xxxxx())
          ...> but was:<...     .xxxXxxxxxXxxx([XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                    .xxxXxxxxxXxxx(
                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                            .xxxXxxxXxxxxx(
                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxxXxxxx(
                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(-42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                            .xxxXxxxxxXxxx(
                                XxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                    .xxxXxxxXxxxxx(
                                        XxxxXxxxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxxxXxxxx(
                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxXxxxxxx(
                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                    .xxxxx())
                                                            .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                    .xxxxx())
                            .xxxxx())
                    .xxxXxxxxxx(
                        XxxxxxxXxxx.xxxXxxxxxx()
                            .xxxXxxxxxxx(Xxxxxxxx.XX)
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                            .xxxXxxxxxXxxx(
                                                                XxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                    .xxxXxxxXxxxxx(
                                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxxXxxxx(
                                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxXxxxxx(
                                                                                                XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxxx(-42)
                                                                                                    .xxxXxxx(XxxxXxxx.XXX)
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                    .xxxXxxxxxXxxx(
                                        XxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                            .xxxXxxxXxxxxx(
                                                XxxxXxxxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxxxXxxxx(
                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxXxxxxxx(
                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx.XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                            .xxxxx())
                                                                    .xxxXxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                            .xxxxx())
                                    .xxxxx())
                            .xxxXxxxxxx(
                                XxxxxxxXxxx.xxxXxxxxxx()
                                    .xxxXxxxxxxx(Xxxxxxxx.XX)
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxXxxxxxx(
                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxxx(Xxxxxxxx.XXX)
                                                    .xxxXxxxxxx(
                                                        XxxxxxxXxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxx(Xxxxxxxx.XX_XXXXX)
                                                            .xxxXxxxxxx(
                                                                XxxxxxxXxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                                                    .xxxXxxxxxXxxx(
                                                                        XxxxxxXxxx.xxxXxxxxxx()
                                                                            .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                                            .xxxXxxxXxxxxx(
                                                                                XxxxXxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxXxxxx(
                                                                                        XxxxXxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxxxxxXxxxxxx(
                                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                    .xxxXxxx(
                                                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxxxxxXxxxxxxxx(
                                                                                                                XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                                                    .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxXxxxxx(
                                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                                            .xxxXxxxx(-42)
                                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                                            .xxxxx())
                                                                                                    .xxxxx())
                                                                                            .xxxxx())
                                                                                    .xxxXxxxxxxx(
                                                                                        XxxxXxxxxxxx.xxxXxxxxxx()
                                                                                            .xxxXxxxx(42)
                                                                                            .xxxXxxx(XxxxXxxx.XXX)
                                                                                            .xxxxx())
                                                                                    .xxxxx())
                                                                            .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                                                XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxxxXxxxXx(42)
                                                                                    .xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42).xxxxx())
                                                    .xxxxx())
                                            .xxxxx())
                                    .xxxXxxxxxx(
                                        XxxxxxxXxxx.xxxXxxxxxx()
                                            .xxxXxxxxxxx(Xxxxxxxx.XXXX)
                                            .xxxXxxxxxXxxx(
                                                XxxxxxXxxx.xxxXxxxxxx()
                                                    .xxxXxxxxxXxxx(XxxxxxXxxx.XXX_XXXXXXXXXXXXXXX_XXXX_XXXXXXX_XXXXX_XXXXX)
                                                    .xxxXxxxXxxxxx(
                                                        XxxxXxxxxx.xxxXxxxxxx()
                                                            .xxxXxxxxxxxxXxxxx(
                                                                XxxxXxxxxxx.xxxXxxxxxx()
                                                                    .xxxXxxxxxxxXxxxxxx(
                                                                        XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                            .xxxXxxx(
                                                                                XxxxxxxxXxxxXxxxxxx.xxxXxxxxxx()
                                                                                    .xxxXxxxxxxxXxxxxxxxx(
                                                                                        XxxxxxxxXxxxXxxxxxxXxxxxxxxXxxxxxxxx
                                                                                            .XXXX_XXXXXX_XXXX_XXXXX_XX_XXX)
                                                                                    .xxxxx())
                                                                            .xxxXxxxxx(
                                                                                XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(-42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                                            .xxxxx())
                                                                    .xxxxx())
                                                            .xxxXxxxxxxx(XxxxXxxxxxxx.xxxXxxxxxx().xxxXxxxx(42).xxxXxxx(XxxxXxxx.XXX).xxxxx())
                                                            .xxxxx())
                                                    .xxxXxxxxxxxxxXxxXxxxXxxxxxxxx(
                                                        XxxxxxxxxxXxxXxxxXxxxxxxxx.xxxXxxxxxx().xxxXxxxxxxxxxXxxxXx(42)].xxxxx())
          ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B24988078 expected:<...nal<T> fromNullable([
      ]@Nullable T nullable...> but was:<...nal<T> fromNullable([]@Nullable T nullable...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B26207047 expected:<...{
    String.format([
        "%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "{0}                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
       ] xxxxxxxxxxxxxxxxxxx...> but was:<...{
    String.format(["%s                                        ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("%s                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("{0}                                                                           ", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           "
            + "                                                                           ",
        xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx,
        xxxxxxxxxxxxxxxxxxxx);
    String.format(
        "%s                                                                           ",
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx,
        xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx, xxxxxx);
    String.format(
        "%s    ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ",
        "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ", "      ");
    Set<TimeZone> ZONES =
        ImmutableSet.of(
            TimeZone.getTimeZone("EST"),
            // TODO:
            TimeZone.getTimeZone("GMT"),
            TimeZone.getTimeZone("HST"),
            TimeZone.getTimeZone("MST"));
    String.format(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx + "%s", xxxxxxxxxxxxxxxxxxxx, xxxxxxxxxxxxxxxxxxxx);
    String.format("                                                                           ", xxxxxxxxxxxxxxxxxxxx,] xxxxxxxxxxxxxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B26293162 expected:<...xxxxxXxxxxxXxxxxxxx<[
      X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<
          X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>>
      extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<
          X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X>
      extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>>
      extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<
      XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<
          X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx,
          X extends Xxxxxxx,
          X extends Xxxxxxx,
         ] XX extends Xxxxxxxx...> but was:<...xxxxxXxxxxxXxxxxxxx<[X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> {

    int x;
  }

  public static final class XxxxXxxxxxxxXxxxxxxxxXxxxxxXxxxxxxx<X, X, X extends XxxxxxxxxXxxxxxxxxXxxxxxxx<X, X>> extends Xxxxx {

    int x;
  }

  class XxxxxxxxXxxxxxxxxXxxxXxxx<X extends XxxxxxxxxXxxxxxx, X extends XxxxxxxxxXxxxxx, X extends Xxxxxxxxxxxxx, X> extends XxxxXxxx {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, XX extends Xxxxxxxxx<X>> extends XxxxxxxxXx<X, XX> {

    int x;
  }

  static class XxxxxXxxxxXxxx<XXXXX extends XxxxxxxxXxxxxxx<XXXXX>, XXX extends XxxxxxxxXxxxxxx<XXX>> {

    int x;
  }

  @Xxx
  class XxxxxxxxxxxXxxxxxXx<X extends XxxxxxXxxxxxxxxxxXxxxxxXxxxxx, X extends Xxxxxxx, X extends Xxxxxxx,] XX extends Xxxxxxxx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B26884608 expected:<...XxxxxxXxxxxxxXxxxxx([
        XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(
        XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(
        XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
        XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(
        XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super
        .<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(
            XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(
        ]XxxxxXxxx.xxxxxXx(xx...> but was:<...XxxxxxXxxxxxxXxxxxx([XXXXXXXXX_XXXXXXXXX);
    this.xxxXxxxxXxxxxxx(XxxxxXxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.this.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.this.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));

    super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    super.xxxXxxxxXxxx(XxxxxXxxxx.xxxxxXxxxx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    Xxxxx.super.xxxXxxxxXxxx(XxxxxXxxx.xxxxxXx(xxxxxx.xxxxxxxXxxxxxXxxxx(xxxxxx), xxxxxx.xxXxxxxxx()));
    xxx.xxxxxx.Xxxxx.super.<XxxxxXxxxxxxxXxxxxx, XxxxxxxxxXxxxxxxXxxxxxxxx>xxxxxxxxxXxxxxxXxxxxxxXxxxxx(XXXXXXXXX_XXXXXXXXX);
    xxx.xxxxxx.Xxxxx.super.xxxXxxxxXxxx(]XxxxxXxxx.xxxxxXx(xx...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B30223986 expected:<...rning a new instance[
 * of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in
 *] the subclass. Examp...> but was:<...rning a new instance[ of the foo relevant to that baz.
 *
 * <p>Example: <code>
 *   @Override
 *   protected Foo bar() {
 *     return new Foo();
 *   }
 * </code> The subclass should call {@link #get()} to get the foo object, and should not cache it in] the subclass. Examp...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B32114928 expected:<...   Class<T> tClass =[
        (Class<T>)
            verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())
                ].getActualTypeArgume...> but was:<...   Class<T> tClass =[ (Class<T>) verifyNotNull((ParameterizedType) getClass().getGenericSuperclass())].getActualTypeArgume...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B32397217 expected:<class T {
  {
    f([
        1 /* 1                                       */,
       ] 2 /* 2             ...> but was:<class T {
  {
    f([1 /* 1                                       */,] 2 /* 2             ...>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20128588 expected:<... var;
  }

  void f([
      @Foo @Bar @Baz final Object var,
      final @Foo @Bar @Baz Object var,
      @Foo @Bar @Baz Object var,
      @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)
     ] throws @TA Exceptio...> but was:<... var;
  }

  void f([@Foo @Bar @Baz final Object var, final @Foo @Bar @Baz Object var, @Foo @Bar @Baz Object var, @Foo(xs = 42) @Bar @Baz Object var) {}

  <@TA T extends @TA Object> @TA T f(List<? extends @TA T> a, List<? super @TA T> b)] throws @TA Exceptio...>
  FormatterIntegrationTest.idempotentLF:115 bad output for C expected:<...ssInstanceCreations,[
 * CommentHelper, ConditionalExpressions, ConstructorInvocations, ContinueStatements, and
 * CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
                      Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j =
          i == 0
              ? 0
              : i == 1
                  ? 1
                 ] : i == 2 ? 2 : i ==...> but was:<...ssInstanceCreations,[ CommentHelper, ConditionalExpressions, ConstructorInvocations,
 * ContinueStatements, and CreationReferences.
 */
class C<T> {
  // TODO(jdd): Test higher-language-level constructs.

  C() {
    this(
        0, 1,
        2, 3,
        4, 5,
        6, 7,
        8, 9,
        10, 11,
        12, 13,
        14, 15,
        16, 17,
        18, 19,
        20, 21,
        22, 23,
        24, 25,
        26, 27,
        28, 29,
        30, 31);
  }

  C(int... x) {}

  void f() {
    try {
    } catch (RuntimeException e) {
      Object x =
          (Pair<
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>,
                  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>>)
              null;
      C<Integer> c =
          new C<Integer>(
              0, 1,
              2, 3,
              4, 5,
              6, 7,
              8, 9,
              10, 11,
              12, 13,
              14, 15,
              16, 17,
              18, 19,
              20, 21,
              22, 23,
              24, 25,
              26, 27,
              28, 29,
              30, 31);
      int i = 0;
      int j = i == 0 ? 0 : i == 1 ? 1] : i == 2 ? 2 : i ==...>
  FormatterIntegrationTest.idempotentLF:115 bad output for D expected:<...[][][][][][][][][][][
          [][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][]
          [][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
            + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
           ] + 1 + 1 + 1 + 1 + 1...> but was:<...[][][][][][][][][][][[][][][]
      array[][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][][];

  void f() {
    do {
      assert false;
    } while (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1
        == 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1] + 1 + 1 + 1 + 1 + 1...>
  FormatterIntegrationTest.idempotentLF:115 bad output for E expected:<...s, EnumDeclarations,[
 * ExpressionMethodReferences, ExpressionStatements, Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(
        0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
            + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x :
        ImmutableList.<Integer>of(
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
            Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>
        x :
            Lists
                .<Pair<
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                        Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
    ]                newA...> but was:<...s, EnumDeclarations,[ ExpressionMethodReferences, ExpressionStatements,
 * Expressions, and ExtendedModifiers.
 */
@MarkerAnnotation
class E<T> {
  // TODO(jdd): Test higher language-level features.

  enum Enum1 {
    A,
    B,
    C,
    D;

    Enum1() {}
  }

  @MarkerAnnotation
  public enum Enum2 {
    A,
    B,
    C,
    D,
    ;

    Enum2() {}
  }

  enum Enum3 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3);

    Enum3(int x) {}
  }

  enum Enum4 {
    A(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0),
    B(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 1),
    C(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 2),
    D(0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 3),
    ;

    Enum4(int x) {}
  }

  int f(int value) {
    ;;;;;
    for (Integer x : ImmutableList.<Integer>of(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)) {}
    for (Pair<Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>, Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>> x :
        Lists
            .<Pair<
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>,
                    Pair<Pair<Pair<T, T>, Pair<T, T>>, Pair<Pair<T, T>, Pair<T, T>>>>>
]                newA...>
  FormatterIntegrationTest.idempotentLF:115 bad output for F expected:<...l;
  Object field0 =[
      true
          ? true ? true ? null : null : true ? null : null
          : true ? true ? null : null : true ? null : null;

  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field1 = null;
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field2 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>,
          Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>>
      field3 =
          true
              ? true ? true ? null : null : true ? null : null
              : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =
         ] null;
    }
  }
}
> but was:<...l;
  Object field0 =[ true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field1 = null;
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field2 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  @MarkerAnnotation
  Pair<Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>, Pair<Pair<Integer, Integer>, Pair<Integer, Integer>>> field3 =
      true ? true ? true ? null : null : true ? null : null : true ? true ? null : null : true ? null : null;

  void f() {
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff = null;
    }
    for (int i =
            0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0;
        i
            < 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0
                + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 10;
        i++) {
      f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.f.Ff =] null;
    }
  }
}
>
  FormatterIntegrationTest.idempotentLF:115 bad output for B20128760 expected:<...  void f() {
    x =[
        xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(
            xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(
            XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX,
            XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(
                            Xxxxx.xxxXxxxxXxxx(
                                new XxxxXx(
                                    xxxxxxxxx1.xxxXxxxXx().xxxXxxxx()
                                        + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2(
                "XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx",
                xxxxxxxxXxxxXxXxxxxxxxXx,
                xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx(
                "XxxxxxxxXxxxxxxxxXxx",
                xxxxxxxxXxxxxxxxxXxxXx,
                XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(
            xxxxxxxxxx
                .xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX)
                .xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX),
            xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(
        xxxx(
            xxxx(
                xxxx(
                    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(
            main.format(
                "--offset", "0", "--length", String.valueOf(input.length()), path.toString()))
        .isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>,
          Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<
          XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo
      extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
              Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(
                                        id ->
                                            new ItemKey(
                                                ]fieldsById.get(fv.ge...> but was:<...  void f() {
    x =[ xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx);

    XxxxxxxxxXxx.<Xxxxxx, Xxxxxx>xxxxxxx()
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXX, "Xxxxx xxxxxxxxx xxxxx")
        .xxx(XxxxxxxxxXxxXxxx.Xxxxx.XXXXXxXXXXX, XxxxXxxxxxxxxx.xxxXxxxxxxxxXxxxxXxxxxXxXxxxxx(Xxxxxxxxxx.xxxXxxxXxxxx(x)))
        .xxxxx();

    xxxxxxXxxx(
            xxx.xxxXxXxxxxxxx(
                    new XxxxxxxxxXxxxxxxx.Xxxxxxx()
                        .xxxxXxxxXxx(Xxxxx.xxxXxxxxXxxx(new XxxxXx(xxxxxxxxx1.xxxXxxxXx().xxxXxxxx() + xxxxxxxxx2.xxxXxxxXx().xxxXxxxx())))
                        .xxxxx())
                .xxxXxxxxxx())
        .xxxxxxxxXxxxxxx();

    XXxxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx> xxxxxxxxxXxxXxxXxXxxxxxxxXx =
        XX.xxxxXxxXxxx2("XxxxXxxxxxxxXxxxXxxxXxxxxxxxXxxxXxxXxxxxxxXxxxxxxxx", xxxxxxxxXxxxXxXxxxxxxxXx, xxxxxxxxXxxxXxxxxXxxxXxXxxxxxxxXx)
            .xxxxxxxxXx("XxxxxxxxXxxxxxxxxXxx", xxxxxxxxXxxxxxxxxXxxXx, XX.xxxxxXx(XX.xxxxx(), XX.xxxxxx(XxxxxxxXxxxxxxxxxxXxxxxxxxx.xxxxx)));

    xxXxxxxxxxXxxxXxxx =
        (XxxxXxxx)
            xxxxxxxxXxxxxxxxxx
                .xxx()
                .xxxxxXxxxxxx
                .xxxXxxxxxxx(xxxxxxxxXxxxxxxxxx.xxx().xxxxXxxxx.xxxXxxxxxxXxxx() - 1)
                .xxxXxxx()
                .xxxxXxxxXxXx(X.xx.xxxxxxxxxxxxxxxxxxxxxxxxxxx);

    xxxxxxXxxx(xxxxxxxxxx.xxxXxxxXxxxxXxxxxxxxxxxXxxxXxxxXxxxxXxxx(XXXxXXXXxXX, XXXXXXxXXXxXXXXxXX, XXXXXxXX).xxxxxxxxxxxXxxxXxxxXxxxxx())
        .xxxxxxxxXxxxxxx(xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx1Xxxx, Xxxxx.XXxXXX), xxxxXxxxxxxxxxxXxxxXxxxXxxxx(xxxx2Xxxx, Xxxxx.XXxXXX));

    xxxx(xxxx(xxxx(xxxx(xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx))));

    assertThat(main.format("--offset", "0", "--length", String.valueOf(input.length()), path.toString())).isEqualTo(0);
  }

  private static class GenerateDashboardRowFn
      extends XX.XxXx<
          Xxxx<Xxxx, Xxxxx2.XxxXxxxXxxxxxxxxxx<XxxxxxxxXxxx, Xxxx<XxxxxxxxXxxx, XxxxxxxXxxxxxxxx>>>, Xxxx<Xxxx, XxxxxxxXxxxxxxxxxxXxxxxxxxx>> {}

  public class XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>
      extends XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<XxxxxxxXxxxxxxxXxxxXxxxxXxxxxxx<X>, XxxxXxxxxxxXxxxxxxxx<? extends Xxxxxxxx<X>>> {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  public class Foo extends Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
      implements Xxxxxxxxxxxxx<Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx, Xxxxxxxxxxxxxxxxxxxxxxxxxxxxx>,
          Xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx {}

  {
    Stream<ItemKey> itemIdsStream =
        stream(members)
            .flatMap(
                m ->
                    m.getFieldValues()
                        .entrySet()
                        .stream()
                        .filter(fv -> itemLinkFieldIds.contains(fv.getKey()))
                        .flatMap(
                            fv ->
                                FieldDTO.deserializeStringToListOfStrings(fv.getValue())
                                    .stream()
                                    .map(id -> new ItemKey(]fieldsById.get(fv.ge...>
  FormatterTest.testFormatAosp:72 expected:<...EndUpGettingWrapped([
                    ]because, it, is, jus...> but was:<...EndUpGettingWrapped([]because, it, is, jus...>
  JavadocFormattingTest.joinedAtSign:518->doFormatTest:1342 expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 456789012 @5678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 @5678901] */
class Test {}
>
  JavadocFormattingTest.joinedMultipleAtSign:538->doFormatTest:1342 expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 456789012 @56789012 @5678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 @56789012 @5678901] */
class Test {}
>
  JavadocFormattingTest.joinedTokens:495->doFormatTest:1342 expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 4<b>8901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 4<b>8901] */
class Test {}
>
  JavadocFormattingTest.links:637->doFormatTest:1342 expected:<...12 456789012 4567 <a[
 * href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 456789 <a href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 4567890 <a href=foo>
 * ]foo</a>.
 *
 * <p><a...> but was:<...12 456789012 4567 <a[ href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 456789 <a href=foo>foo</a>.
 *
 * <p>789012 456789012 456789012 456789012 456789012 456789012 456789012 4567890 <a href=foo>]foo</a>.
 *
 * <p><a...>
  JavadocFormattingTest.listItemWrap:798->doFormatTest:1342 expected:<... 234567890 234567890[
 *      ] 234567890
 * </ul>
...> but was:<... 234567890 234567890[] 234567890
 * </ul>
...>
  JavadocFormattingTest.multilineWrap:448->doFormatTest:1342 expected:</**[
 * 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012
 * 45678901
] */
class Test {}
> but was:</**[ 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 456789012 45678901] */
class Test {}
>
  JavadocFormattingTest.oneLinerWouldBe101:428->doFormatTest:1342 expected:</**[
 * 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 5678
] */
class Test {}
> but was:</**[ 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 567890123 5678] */
class Test {}
>
  JavadocFormattingTest.paragraphTagNewlines:1148 expected:<...tempor incididunt ut[
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   * anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
   * labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco
   * laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
   * pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit
   *] anim id est laborum...> but was:<...tempor incididunt ut[ labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
   */
  void f() {}

  /**
   * Lorum Ipsum.
   *
   * <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
   * veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
   *
   * <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.
   *
   * <p>Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit] anim id est laborum...>
  JavadocFormattingTest.paramsContinuationIndented:969->doFormatTest:1342 expected:<... 567890123 567890123[
 *    ] 567890123
 * @param...> but was:<... 567890123 567890123[] 567890123
 * @param...>
  JavadocFormattingTest.unicodeCharacterCountArguableBug:906->doFormatTest:1342 expected:</**[
 * 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12
 * 456789𝄞12 456789𝄞
] */
class Test {}
> but was:</**[ 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞12 456789𝄞] */
class Test {}
>
  MainTest.javadoc:155 expected:<...ed do eiusmod tempor[
 *    ] incididunt ut labor...> but was:<...ed do eiusmod tempor[] incididunt ut labor...>
  PartialFormattingTest.blankAndComment:633 bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>
  PartialFormattingTest.blankAndComment:633 bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>
  PartialFormattingTest.blankAndComment:633 bad output expected:<...itionsByApplication([
                    STUB_GAIA_ID,
                    STUB_APPLICATION_ID,
                    Optional.<Integer>absent(),
                    Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1),
            createIncrementalExpectedDefinition(2),
            createExpectedDefinition(3),
           ] createIncrementalEx...> but was:<...itionsByApplication([STUB_GAIA_ID, STUB_APPLICATION_ID, Optional.<Integer>absent(), Optional.<String>absent())
                .getAchievements())
        .containsExactly(
            createExpectedDefinition(1), createIncrementalExpectedDefinition(2), createExpectedDefinition(3),] createIncrementalEx...>



Tests run: 931, Failures: 251, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Google Java Format Parent .......................... SUCCESS [  0.367 s]
[INFO] Google Java Format ................................. FAILURE [ 17.992 s]
[INFO] google-java-format Plugin for Eclipse 4.5+ ......... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 40.411 s
[INFO] Finished at: 2017-03-24T15:09:22+01:00
[INFO] Final Memory: 82M/778M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.18:test (default-test) on project google-java-format: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/google/google-java-format/214566402/core/target/surefire-reports for the individual test results.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
[ERROR] 
[ERROR] After correcting the problems, you can resume the build with the command
[ERROR]   mvn <goals> -rf :google-java-format
