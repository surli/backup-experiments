/*
 * Copyright (c) 2001-2017, Zoltan Farkas All Rights Reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Additionally licensed with:
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Parts of the code (token definitions ...) are based on samples from:
 * https://javacc.dev.java.net/servlets/ProjectDocumentList?folderID=110&expandFolder=110&folderID=109
 */

options {
    FORCE_LA_CHECK=true;
    JAVA_UNICODE_ESCAPE = true;
    CACHE_TOKENS=true;
    STATIC=false;
}

PARSER_BEGIN(ZCompiler)

package org.spf4j.zel.vm.gen;

import java.util.*;
import java.math.*;
import java.nio.charset.Charset;
import org.spf4j.zel.vm.*;
import org.spf4j.zel.instr.*;
import org.spf4j.zel.vm.ParsingContext.Location;
import java.io.InputStream;

public class ZCompiler
{

    /**
     * Compile a ZEL expression from String.
     */

    public static void compile(String source, String xpr, ParsingContext context) throws ParseException
    {
        ZCompiler parser = new ZCompiler(new java.io.StringReader(xpr));
        parser.source = source;
        parser.mainprogram(context);
    }

   /**
     * Compile a ZEL expression from Stream.
     */
    public static void compile(String source, InputStream is, Charset charset, ParsingContext context)
         throws ParseException
    {
        ZCompiler parser = new ZCompiler(new java.io.InputStreamReader(is, charset));
        parser.source = source;
        parser.mainprogram(context);
    }

    private String source;

}
PARSER_END(ZCompiler)

/**
 * Whitespace
 */
SKIP :
{
    " "
  | "\r"
  | "\t"
  | "\n"
  | <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/**
 * Multiline comment. can contain other multi line comments.
 */
TOKEN: {
  < COMMENT_END : "*/" >
}
SPECIAL_TOKEN: {
 < COMMENT_START : "/*" >  {         
        /*currently commented contents are dropped, but they can be attached to the special token*/
        do {
            Token nextToken = this.getNextToken();
            if (nextToken.kind == EOF || "*/".equals(nextToken.image)) {
                        break;
            }
        } while (true);
 }
}

/* OPERATORS & KEYWORDS*/

TOKEN :
{
	< PLUS: "+" >
  |     < INC: "++" >
  |     < DEC: "--" >
  |	< MINUS: "-" >
  |	< MULTIPLY: "*" >
  |	< DIVIDE: "/" >
  |	< MOD: "%" >
  |	< POW: "**" >
  |	< AND: "&&" >
  |	< SAND: "&" >
  |	< OR: "||" >
  |	< PIPE: "|" >
  |	< GT: ">" >
  |	< LT: "<" >
  |	< LE: "<=" >
  |	< GE: ">=" >
  |	< EQ: "==" >
  |	< NEQ: "!=" >
  |	< XOR: "^" >
  |	< NOT: "!" >
  |	< CONDITION: "?" >
  |	< CLM: ":" >
  |	< EQUAL: "=" >
  |	< SCL: ";">
  |	< LPAREN: "(" >
  |	< RPAREN: ")" >
  |	< LBRACE: "{" >
  |	< RBRACE: "}" >
  |	< LBRACKET: "[" >
  |	< RBRACKET: "]" >
  |	< COMMA: "," >
  |	< DOT: "." >
  |	< CONTEXT: "context">
  |	< RETURN: ("return" | "ret")>
  |	< MEMORY: ("memory" | "mem")>
  |	< SLEEP: "sleep">
  |     < THROW: "throw">
  |	< FOR: "for">
  |	< FUNCTION: ("function" | "func")>
  |	< DETERMINISTIC: ("deterministic" | "det" )>
  |     < SYNC: "sync">
  |     < ASYNC: "async">
  |	< ARG: "arg">
  |	< TRUE: "true" >
  |	< FALSE: "false" >
  |	< NULL: ("null" | "nill") >
  |     < E: "E" >
  |     < PI: "PI" >
  |     < FIRST: "first" >
  |     < IF: "if" >
  |     < ELSE: "else" >
  |     < SWAP: ("<->" | "<=>") >
  |     < USE: "use" >
  |     < DECIMAL: ("decimal" | "dec") >

}

/**
 * Number and String constants 
 */

TOKEN :
{
 < INTEGER:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING:
      ("\"" | "'")
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      ("\"" | "'")
  >
/** experimental 
|  < STRING_START:
      ("\"")
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      ("\\{")
  >
|  < STRING_MID:
      ("}")
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      ("\\{")
  >
|  < STRING_END:
      ("}")
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      ("\"")
  >
*/
|
  < MATCHEXP:
      "`"
      (   (~["`","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","`","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "`"
  >

}

/**
 * ZEL identifiers.
 */

TOKEN : /* Identifier */
{
  < ID: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >

}


void mainprogram(ParsingContext context) :
{
}
{ 
 program(context)
 {context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.HALT.INSTANCE);}
 <EOF>
}


void program(ParsingContext context) :
{
}
{   (((programBlockStatic(context)) | (statement(context)))
    ((<SCL> (programBlockStatic(context) | statement(context)))
     | programBlockStatic(context))*)?
}

void statement(ParsingContext context) :
{
}
{
    LOOKAHEAD(operations(context)) operations(context)
  | expression(context) 
   {
    if (!(context.getLast() instanceof org.spf4j.zel.instr.CALLA)) {
        context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.SYNC.INSTANCE);
    }
   }
  | zreturn(context)
  | forStmt(context)
  | ifStmt(context)
  | (<SLEEP> expression(context) {context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.SLEEP.INSTANCE);})
  | (<THROW> expression(context) {context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.THROW.INSTANCE);})
  | (<SYNC> expression(context) {context.generateCode(new Location(token.beginLine, token.beginColumn),
                                                   org.spf4j.zel.instr.SYNC.INSTANCE);})
  | (<USE> <DECIMAL> <INTEGER> 
    {context.generateCode(new Location(token.beginLine, token.beginColumn),
                        new org.spf4j.zel.instr.MCTX(parseInteger(token.image).intValue()));})
}

/**
 * The ZEL for statement, (similar with for from GO):
 *   for i = 0, result = 0; i < breakup; i = i + 1 {
 *    result = result + part[i] 
 *   };
 */

void forStmt(ParsingContext context) :
{
  int condAddr = -1;
  ParsingContext postAssign = (ParsingContext) context.createSubContext();
  ParsingContext loopBlock = (ParsingContext) context.createSubContext();
  Location loc = null;
}
{
  <FOR> {loc = new Location(token.beginLine, token.beginColumn);}
    ((operations(context) 
    (<COMMA> operations(context))* ) <SCL>)?
    
     {condAddr = context.getAddress();}  
     logical(context) 

    (<SCL> (operations(postAssign) 
    (<COMMA> operations(postAssign))*))?

    programBlockStatic(loopBlock)
    
    {
      context.generateCode(loc,
                        new org.spf4j.zel.instr.FJMP(loopBlock.getAddress() + postAssign.getAddress() + 2));
      context.generateCodeAll(loopBlock);
      context.generateCodeAll(postAssign);
      context.generateCode(new Location(token.beginLine, token.beginColumn),
                              new org.spf4j.zel.instr.JMP(condAddr - context.getAddress()));
    }
  
}

/**
 * The IF statment. (Similar as in GO):
 *     if v > ma {
 *        ma = v
 *     } else if v < mi {
 *        mi = v
 *     }
 */
void ifStmt(ParsingContext context) :
{
 int jmp1;
 int jmp2;
 boolean isElse = false;
 ParsingContext left = (ParsingContext) context.createSubContext();
 ParsingContext right = (ParsingContext) context.createSubContext();
 Location loc = null;
 Location loc2 = null;
}
{
    (<IF> {loc = new Location(token.beginLine, token.beginColumn);}
    logical(context)
    (programBlockStatic(left) | statement(left)))

    (<ELSE> {isElse = true; loc2 = new Location(token.beginLine, token.beginColumn);}
    (programBlockStatic(right) | statement(right)))?
        {context.generateCode(loc, new org.spf4j.zel.instr.FJMP(left.getAddress() + 1 + ((isElse) ? 1 : 0)));
         context.generateCodeAll(left);
         if (isElse) {
         context.generateCode(loc2, new org.spf4j.zel.instr.JMP(right.getAddress() + 1));
         context.generateCodeAll(right);
         }}
}

void programBlockStatic(ParsingContext context) :
{
  ParsingContext subCtx;
  boolean asyncForce = false;
  Location sloc = null;
  Location eloc = null;
}
{
  {sloc = new Location(token.beginLine, token.beginColumn);}

   subCtx = programBlock(context) /* async invocation of a block eventually (<SAND> {asyncForce = true;})? */
    {
     try {
       eloc = new Location(token.beginLine, token.beginColumn);
       Program program = subCtx.getProgramBuilder().toProgram("block", source, org.spf4j.base.Arrays.EMPTY_STRING_ARRAY);
       context.generateCode(program.getDebugInfo(), program.getCode());
     } catch (CompileException ex) {
       throw new ParseException(ex.getMessage());
     }
    }
}

/**
 * A zel program block:
 * {
 *  .....
 * }
 */
ParsingContext programBlock(ParsingContext context) :
{
  ParsingContext subCtx = context.createSubContext();
  Location sloc = null;
  Location eloc = null;
}
{
  {sloc = new Location(token.beginLine, token.beginColumn);}
  <LBRACE> program(subCtx) <RBRACE> 
 {
    eloc = new Location(token.beginLine, token.beginColumn);
    subCtx.generateCode(eloc, org.spf4j.zel.instr.HALT.INSTANCE);
    return subCtx;
 }
}

void zreturn(ParsingContext context) :
{
 int nr = 0;
}
{
  <RETURN> (expression(context))?
 { 
  context.generateCode(new Location(token.beginLine, token.beginColumn), org.spf4j.zel.instr.HALT.INSTANCE);
 }
}

/**
 * The ZEL operations:
 *
 * Assignements: x, y, z = {1, 2, 3}; f(x) = 4;
 * Increment: x++
 * Decrement: x--
 * Swap: x <-> y
 *
 */

void operations(ParsingContext context) :
{
Location loc = null;
}
{
  LOOKAHEAD(assignement(context)) assignement(context)
  | LOOKAHEAD(swap(context)) swap(context) 
  | (assignableExpression(context) (<INC>
   {loc = new Location(token.beginLine, token.beginColumn);
    context.generateCode(loc, org.spf4j.zel.instr.INC.INSTANCE);}
         | <DEC>
   {loc = new Location(token.beginLine, token.beginColumn);
    context.generateCode(loc, org.spf4j.zel.instr.DEC.INSTANCE);}))
}

void assignement(ParsingContext context) :
{
Location loc = null;
int nr = 0;
}
{
   assignableExpression(context) {nr++;loc = new Location(token.beginLine, token.beginColumn);}
   (<COMMA> assignableExpression(context) {nr++;})*
   (<EQUAL> expression(context)
   {
    if (nr > 1) {
      context.generateCode(loc, new org.spf4j.zel.instr.MOVN(nr));
    } else { 
      context.generateCode(loc, org.spf4j.zel.instr.MOV.INSTANCE);
    }
   })
}

void swap(ParsingContext context) :
{
Location loc = null;
}
{
   assignableExpression(context) 
   <SWAP> {loc = new Location(token.beginLine, token.beginColumn);} assignableExpression(context)
   {context.generateCode(loc, org.spf4j.zel.instr.SWAP.INSTANCE);}
 
}



void assignableExpression(ParsingContext context) :
{
String name;
int nrParams;
}
{
    (<ID> {name = token.image; 
            context.generateCode(new Location(token.beginLine, token.beginColumn),
                                 new org.spf4j.zel.instr.LODAX(name));
       })
    ( LOOKAHEAD( 2 )
        ( nrParams = params(context) 
               {context.generateCode(new Location(token.beginLine, token.beginColumn),
                           new org.spf4j.zel.instr.CALLREF(nrParams));} )
	| (((<DOT> <ID>
               {name = token.image;
                context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(name));} ) 
           | (<LBRACKET> expression(context) <RBRACKET>))
            {context.generateCode(new Location(token.beginLine, token.beginColumn),
                   org.spf4j.zel.instr.REF.INSTANCE);})
    )*
}


void expression(ParsingContext context) :
{}
{
    ternary(context)
}

/**
 * The ternary operator:
 * a < 0 ? 1 : 2
 */
void ternary(ParsingContext context) :
{
 int jmp1;
 int jmp2;
 ParsingContext left = (ParsingContext) context.createSubContext();
 ParsingContext right = (ParsingContext) context.createSubContext();
 Location loc = null;
}
{
    logical(context)
(
	( <CONDITION> {loc = new Location(token.beginLine, token.beginColumn);})
        ternary(left)
        <CLM>
        ternary(right)

        {context.generateCode(loc, new org.spf4j.zel.instr.FJMP(left.getAddress() + 2));
         context.generateCodeAll(left);
         context.generateCode(loc, new org.spf4j.zel.instr.JMP(right.getAddress() + 1));
         context.generateCodeAll(right);}
)?
}

/**
 * Logical operators: AND OR XOR
 */

void logical(ParsingContext context) :
{Token x;}
{
    compare(context) (
	( x = <AND> | x = <OR> | x = <XOR> ) 
    compare(context)
	{
	    switch (x.kind) {
		case AND:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.AND.INSTANCE);
		    break;
		case OR:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.OR.INSTANCE);
		    break;
		case XOR:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.XOR.INSTANCE);
		    break;
                default:
                    throw new RuntimeException("Unsupported token type " + x);
	    }
	}

    )*
}

/**
 * Commparison operatiors: < > <= >= == !=
 */

void compare(ParsingContext context) :
{Token x;}
{
    sum(context) (
	( x = <GT> | x = <LT> | x = <GE> | x = <LE> | x = <EQ> | x = <NEQ> )  sum(context)
	{
	    switch (x.kind) {
		case GT:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.GT.INSTANCE);
		    break;
		case LT:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.LT.INSTANCE);
		    break;
		case GE:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.GE.INSTANCE);
		    break;
		case LE:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.LE.INSTANCE);
		    break;
		case EQ:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.EQ.INSTANCE);
		    break;
		case NEQ:
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.NEQ.INSTANCE);
		    break;
                default:
                    throw new RuntimeException("Unsupported token type " + x);

	    }
	}

    )*
}

/**
 * + - operators.
 */

void sum(ParsingContext context) :
{Token x;}
{
    term(context) (
	( x = <PLUS> | x = <MINUS> ) term(context)
	{
	    if ( x.kind == PLUS )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.ADD.INSTANCE);
	    else
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.SUB.INSTANCE);
	}

    )*
}

/**
 * * / % operators
 */

void term(ParsingContext context) :
{Token x;}
{
    exponent(context) (
	( x = <MULTIPLY> | x = <DIVIDE> | x = <MOD> ) exponent(context)
	{
	    if ( x.kind == MULTIPLY )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MUL.INSTANCE);
	    else if ( x.kind == DIVIDE )
                    context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.DIV.INSTANCE);
        else context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MOD.INSTANCE);
	}

    )*
}

/**
 * the exponent operator: ^
 */
void exponent(ParsingContext context) :
{ Location loc = null; }
{
    unaryPost(context) ( LOOKAHEAD( <POW> )
	<POW> {loc = new Location(token.beginLine, token.beginColumn);} unaryPost(context)
	{
             context.generateCode(loc, org.spf4j.zel.instr.POW.INSTANCE);
	}
    )*
}

/**
 * Async invocation operator: &
 */
void unaryPost(ParsingContext context) :
{
 Location loc = null;
 boolean asyncForce = false;
 int nrParams = 0;
}
{
     unary(context, true) {loc = new Location(token.beginLine, token.beginColumn);}
     (LOOKAHEAD(2)
      ( nrParams = params(context) (<SAND> {asyncForce = true;})? 
        {if (asyncForce)  {
            context.generateCode(loc, new org.spf4j.zel.instr.CALLA(nrParams));
          } else {
            context.generateCode(loc, new org.spf4j.zel.instr.CALL(nrParams));
          }})
      | 
	(((<DOT> <ID> {context.generateCode(loc, new org.spf4j.zel.instr.DEREFX(token.image));} ) |
        (<LBRACKET> expression(context) <RBRACKET> {context.generateCode(loc, org.spf4j.zel.instr.DEREF.INSTANCE);} )))
     ) *
}


void unary(ParsingContext context, boolean left) :
{Token x;}
{
    ((x =<MINUS> | x=<NOT> ) element(context, left)
	{
            if ( x.kind == MINUS )
            {
                context.generateCode(new Location(x.beginLine, x.beginColumn), new PUSH(-1));
                context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.MUL.INSTANCE);
            }
            else
            {
                context.generateCode(new Location(x.beginLine, x.beginColumn), org.spf4j.zel.instr.NOT.INSTANCE);
            }
	})
   | element(context, left)

}



void element(ParsingContext context, boolean left) :
{
    String name;
    int nre = 0;
    int nrParams = 0;
}
{
(    constant(context)
//    |       (<STRING_START> (<STRING_MID>)* <STRING_END>)
    | 
        (  <ID> {
            name = token.image; 
            if (left) {
                context.generateCode(new Location(token.beginLine, token.beginColumn),
                              new org.spf4j.zel.instr.LODX(name));
            }} )
    | sysFunction(context)
    | ( <FIRST> nrParams = params(context) {context.generateCode(new Location(token.beginLine, token.beginColumn),
                                new org.spf4j.zel.instr.FIRST(nrParams));})
    |  <LPAREN> expression(context) <RPAREN>
    |  (<LBRACE>(expression(context) {nre++;} (<COMMA> expression(context) {nre++;})*)?<RBRACE> 
       {
        context.generateCode(new Location(token.beginLine, token.beginColumn),
                            new org.spf4j.zel.instr.ARR(nre));
       })
    |  (<PIPE>expression(context)<PIPE> 
       {
        context.generateCode(new Location(token.beginLine, token.beginColumn),
                        org.spf4j.zel.instr.ABS.INSTANCE);
       })
  )
}

int params(ParsingContext context) :
{
    int i=0;
}
{
    <LPAREN>
        (expression(context) {i++;} (<COMMA> expression(context) {i++;} )*)?
    <RPAREN>
    {return i;}
}


void constant(ParsingContext context) :
{
}
{
   (
     <FLOATING_POINT>
          {   try {
                if (token.image.endsWith("f") || token.image.endsWith("F")) {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Float.parseFloat(token.image)));
                } else if (token.image.endsWith("d") || token.image.endsWith("D")) {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Double.parseDouble(token.image)));
                } else {
                    context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(new BigDecimal(token.image)));
                }
              } catch (NumberFormatException ee) {
                  throw new ParseException(ee.toString());
              }
          }
    |  <INTEGER>
      {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(parseInteger(token.image)));}
    |   <TRUE>
	  {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Boolean.valueOf(true)));}
    |   <FALSE>
	  {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Boolean.valueOf(false)));}
    |  <CHARACTER>
      {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(token.image.substring(1, token.image.length()-1)));}
    |  <NULL>
      {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(ResultCache.NULL));}
    |  <STRING>
      {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(org.spf4j.base.Strings.unescape(token.image.substring(1, token.image.length()-1))));}
    |  <MATCHEXP>
    {  String rExp = token.image.substring(1, token.image.length()-1);
       context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(rExp));}
    )
    | <E> {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Math.E));}
    | <PI> {context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(Math.PI));}
    | <MEMORY> {context.generateCode(new Location(token.beginLine, token.beginColumn), PUSHM.INSTANCE);}
}

JAVACODE
Number parseInteger(String intStr)
{
       Number obj;
       if (intStr.endsWith("l") || intStr.endsWith("L")) {
             intStr = intStr.substring(0, intStr.length() - 1);
             try {
                obj= Long.decode(intStr);
             } catch(NumberFormatException  ex2) {
                obj= new BigInteger(intStr);
             }
       } else {
           try {
             obj = Integer.decode(intStr);
           } catch(NumberFormatException  e) {
             try {
                obj = Long.decode(intStr);
             } catch(NumberFormatException  ex2) {
                obj = new BigInteger(intStr);
             }
           }
       }
       return obj;
}

void sysFunction(ParsingContext context) :
{
    int count = 0;
    List parameterNames = new ArrayList();
    Program.Type pType = Program.Type.NONDETERMINISTIC;
    Program.ExecutionType eType = Program.ExecutionType.ASYNC;
    String staticName = null;
    String functionName = "";
    Token x;
    ParsingContext pc;
}
{

 (x = <FUNCTION>
    (<DETERMINISTIC> {pType = Program.Type.DETERMINISTIC;})?
    ((<SYNC> {eType = Program.ExecutionType.SYNC;}) 
     | (<ASYNC> {eType = Program.ExecutionType.ASYNC;}))?
    (<ID> {staticName = token.image;})?
 (<LPAREN>
 (<ID> {parameterNames.add(token.image);}
 (<COMMA> <ID> {parameterNames.add(token.image);} )*)
 <RPAREN>)?)
   pc = programBlock(context)
   {ProgramBuilder p= pc.getProgramBuilder();
    p.setType(pType);
    p.setExecType(eType);
    try { 
      if (staticName != null) {
          context.staticSymbol(staticName, null);
          functionName = staticName;
      } else {
          functionName = "anonFunc@" + (x.beginLine - 1);
      }
      Program prog = p.toProgram(functionName, source, parameterNames);
      if (staticName != null) {
          context.staticSymbol(staticName, prog);
      }
      context.generateCode(new Location(token.beginLine, token.beginColumn), new PUSH(prog));
    } catch (CompileException e) {
        throw new ParseException(e.toString());
    }
    }

}






