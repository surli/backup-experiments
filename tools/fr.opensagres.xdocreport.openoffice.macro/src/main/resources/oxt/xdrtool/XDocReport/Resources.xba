<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Resources" script:language="StarBasic">REM  *****  BASIC  *****

Option Explicit

Public gResourcesDialog as Object
Private EMPTY_PARAM_VALUE 
Public Const EMPTY_PARAM_VALUE =  &quot;___empty&quot;

&apos; Tree   
Private gResourcesTreeMouseListener as Object
Private gSelectedField as Object

&apos; Open Resources Dialog
Public Sub OpenResourcesDialog

	DialogLibraries.LoadLibrary( &quot;XDocReport&quot; )
	gResourcesDialog = CreateUnoDialog( DialogLibraries.XDocReport.ResourcesDialog )	
	
	&apos; Load repository list bow with list repository
	LoadRepositoryListBox()   

	InitializeResourcesTree()
	gResourcesDialog.Execute ()
		
End Sub

&apos;==================================================
&apos;   Repository ListBox (list of repository).
&apos;==================================================

&apos; Populate Repository ListBox with repository list.
Public Sub LoadRepositoryListBox()
	
	Dim repositories() as Variant
	Dim baseAddress as String
	Dim repository as String
	Dim repositoryListBox as Object
	
	repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
	repositoryListBox.removeItems(0, repositoryListBox.GetItemCount())
	
 	Settings.LoadSettingsIfNeeded()
	repositories = Settings.repositories	
	
	If (IsArray(repositories)) Then 
		Dim size as Long
		Dim i as Integer
		size = UBound(repositories)
		If (size &gt; 0) Then 		
			For i = 0 To size Step 6
				baseAddress = repositories(i)	
				repositoryListBox.AddItem baseAddress, i
			Next
		End If
	End If
		
End Sub

Public Sub SelectLastRepository()
	Dim repositoryListBox as Object
	repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
	repositoryListBox.SelectItemPos( repositoryListBox.GetItemCount()-1, True )
	SelectRepository()
End Sub

Public Sub SelectRepository
	Dim selectedIndex as Integer
		
	gResourcesDialog.getControl(&quot;RefreshCommandButton&quot;).Model.Enabled = True
	gResourcesDialog.getControl(&quot;DownloadCommandButton&quot;).Model.Enabled = False
	gResourcesDialog.getControl(&quot;OpenLocalCommandButton&quot;).Model.Enabled = False
	gResourcesDialog.getControl(&quot;UploadCommandButton&quot;).Model.Enabled = False
	gResourcesDialog.getControl(&quot;ServiceTypeLabel&quot;).Text=&quot;&quot;	
	gResourcesDialog.getControl(&quot;AllwowedChunkingCheckBox&quot;).State= 0
	gResourcesDialog.getControl(&quot;TimeoutLabel&quot;).Text=&quot;&quot;
	gResourcesDialog.getControl(&quot;EditRepositoryCommandButton&quot;).Model.Enabled = False
	gResourcesDialog.getControl(&quot;RemoveRepositoryCommandButton&quot;).Model.Enabled = False
								
	selectedIndex = GetSelectedRepositoryIndex()
	If (selectedIndex &lt;&gt; -1) Then
		Dim repositories() as String
		Dim baseAddress as String
		Dim user as String
		Dim password as String
		Dim serviceType as String
		Dim chunk as String
		Dim timeout as String
				
 		Settings.LoadSettingsIfNeeded()
		repositories = Settings.repositories	
		baseAddress= repositories(selectedIndex*6+0)
		user= repositories(selectedIndex*6+1)
		password= repositories(selectedIndex*6+2)
		chunk = repositories(selectedIndex*6+3)
		timeout = repositories(selectedIndex*6+4)
		serviceType= repositories(selectedIndex*6+5)						
		
		gResourcesDialog.getControl(&quot;ServiceTypeLabel&quot;).Text= serviceType
		If (chunk = &quot;true&quot;) Then 
			gResourcesDialog.getControl(&quot;AllwowedChunkingCheckBox&quot;).State= 1
		End If
		gResourcesDialog.getControl(&quot;TimeoutLabel&quot;).Text= timeout
		gResourcesDialog.getControl(&quot;EditRepositoryCommandButton&quot;).Model.Enabled = True
		gResourcesDialog.getControl(&quot;RemoveRepositoryCommandButton&quot;).Model.Enabled = True		
				
		ExecuteRepositoryServiceClient_Root(baseAddress, user, password, serviceType, chunk, timeout)
	End If
End Sub

Public Function GetSelectedRepositoryIndex() as Integer
	Dim repositoryListBox as Object
	repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
	GetSelectedRepositoryIndex = repositoryListBox.getSelectedItemPos()
End Function
                                 
Public Function ExecuteRepositoryServiceClient (ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String, ByVal serviceName as String, ByVal resourcePath as String, ByVal outFilePath As String, ByVal chunk As String, ByVal timeout As String) as String

	ExecuteRepositoryServiceClient() = &quot;&quot;
	&apos;1) Check if Preview is available
	If Not (IsRepositoryAvailable()) Then
		MsgBox &quot;REST/SOAP Repository is not available. Please fix settings of XDocReport-Settings.&quot;
		Exit Function
	End If	
	
	Dim errFilePath as String
	Dim batOrShFile as String
	batOrShFile = Settings.GetXDRToolsRepBatFileSetting()
		
	Dim repositoryFolder as String		
	repositoryFolder = Settings.GetRepositoryFolderSetting()

	If (outFilePath = &quot;&quot;) Then 
		outFilePath = ConvertFromURL(repositoryFolder + &quot;/&quot; + serviceName+ &quot;.txt&quot;)
	Else 
		outFilePath = ConvertFromURL(outFilePath)
	End If
	errFilePath = ConvertFromURL(repositoryFolder + &quot;/&quot; + serviceName+ &quot;.err.txt&quot;)
		
	Dim cmd as String	 
	cmd = GenerateRepositoryCommand(baseAddress, user, password, serviceType, serviceName, outFilePath, errFilePath, resourcePath, chunk, timeout)	 		
	
	Dim message as String
	message= &quot;Executing &quot;
	If (serviceType = &quot;JAXWS&quot;) Then 
		message= message + &quot;WEB Service (SOAP)&quot;
	Else 
		message= message + &quot;REST Service&quot;	
	End If
	message= message + &quot; &quot; + baseAddress	
    If Not (Right(baseAddress, 1) = &quot;/&quot;)Then
		message = message + &quot;/&quot;
    End If
	message= message + serviceName    
	
	&apos; Open Popup Work In Process
	WorkInProcess.OpenWorkInProcess(message, 20)	
	
	&apos; 5) Execute command with xdrtools-rep.bat/xdrtools-rep.sh
	&apos;Shell(ConvertToURL(batOrShFile), 4,cmd &amp;&quot; &gt;C:/log.text&quot;, True) 
	Shell(ConvertToURL(batOrShFile), 2, cmd, True) 

	&apos; Close Popup Work In Process
	WorkInProcess.CloseWorkInProcess()
	
	If (FileExists(errFilePath)) Then 
		&apos; 6.1) an error file was generated in a file -err.txt, display the content of this file in the textbox of the Dialog ErrorDialog.
		OpenErrorDialog(errFilePath)
	Else
		&apos; 6.2) Get the content of the out file
		If (FileExists(outFilePath)) Then 
			ExecuteRepositoryServiceClient = outFilePath
		End If		
	End If
	
End Function

Public Function ExecuteRepositoryServiceClient_Name(ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String, ByVal chunk as String, ByVal timeout as String) as String
	ExecuteRepositoryServiceClient_Name = &quot;&quot;
	Dim outFilePath as String
	outFilePath = ExecuteRepositoryServiceClient(baseAddress, user, password, serviceType, &quot;name&quot;, &quot;&quot;, &quot;&quot;, chunk, timeout)
	If (outFilePath &lt;&gt; &quot;&quot;) Then 
		ExecuteRepositoryServiceClient_Name = GetTextFileContent(outFilePath)
	End If
End Function

Public Function ExecuteRepositoryServiceClient_Root(ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String, ByVal chunk as String, ByVal timeout as String) as String
	ExecuteRepositoryServiceClient_Root = &quot;&quot;
	Dim outFilePath as String
	outFilePath = ExecuteRepositoryServiceClient(baseAddress, user, password, serviceType, &quot;root&quot;, &quot;&quot;, &quot;&quot;, chunk, timeout)
	If (outFilePath &lt;&gt; &quot;&quot;) Then 
		&apos; Open Popup Work In Process
		WorkInProcess.OpenWorkInProcess(&quot;Populating resources tree...&quot;, 0)
		&apos; Populate Tree
		LoadResourcesTree(outFilePath)
		WorkInProcess.CloseWorkInProcess()
		ExecuteRepositoryServiceClient_Root = True		
	Else 
		CleanResourcesTree()
		ExecuteRepositoryServiceClient_Root = False
	End If
End Function

Public Function ExecuteRepositoryServiceClient_Download(ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String,  ByVal resourceId as String, ByVal downloadedFilePath as String, ByVal chunk as String, ByVal timeout as String) as String
	ExecuteRepositoryServiceClient_Download = &quot;&quot;
	Dim outFilePath as String
	Dim methodName as String
	methodName = &quot;downloadLarge&quot;
	if (serviceType = &quot;JAXWS&quot;) Then 
		methodName = &quot;download&quot;
	End If
	outFilePath = ExecuteRepositoryServiceClient(baseAddress, user, password, serviceType, methodName, resourceId, downloadedFilePath, chunk, timeout)
	If (outFilePath &lt;&gt; &quot;&quot;) Then 
		ExecuteRepositoryServiceClient_Download = outFilePath
	End If
End Function

Public Function ExecuteRepositoryServiceClient_Upload(ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String,  ByVal resourceId as String, ByVal fileToUploadFilePath as String, ByVal chunk as String, ByVal timeout as String) as Boolean
	ExecuteRepositoryServiceClient_Upload = False
	Dim outFilePath as String
	Dim methodName as String
	methodName = &quot;uploadLarge&quot;
	if (serviceType = &quot;JAXWS&quot;) Then 
		methodName = &quot;upload&quot;
	End If
	outFilePath = ExecuteRepositoryServiceClient(baseAddress, user, password, serviceType, methodName, resourceId, fileToUploadFilePath, chunk, timeout)
	If (outFilePath &lt;&gt; &quot;&quot;) Then 
		ExecuteRepositoryServiceClient_Upload = True
	End If
End Function

Public Function GenerateRepositoryCommand(ByVal baseAddress as String, ByVal user as String, ByVal password as String, ByVal serviceType as String, ByVal serviceName as String, ByVal outFilePath as String, ByVal errFilePath as String, ByVal resources as String, ByVal chunk as String, ByVal timeout as String) As String
    &apos; 1) -baseAddress
    If (baseAddress = &quot;&quot;) Then 
    	baseAddress = EMPTY_PARAM_VALUE
    End If
    GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + baseAddress + &quot;&quot;&quot; &quot;
    &apos; 2) -user
    If (user = &quot;&quot;) Then 
	    user = EMPTY_PARAM_VALUE
    End If
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + user + &quot;&quot;&quot; &quot;    	
    &apos; 3) -password
    If (password = &quot;&quot;) Then     
	    password = EMPTY_PARAM_VALUE    
	End If    
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + password + &quot;&quot;&quot; &quot;        
    &apos; 4) -serviceType
    If (serviceType = &quot;&quot;) Then     
	    serviceType = EMPTY_PARAM_VALUE        
	End If        
   	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + serviceType + &quot;&quot;&quot; &quot;            
    &apos; 5) -serviceName
    If (serviceName = &quot;&quot;) Then     
	    serviceName = EMPTY_PARAM_VALUE            
	End If        
    GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + serviceName + &quot;&quot;&quot; &quot;                
    &apos; 6) -out
    If (outFilePath = &quot;&quot;) Then     
   	    outFilePath = EMPTY_PARAM_VALUE            
	End If        
    GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + outFilePath + &quot;&quot;&quot; &quot;
    &apos; 7) -err
    If (errFilePath = &quot;&quot;) Then     
   	    errFilePath = EMPTY_PARAM_VALUE                
	End If   	    
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + errFilePath + &quot;&quot;&quot; &quot;    
    &apos; 8) -resources
    If (resources = &quot;&quot;) Then     
   	    resources = EMPTY_PARAM_VALUE                
	End If   	    
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + resources + &quot;&quot;&quot; &quot;
	&apos; 9) -chunk
	If (chunk = &quot;&quot;) Then     
   	    chunk = EMPTY_PARAM_VALUE                
	End If   	    
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + chunk + &quot;&quot;&quot; &quot;    	
	&apos; -timeout
	If (timeout = &quot;&quot;) Then     
   	    timeout = EMPTY_PARAM_VALUE                
	End If   	    
	GenerateRepositoryCommand = GenerateRepositoryCommand + &quot; &quot;&quot;&quot; + timeout + &quot;&quot;&quot;&quot;    			    	
End Function

Private Function IsRepositoryAvailable() as Boolean
	&apos; 1) Check if bat/sh is available
	Dim batOrShFile as String
	batOrShFile = Settings.GetXDRToolsRepBatFileSetting()
	If Not (FileExists(batOrShFile)) Then 
		Settings.OpenSettingsDialog()
	End If
	batOrShFile = Settings.GetXDRToolsRepBatFileSetting()
	IsRepositoryAvailable= FileExists(batOrShFile)
End Function

&apos;==================================================
&apos;   Resources Tree (list of repositories coming from the selected *.repositories.xml file of Model ListBox ).
&apos;==================================================

Private Sub InitializeResourcesTree()
	Dim oResourcesTreeControl as Object
	oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)
	
	gResourcesTreeMouseListener = createUnoListener(&quot;ResourcesTreeMouseListener_&quot;, &quot;com.sun.star.awt.XMouseListener&quot;)
	oResourcesTreeControl.addMouselistener(gResourcesTreeMouseListener)   
End Sub

rem~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sub ResourcesTreeMouseListener_mousePressed(ByVal oEvt as Object)
rem~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	Dim oResourcesTreeControl as Object
    oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)
    If Not (oResourcesTreeControl.Model.DataModel is Nothing)  Then 
    
		Dim selectedValue 	
		If Not (oEvt is Nothing) And Not (oEvt.Source is Nothing) And Not (oEvt.Source.Selection is Nothing) Then 
			selectedValue = oEvt.Source.Selection.DataValue
			gResourcesDialog.getControl(&quot;DownloadCommandButton&quot;).Model.Enabled=False	
			
			If IsArray(selectedValue) Then 
				&apos; resource is selected, &quot;Download&quot; button is enabled.
				gResourcesDialog.getControl(&quot;DownloadCommandButton&quot;).Model.Enabled=True
				
				&apos; try if resource was already downloaded?
				Dim resourcePath as String			
				resourcePath = selectedvalue(0)	
				
				Dim localFilePath as String
				localFilePath = GetCurrentResourcesFolder() + &quot;/&quot; + resourcePath
				
				Dim isFileExists as Boolean
				isFileExists = FileExists(ConvertFromURL(localFilePath))
				gResourcesDialog.getControl(&quot;OpenLocalCommandButton&quot;).Model.Enabled= isFileExists
				gResourcesDialog.getControl(&quot;UploadCommandButton&quot;).Model.Enabled= isFileExists
			End If		
		End If		
	End If				
end sub

sub ResourcesTreeMouseListener_mouseReleased(oEvt)
end sub
sub ResourcesTreeMouseListener_mouseEntered(oEvt)
end sub
sub ResourcesTreeMouseListener_mouseExited(oEvt)
end sub
sub ResourcesTreeMouseListener_disposing(oEvt)
end sub

Private Sub DisposeResourcesTree()
	Dim oResourcesTreeControl as Object
	oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)
	
	oResourcesTreeControl.removeMouselistener(gResourcesTreeMouseListener)
End Sub

&apos; When *fields.xml is selected in the Model ListBox, Treeview must be refreshed with fields coming from the *.fields.xml
Private Sub LoadResourcesTree(ByVal xmlFile as String)

	&apos; Initialize the gTreeDataModel MutableTreeDataModel
	Dim oResourcesTreeControl as Object
    oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)
	gTreeDataModel = createUnoService(&quot;com.sun.star.awt.tree.MutableTreeDataModel&quot;)
	&apos;oElement = gTreeDataModel.createNode( &quot;Root&quot;, true )	
	&apos;gTreeDataModel.setRoot(oElement) 	

	RepositoryReadXmlFromUrl(xmlFile)
	
	oResourcesTreeControl.Model.DataModel = gTreeDataModel
	
End Sub

Private Sub CleanResourcesTree()
	Dim oResourcesTreeControl as Object
    oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)
    oResourcesTreeControl.Model.DataModel = Nothing
End Sub

&apos; This routine demonstrates how to use the Universal Content Broker&apos;s
&apos;  SimpleFileAccess to read from a local file.
Sub RepositoryReadXmlFromUrl( cUrl )
   &apos; The SimpleFileAccess service provides mechanisms to open, read, write files,
   &apos;  as well as scan the directories of folders to see what they contain.
   &apos; The advantage of this over Basic&apos;s ugly file manipulation is that this
   &apos;  technique works the same way in any programming language.
   &apos;  Furthermore, the program could be running on one machine, while the SimpleFileAccess
   &apos;  accesses files from the point of view of the machine running OOo, not the machine
   &apos;  where, say a remote Java or Python program is running.
   Dim oSimpleFileAccess as Object, oInputStream as Object
   oSimpleFileAccess = createUnoService( &quot;com.sun.star.ucb.SimpleFileAccess&quot; )
   
   &apos; Open input file.
   oInputStream = oSimpleFileAccess.openFileRead( cUrl )

   RepositoryReadXmlFromInputStream( oInputStream )

   oInputStream.closeInput()
End Sub

Sub RepositoryReadXmlFromInputStream( oInputStream )
   &apos; Create a Sax Xml parser.
   Dim oSaxParser as Object, oDocEventsHandler as Object, oInputSource as Object
   oSaxParser = createUnoService( &quot;com.sun.star.xml.sax.Parser&quot; )

   &apos; Create a document event handler object.
   &apos; As methods of this object are called, Basic arranges
   &apos;  for global routines (see below) to be called.   
   oDocEventsHandler = RepositoryCreateDocumentHandler()
   
   &apos; Plug our event handler into the parser.
   &apos; As the parser reads an Xml document, it calls methods
   &apos;  of the object, and hence global subroutines below
   &apos;  to notify them of what it is seeing within the Xml document.
   oSaxParser.setDocumentHandler( oDocEventsHandler )
   
   &apos; Create an InputSource structure.
   oInputSource = createUnoStruct( &quot;com.sun.star.xml.sax.InputSource&quot; )
   With oInputSource
      .aInputStream = oInputStream   &apos; plug in the input stream
   End With
   
   &apos; Now parse the document.
   &apos; This reads in the entire document.
   &apos; Methods of the oDocEventsHandler object are called as
   &apos;  the document is scanned.
   oSaxParser.parseStream( oInputSource )
End Sub


&apos;==================================================
&apos;   Xml Sax document handler.
&apos;==================================================


&apos; Global variables used by our document handler.
&apos;
&apos; Once the Sax parser has given us a document locator,
&apos;  the glLocatorSet variable is set to True,
&apos;  and the goLocator contains the locator object.
&apos;
&apos; The methods of the locator object has cool methods
&apos;  which can tell you where within the current Xml document
&apos;  being parsed that the current Sax event occured.
&apos; The locator object implements com.sun.star.xml.sax.XLocator.
&apos;
Private goLocator As Object
Private glLocatorSet As Boolean
Private gTreeDataModel as Object
Private gParent as Object


&apos; This creates an object which implements the interface
&apos;  com.sun.star.xml.sax.XDocumentHandler.
&apos; The doucment handler is returned as the function result.
Function RepositoryCreateDocumentHandler()
   &apos; Use the CreateUnoListener function of Basic.
   &apos; Basic creates and returns an object that implements a particular interface.
   &apos; When methods of that object are called,
   &apos;  Basic will call global Basic functions whose names are the same
   &apos;  as the methods, but prefixed with a certian prefix.
   Dim oDocHandler as Object
   oDocHandler = CreateUnoListener( &quot;RepositoryDocHandler_&quot;, &quot;com.sun.star.xml.sax.XDocumentHandler&quot; )
   
   glLocatorSet = False
   gParentNode= Nothing
   treeNodeIndex = 0
   RepositoryCreateDocumentHandler() = oDocHandler
End Function



&apos;==================================================
&apos;   Methods of our document handler call these
&apos;    global functions.
&apos;   These methods look strangely similar to
&apos;    a SAX event handler.  ;-)
&apos;   These global routines are called by the Sax parser
&apos;    as it reads in an XML document.
&apos;   These subroutines must be named with a prefix that is
&apos;    followed by the event name of the com.sun.star.xml.sax.XDocumentHandler interface.
&apos;==================================================

Sub RepositoryDocHandler_startDocument()
   &apos;Print &quot;Start document&quot;
End Sub


Sub RepositoryDocHandler_endDocument()
End Sub

Dim gParentNode as Object
Dim treeNode as Object
Dim treeNodeIndex as Integer
	
Sub RepositoryDocHandler_startElement( cName As String, oAttributes As com.sun.star.xml.sax.XAttributeList )	
	If (cName = &quot;category&quot; or cName = &quot;document&quot; or cName = &quot;template&quot; ) Then		
		treeNodeIndex = treeNodeIndex + 1
		Dim resourceName as String
		Dim isFolder as Boolean	
		
		resourceName = oAttributes.getValueByName(&quot;name&quot;)
		isFolder = (cName &lt;&gt; &quot;document&quot;)
		
		If (gParentNode is Nothing) Then 
			treeNode = gTreeDataModel.createNode( resourceName, true )	
			gTreeDataModel.setRoot(treeNode) 			
		Else
			treeNode = treeAddChildElement(gTreeDataModel, gParentNode,  resourceName, isFolder)
		End If

		If (isFolder) Then 
			treeNode.DataValue = True
			gParentNode = treeNode
		Else
			&apos; File type, set the resource id
			Dim resourceId as String
			resourceId = oAttributes.getValueByName(&quot;id&quot;)
				
			Dim resourcePath as String			
			Dim tempTreeNode as Object
			tempTreeNode = treeNode
			
			While Not (tempTreeNode.GetParent() Is Nothing)
				If (resourcePath = &quot;&quot;) Then 
					resourcePath = tempTreeNode.GetDisplayValue()
				Else
					resourcePath = tempTreeNode.GetDisplayValue() + &quot;/&quot; + resourcePath
				End If
				tempTreeNode = 	tempTreeNode.GetParent()
			Wend				
			
			Dim values(2) as String
			&apos; Resource path (for local)
			values(0) = resourcePath
			values(1) = resourceId
			treeNode.DataValue = values				
			
		End If
	End If
End Sub


Sub RepositoryDocHandler_endElement( cName As String )
	If (cName = &quot;category&quot; or cName = &quot;document&quot; or cName = &quot;template&quot; ) Then	
		If (treeNode Is Nothing) Then 
			&apos; Last TreeNode is a file and folder is closed
			&apos; =&gt; Get parent tree node
			gParentNode = gParentNode.getParent()
		Else
			If Not IsArray(treeNode.DataValue) Then 
				&apos; TreeNode folder is closed, get parent tree node
				gParentNode = treeNode.getParent()
			End If
		End If
		treeNode = Nothing
	End If
End Sub

Sub RepositoryDocHandler_characters( cChars As String )
End Sub


Sub RepositoryDocHandler_ignorableWhitespace( cWhitespace As String )
End Sub


Sub RepositoryDocHandler_processingInstruction( cTarget As String, cData As String )
End Sub


Sub RepositoryDocHandler_setDocumentLocator( oLocator As com.sun.star.xml.sax.XLocator )
   &apos; Save the locator object in a global variable.
   &apos; The locator object has valuable methods that we can
   &apos;  call to determine
   goLocator = oLocator
   
   glLocatorSet = True
End Sub

Public Sub DownloadResource
	Dim oResourcesTreeControl as Object
	oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)

	Dim selectedValue 
	selectedValue = oResourcesTreeControl.Selection.DataValue
	
	If IsArray(selectedValue) Then 
		Dim resourcePath as String
		Dim resourceId as String
			
		resourcePath = selectedvalue(0)	
		resourceId = selectedvalue(1)
		If (resourceId = &quot;&quot; ) Then 
			resourceId = XDocReport_Replace (resourcePath, &quot;/&quot;, &quot;____&quot;, True)		
		End If				
		
		Dim fileToDownloadPath as String
		fileToDownloadPath = GetCurrentResourcesFolder() + &quot;/&quot; + resourcePath

		Dim repositoryListBox as Object 
		Dim selectedIndex as Integer
		repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
		selectedIndex = repositoryListBox.getSelectedItemPos()
		Dim repositories() as String
		Dim baseAddress as String
		Dim user as String
		Dim password as String
		Dim serviceType as String
		Dim chunk as String
		Dim timeout as String
				
		Settings.LoadSettingsIfNeeded()
		repositories = Settings.repositories	
		baseAddress= repositories(selectedIndex*6+0)		
		user= repositories(selectedIndex*6+1)
		password= repositories(selectedIndex*6+2)
		chunk= repositories(selectedIndex*6+3)			
		timeout= repositories(selectedIndex*6+4)			
		serviceType= repositories(selectedIndex*6+5)			
			
		fileToDownloadPath = ExecuteRepositoryServiceClient_Download(baseAddress, user, password, serviceType, resourceId, fileToDownloadPath, chunk, timeout)
		If (fileToDownloadPath &lt;&gt; &quot;&quot;) Then 		
			If (OpenLocalResource(fileToDownloadPath)) Then 
				gResourcesDialog.getControl(&quot;OpenLocalCommandButton&quot;).Model.Enabled = True
				gResourcesDialog.getControl(&quot;UploadCommandButton&quot;).Model.Enabled = True				
			End If
		End If
	End If
End Sub


Private Function OpenLocalResource(ByVal outFilePath as String) as Boolean
	OpenLocalResource = False
	If (FileExists(outFilePath)) Then 
		Dim Doc
		Doc = starDeskTop.loadComponentFromUrl (ConvertToUrl(outFilePath), &quot;_blank&quot;, 0, Array())
		OpenLocalResource = True
	Else
		MsgBox &quot;Impossible to open the file &quot; + outFilePath
	End If
End Function

Public Sub OpenSelectedLocalResource
	Dim oResourcesTreeControl as Object
	oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)

	Dim selectedValue 
	selectedValue = oResourcesTreeControl.Selection.DataValue
	
	If IsArray(selectedValue) Then 
		Dim resourcePath as String			
		resourcePath = selectedvalue(0)	
		
		Dim localFilePath as String
		localFilePath = GetCurrentResourcesFolder() + &quot;/&quot; + resourcePath
		
		If (OpenLocalResource(localFilePath)) Then 
			gResourcesDialog.getControl(&quot;OpenLocalCommandButton&quot;).Model.Enabled = False
			gResourcesDialog.getControl(&quot;UploadCommandButton&quot;).Model.Enabled = False			
		End If 
	End If
End Sub

Private Function GetCurrentResourcesFolder()
	Dim baseFolder as String
	Dim repositoryListBox as Object				
	repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
	
	Dim selectedIndex as Integer
	selectedIndex = repositoryListBox.getSelectedItemPos()
	If (selectedIndex &lt;&gt; -1) Then		
 		Settings.LoadSettingsIfNeeded()
		repositories = Settings.repositories	
		baseFolder= repositories(selectedIndex*6+0)
		baseFolder = XDocReport_Replace (baseFolder, &quot;/&quot;, &quot;_&quot;, True)
		baseFolder = XDocReport_Replace (baseFolder, &quot;:&quot;, &quot;_&quot;, True)
		baseFolder = XDocReport_Replace (baseFolder, &quot;.&quot;, &quot;_&quot;, True)		
		baseFolder = XDocReport_Replace (baseFolder, &quot;?&quot;, &quot;_&quot;, True)		
		baseFolder = XDocReport_Replace (baseFolder, &quot;&amp;&quot;, &quot;_&quot;, True)				
		GetCurrentResourcesFolder() = Settings.GetRepositoryFolderSetting() + &quot;/&quot; + baseFolder
	Else
		GetCurrentResourcesFolder() = &quot;&quot;			
	End If
	
End Function 

Public Sub UploadResource

	Dim selectedResource
	selectedResource = GetSelectedResource()
	
	If Not (selectedResource is Nothing) Then 
		Dim resourcePath as String
		Dim resourceId as String
			
		resourcePath = selectedResource(0)	
		resourceId = selectedResource(1)
		If (resourceId = &quot;&quot; ) Then 
			resourceId = XDocReport_Replace (resourcePath, &quot;/&quot;, &quot;____&quot;, True)		
		End If				
		
		Dim fileToUploadPath as String
		fileToUploadPath = GetCurrentResourcesFolder() + &quot;/&quot; + resourcePath

		Dim repositoryListBox as Object 
		Dim selectedIndex as Integer
		repositoryListBox = gResourcesDialog.getControl(&quot;RepositoryListBox&quot;)
		selectedIndex = repositoryListBox.getSelectedItemPos()
		Dim repositories() as String
		Dim baseAddress as String
		Dim user as String
		Dim password as String
		Dim serviceType as String		
		Dim chunk as String
		Dim timeout as String
		
		Settings.LoadSettingsIfNeeded()
		repositories = Settings.repositories	
		baseAddress= repositories(selectedIndex*6+0)		
		user= repositories(selectedIndex*6+1)
		password= repositories(selectedIndex*6+2)
		chunk= repositories(selectedIndex*6+3)			
		timeout= repositories(selectedIndex*6+4)
		serviceType= repositories(selectedIndex*6+5)					
								
		ExecuteRepositoryServiceClient_Upload(baseAddress, user, password, serviceType, resourceId, fileToUploadPath, chunk, timeout)
				
	End If
End Sub


Private Function GetSelectedResource() as Object
	GetSelectedResource()= Nothing
	Dim oResourcesTreeControl as Object
	oResourcesTreeControl = gResourcesDialog.getControl(&quot;ResourcesTreeControl&quot;)

	Dim selectedValue 
	selectedValue = oResourcesTreeControl.Selection.DataValue
	
	If IsArray(selectedValue) Then 
		GetSelectedResource() = selectedValue
	End If
End Function

</script:module>