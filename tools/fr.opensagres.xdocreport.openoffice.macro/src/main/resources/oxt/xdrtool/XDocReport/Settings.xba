<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Settings" script:language="StarBasic">REM  *****  BASIC  *****

Public Const XMLFIELDS_EXTENTION = &quot;.fields.xml&quot;
Public Const XDRTOOLS_BAT = &quot;xdrtools.bat&quot;

Public Const FIELDS_DIRECTORY_PARAM =  &quot;FIELDS_DIRECTORY_PARAM&quot;
Public Const FIELDS_FILENAME_PARAM = &quot;FIELDS_FILENAME_PARAM&quot;
Public Const XDRTOOLS_FILENAME_PARAM = &quot;XDRTOOLS_FILENAME_PARAM&quot;
Public Const XDRTOOLS_REP_FILENAME_PARAM = &quot;XDRTOOLS_REP_FILENAME_PARAM&quot;
Public Const REPOSITORIES_PARAM = &quot;REPOSITORIES_PARAM&quot;

Public gSettingsDialog as Object

Global settingsLoaded  as Boolean
Global fieldsDirectorySetting  as String
Global fieldsFileName as String
Global xdrToolsBatFile as String
Global xdrToolsRepBatFile as String
Global repositoryFolder as String
Global repositories() as String

Public Function GetXMLFieldsDirectorySetting()
	LoadSettingsIfNeeded()
    GetXMLFieldsDirectorySetting = fieldsDirectorySetting
End Function

Public Sub SetXMLFieldsDirectorySetting(ByVal directory As String)
	fieldsDirectorySetting = directory
End Sub

Public Function GetXMLFieldFileNameSetting()
	LoadSettingsIfNeeded()
    GetXMLFieldFileNameSetting = fieldsFileName
End Function

Public Sub SetXMLFieldFileNameSetting(ByVal file As String)
	fieldsFileName = file
End Sub

Public Function GetXDRToolsBatFileSetting()
	LoadSettingsIfNeeded()
    GetXDRToolsBatFileSetting = xdrToolsBatFile
End Function

Public Function GetXDRToolsRepBatFileSetting()
	LoadSettingsIfNeeded()
    GetXDRToolsRepBatFileSetting = xdrToolsRepBatFile
End Function

Public Function GetRepositoryFolderSetting()
	LoadSettingsIfNeeded()
    GetRepositoryFolderSetting = repositoryFolder
End Function

Private Sub SaveSettings()
	LoadSettingsIfNeeded()
	InsertParameter( FIELDS_DIRECTORY_PARAM , fieldsDirectorySetting)
	InsertParameter( FIELDS_FILENAME_PARAM , fieldsFileName)
	InsertParameter( XDRTOOLS_FILENAME_PARAM , xdrToolsBatFile)	
	InsertParameter( XDRTOOLS_REP_FILENAME_PARAM , xdrToolsRepBatFile)	
End Sub

Public Sub LoadSettingsIfNeeded()
	If (settingsLoaded = False) then
		fieldsDirectorySetting = ReadParameter( FIELDS_DIRECTORY_PARAM )
		fieldsFileName = ReadParameter( FIELDS_FILENAME_PARAM )
		xdrToolsBatFile = ReadParameter( XDRTOOLS_FILENAME_PARAM )				
		xdrToolsRepBatFile = ReadParameter( XDRTOOLS_REP_FILENAME_PARAM )				
		repositoryFolder = GetRepositoryFolder(xdrToolsRepBatFile)
		LoadRepositories(ReadParameter( REPOSITORIES_PARAM )) 
		settingsLoaded = True
	End if
End Sub

Sub LoadRepositories(ByVal value as String) 
	If (value &lt;&gt; &quot;&quot;) Then
		repositories = Split(value , &quot;____&quot;)
	End If
End Sub

Sub OpenSettingsDialog

	DialogLibraries.LoadLibrary( &quot;XDocReport&quot; )
	gSettingsDialog = CreateUnoDialog( DialogLibraries.XDocReport.SettingsDialog )	
 	LoadUISettings()
	gSettingsDialog.execute ()
	CloseSettingsDialog()
	
End Sub

Sub CloseSettingsDialog

	gSettingsDialog.endExecute()
 
End Sub

Sub SelectFolder 
	Dim directory as String
	Dim oFolderPicker As Object

	directory = &quot;&quot;
	oFolderPicker = CreateUnoService(&quot;com.sun.star.ui.dialogs.FolderPicker&quot;) 
   	oFolderPicker.setDisplayDirectory(gSettingsDialog.getControl(&quot;fieldsDirectoryTextField&quot;).Text)
	If oFolderPicker.Execute() = 1 Then 
  		directory = oFolderPicker.getDirectory()
	End If
	If (directory &lt;&gt; &quot;&quot;) Then 	
		gSettingsDialog.getControl(&quot;fieldsDirectoryTextField&quot;).Text = ConvertFromURL(directory)		
	End If
	
End Sub

Public Sub LoadUISettings()
	LoadSettingsIfNeeded()
	&apos; Fields
	gSettingsDialog.getControl(&quot;fieldsDirectoryTextField&quot;).Text = fieldsDirectorySetting 
	UpdateFieldsStatus()
	&apos; Preview
	gSettingsDialog.getControl(&quot;xdrToolsBatFileControl&quot;).Text = xdrToolsBatFile 
	UpdatePreviewStatus()
	&apos; Repositories
	gSettingsDialog.getControl(&quot;xdrToolsRepBatFileControl&quot;).Text = xdrToolsRepBatFile 
	UpdateRepositoriesStatus()	
End Sub

&apos; Update the field status
Private Sub UpdateFieldsStatus
	Dim value as String
	Dim controlLabel as Object
	value = gSettingsDialog.getControl(&quot;fieldsDirectoryTextField&quot;).Text
	controlLabel = gSettingsDialog.getControl(&quot;statusFieldsLabel&quot;)
	controlLabel.Model.TextColor = RGB(0,0,0)
	controlLabel.Text = &quot;&quot;
	If (value = &quot;&quot;) then
		controlLabel.Model.TextColor = RGB(255,0,0)
		controlLabel.Text = &quot;Please fill fields directory which contains *.fields.xml files to use fields dialog.&quot; 
	Else 
		&apos; Try if folder exists
		If Not FileExists(value) then 
			controlLabel.Model.TextColor = RGB(255,0,0)
			controlLabel.Text = &quot;This directory doesn&apos;t exists.&quot; 
		Else
			&apos; Check if there are *.fields.xml files
			Dim nbFiles as Long
			nbFiles =  GetNbXMLFieldsFiles(value) 
			If (nbFiles = 0) Then 
				controlLabel.Model.TextColor = RGB(240,120,0)
				controlLabel.Text = &quot;Pay attention, this directory doesn&apos;t contain *.fields.xml files.&quot; 			
			Else
				controlLabel.Model.TextColor = RGB(0,168,0)
				controlLabel.Text = &quot;Fields feature is well configured. The selected directory contains &quot;+ nbFiles + &quot; *.fields.xml files.&quot; 								
			End If
		End If
	End If
End Sub

Public Function GetNbXMLFieldsFiles(ByVal baseDir as String) as Long
	Dim i as Long
	Dim fileName as String
	i=0
	baseDir = ConvertFromUrl(baseDir) 
	&apos;Loop for *.fields.xml files
	fileName=Dir(baseDir &amp; &quot;/*.fields.xml&quot;,0) 		
	Do While Len(fileName) &gt;0 				
		fileName=Dir() 
		i= i + 1
	Loop 	
	GetNbXMLFieldsFiles= i
End Function

&apos; Update the preview status
Private Sub UpdatePreviewStatus
	Dim value as String
	Dim controlLabel as Object
	value = gSettingsDialog.getControl(&quot;xdrToolsBatFileControl&quot;).Text
	controlLabel = gSettingsDialog.getControl(&quot;statusPreviewLabel&quot;)
	controlLabel.Model.TextColor = RGB(0,0,0)
	controlLabel.Text = &quot;&quot;
	If (value = &quot;&quot;) then
		controlLabel.Model.TextColor = RGB(255,0,0)
		controlLabel.Text = &quot;Please select xdrtools.bat or xdrtools.sh to use preview feature.&quot; 
	Else 
		&apos; Check if selected file is &quot;xdrtools.bat&quot; or &quot;xdrtools.sh&quot; 
		If (&quot;xdrtools.bat&quot; &lt;&gt; Right(value, Len(&quot;xdrtools.bat&quot;)) and &quot;xdrtools.sh&quot; &lt;&gt; Right(value, Len(&quot;xdrtools.sh&quot;))) Then 
			controlLabel.Model.TextColor = RGB(255,0,0)
			controlLabel.Text = &quot;Bad file. Please select xdrtools.bat or xdrtools.sh file to use preview feature.&quot; 		
		Else
			&apos; Try if file exists
			If Not FileExists(value) then 
				controlLabel.Model.TextColor = RGB(255,0,0)
				controlLabel.Text = &quot;This file doesn&apos;t exists.&quot; 
			Else 
				controlLabel.Model.TextColor = RGB(0,168,0)
				controlLabel.Text = &quot;Preview feature is well configured.&quot; 					
			End If
		End If		
	End If
End Sub

&apos; Update the repositories status
Private Sub UpdateRepositoriesStatus
	Dim value as String
	Dim controlLabel as Object
	value = gSettingsDialog.getControl(&quot;xdrToolsRepBatFileControl&quot;).Text
	controlLabel = gSettingsDialog.getControl(&quot;statusRepLabel&quot;)
	controlLabel.Model.TextColor = RGB(0,0,0)
	controlLabel.Text = &quot;&quot;
	If (value = &quot;&quot;) then
		controlLabel.Model.TextColor = RGB(255,0,0)
		controlLabel.Text = &quot;Please select xdrtools-rep.bat or xdrtools-rep.sh to use repositories feature.&quot; 
	Else 
		&apos; Check if selected file is &quot;xdrtools-rep.bat&quot; or &quot;xdrtools-rep.sh&quot; 
		If (&quot;xdrtools-rep.bat&quot; &lt;&gt; Right(value, Len(&quot;xdrtools-rep.bat&quot;)) and &quot;xdrtools-rep.sh&quot; &lt;&gt; Right(value, Len(&quot;xdrtools-rep.sh&quot;))) Then 
			controlLabel.Model.TextColor = RGB(255,0,0)
			controlLabel.Text = &quot;Bad file. Please select xdrtools-rep.bat or xdrtools-rep.sh file to use repositories feature.&quot; 		
		Else
			&apos; Try if file exists
			If Not FileExists(value) then 
				controlLabel.Model.TextColor = RGB(255,0,0)
				controlLabel.Text = &quot;This file doesn&apos;t exists.&quot; 
			Else 
				controlLabel.Model.TextColor = RGB(0,168,0)
				controlLabel.Text = &quot;Repositories feature is well configured.&quot; 					
			End If
		End If		
	End If
End Sub

Public Sub SaveUISettings()
	fieldsDirectorySetting = gSettingsDialog.getControl(&quot;fieldsDirectoryTextField&quot;).Text
	xdrToolsBatFile= gSettingsDialog.getControl(&quot;xdrToolsBatFileControl&quot;).Text
	xdrToolsRepBatFile= gSettingsDialog.getControl(&quot;xdrToolsRepBatFileControl&quot;).Text
	repositoryFolder = GetRepositoryFolder(xdrToolsRepBatFile)
	SaveSettings()
	CloseSettingsDialog()
End Sub


Private Function GetRepositoryFolder(ByVal file as String) as String

	Dim hasSlash as Boolean
	Dim index as Integer
	index = XDocReport_LastIndexOf(file, &quot;/&quot;)
    if (index &gt; 0)Then
    	hasSlash = True
    Else
    	hasSlash = False
    	index = XDocReport_LastIndexOf(file, &quot;\&quot;)
    End If
    Dim folder as String
    folder = Mid(file, 1, index)
    If (hasSlash) Then 
    	folder = folder + &quot;../&quot;
    Else 
       	folder = folder + &quot;..\&quot;
    End If
    folder = folder + &quot;repositories&quot;
    GetRepositoryFolder() = folder
End Function 

Function XDocReport_LastIndexOf ( cText as String, cMatch as String) As Integer
  lastIndex = 0
  pos=0
  Do
    pos = InStr(pos+1,cText,cMatch)&apos;
    If pos &gt;0 Then
      lastIndex = pos
    End If
  Loop While pos &gt;0
  XDocReport_LastIndexOf()=lastIndex
End Function

Function XDocReport_Replace(ByVal chaine As String, src As String, dest As String, casse As Boolean)        
	Dim lsrc As Integer, i As Integer, kas As Integer
	dim limite as string

	limite=&quot;&quot;
	kas = iif(casse, 0, 1)
	lsrc = len(src)
	i = instr(1, chaine, src, kas)
	while i&lt;&gt;0
	  while i&lt;0
	    limite=limite+left(chaine,32000)
	    chaine=mid(chaine,32001)
	    i=instr(1, chaine, src, kas)
	  wend
	  &apos; ici i est toujours positif non nul
	  if i&gt;1 then
	     limite = limite + Left(chaine, i-1) +dest
	  else &apos; ici i vaut toujours 1
	     limite = limite +dest
	  endif   
	  &apos; raccourcir en deux temps car risque : i+src &gt; 32767
	  chaine = Mid(chaine, i)   
	  chaine = Mid(chaine, 1+lsrc)
	  i = instr(1, chaine, src, kas)
	wend
	XDocReport_Replace = limite + chaine
End Function

Public Sub AddRepository(ByVal baseAddress as String,ByVal user as String,ByVal password as String,ByVal serviceType as String, ByVal chunk as String, ByVal timeout as String, ByVal repositoryName as String) 
	Dim value as String
	value = ReadParameter(REPOSITORIES_PARAM)	
	If (value &lt;&gt; &quot;&quot;) Then 
		value = value + &quot;____&quot; 
	End If
	value = value + baseAddress  +  &quot;____&quot; 
	value = value + user  +  &quot;____&quot; 
	value = value + password  +  &quot;____&quot; 
	value = value + chunk  +  &quot;____&quot;		
	value = value + timeout +  &quot;____&quot;
	value = value + serviceType	
	InsertParameter(REPOSITORIES_PARAM, value)	
	
	LoadRepositories(value)					

&apos; Redim Preserve doesnt works????
&apos;	Dim oldSize as Long
&apos;	Dim size as Long
&apos;	oldSize = UBound(repositories)
&apos;	size = oldSize + 4
&apos;	MsgBox size
&apos;	ReDim Preserve repositories(size) as String						
&apos;	repositories(oldSize + 0) = baseAddress
&apos;	repositories(oldSize + 1) = user
&apos;	repositories(oldSize + 2) = password
&apos;	repositories(oldSize + 3) = serviceType
&apos;	repositories(oldSize + 4) = repositoryName


End Sub

Public Sub ModifyRepository(ByVal selectedIndex as Integer, ByVal baseAddress as String,ByVal user as String,ByVal password as String,ByVal serviceType as String, ByVal chunk as String, ByVal timeout as String, ByVal repositoryName as String) 
	repositories(gSelectedIndex*6+0) = baseAddress
	repositories(gSelectedIndex*6+1) = user
	repositories(gSelectedIndex*6+2) = password
	repositories(gSelectedIndex*6+3) = chunk
	repositories(gSelectedIndex*6+4) = timeout
	repositories(gSelectedIndex*6+5) = serviceType

	Dim value as String
	Dim i as Integer
	For i = 0 To UBound(repositories)
		If (value &lt;&gt; &quot;&quot;) Then 
			value = value + &quot;____&quot; 
		End If
		value = value + repositories(i)
	Next 
	InsertParameter(REPOSITORIES_PARAM, value)		
	LoadRepositories(value)					
End Sub

Public Sub RemoveRepository(ByVal selectedIndex as Integer, ByVal baseAddress as String,ByVal user as String,ByVal password as String,ByVal serviceType as String, ByVal chunk as String, ByVal timeout as String, ByVal repositoryName as String) 
	Dim value as String
	Dim i as Integer
	Dim startIndex as Integer
	Dim endIndex as Integer	
	startIndex = selectedIndex * 6
	endIndex = startIndex + 5
	For i = 0 To UBound(repositories)
		If Not (i&gt;=startIndex and i&lt;=endIndex) Then 
			If (value &lt;&gt; &quot;&quot;) Then 
				value = value + &quot;____&quot; 
			End If
			value = value + repositories(i)
		End If
	Next 
	InsertParameter(REPOSITORIES_PARAM, value)		
	LoadRepositories(value)		
End Sub


Public Function GetRepositories() as Variant
	LoadSettingsIfNeeded()
	GetRepositories() = repositories()
End Function

Sub InsertParameter(parametre as string, valeur as string)
&apos; recherche une ligne avec le parametre
&apos; si elle existe, on efface et on remplace par la nouvelle
&apos; sinon on ajoute
Dim oLib as Object
oLib = GlobalScope.BasicLibraries.Standard
If not oLib.hasByName(&quot;XDocReportParameters&quot;) Then
	Dim texte as string
	texte=&quot;&apos;Copyright (C) 2012 XDocReport Team&quot;&amp;chr(13)
	texte=texte+&quot;don&apos;t remove : parameters used by XDocReport&quot;&amp;chr(13)
	oLib.InsertByName(&quot;XDocReportParameters&quot;,texte)
EndIf
code=oLib.getByName(&quot;XDocReportParameters&quot;)
i=instr(code,parametre)
if i&gt;0 then
	&apos;remplacer la ligne
	j=instr(i+1,code,chr(13))
	if j=0 then j=instr(i+1,code,chr(10)) &apos;bizarre OOo 2.4.1 transforme les chr(13) en chr(10) ?
	if j&lt;&gt;0 then code=left(code,i-1) &amp; parametre &amp;&quot;=&quot; &amp; valeur &amp; mid(code,j)
else
	&apos;ajouter la ligne
	code=code+&quot;rem &quot; &amp; parametre &amp;&quot;=&quot; &amp; valeur &amp; chr(13)
end if
oLib.replaceByName(&quot;XDocReportParameters&quot;,code)
end sub

function ReadParameter(parametre as string) as string
Dim oLib as Object
oLib = GlobalScope.BasicLibraries.Standard
ReadParameter=&quot;&quot;
If oLib.hasByName(&quot;XDocReportParameters&quot;) Then
	code=oLib.getByName(&quot;XDocReportParameters&quot;)
	i=instr(code,parametre)
	if i&gt;0 then
		j=instr(i+1,code,&quot;=&quot;)
		k=instr(j+1,code,chr(13))
		if k=0 then k=instr(j+1,code,chr(10))
		if k&lt;&gt;0 then ReadParameter=mid(code,j+1,k-j-1)
	end if
end if
end function

Sub RemoveParameter(parametre as string)
Dim oLib as Object
oLib = GlobalScope.BasicLibraries.Standard
If oLib.hasByName(&quot;XDocReportParameters&quot;) Then
	code=oLib.getByName(&quot;XDocReportParameters&quot;)
	i=instr(code,parametre)
	if i&gt;0 then
		j=instr(i+1,code,chr(13))
		if j=0 then j=instr(i+1,code,chr(10)) &apos;bizarre OOo 2.4.1 transforme les chr(13) en chr(10) ?
		if j&lt;&gt;0 then code=left(code,i-5) &amp; mid(code,j+1)
		oLib.replaceByName(&quot;XDocReportParameters&quot;,code)
	end if
end if
end sub

</script:module>