#Repairnator properties
#Wed Mar 22 09:10:13 CET 2017
workspace=./workspace
pr-remote-repo=martint/presto
pr-head-commit-id=55153eb8a2a2aac0959004ecfdadf0d229b1aaeb
pr-id=7495
repo=prestodb/presto
failingModule=/root/workspace/prestodb/presto/213689095/presto-main
is-pr=true
buildid=213689095
error-types=java.lang.AssertionError
failing-test-cases=FailureLocation{className\='com.facebook.presto.sql.analyzer.TestFeaturesConfig', failingMethods\=[com.facebook.presto.sql.analyzer.TestFeaturesConfig\#testExplicitPropertyMappings], erroringMethods\=[], failures\=[FailureType{failureName\='java.lang.AssertionError', failureDetail\='IterativeOptimizerEnabled expected\:<true> to not equal <true>', isError\=false}], nbFailures\=1, nbErrors\=0},FailureLocation{className\='com.facebook.presto.sql.planner.TestQuantifiedComparison', failingMethods\=[com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonEqualAll, com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonGreaterEqualAny, com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonLessAll, com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonNotEqualAny, com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonGreaterEqualAll, com.facebook.presto.sql.planner.TestQuantifiedComparison\#testQuantifiedComparisonLessSome], erroringMethods\=[], failures\=[FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(CASE "count_all" WHEN BIGINT '0' THEN true ELSE ((("min" \= "max") AND ("orderkey" \= "max")) AND (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE true END)) END)] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [min\:bigint, max\:bigint, count_all\:bigint, count_non_null\:bigint]\n                min \:\= "min"("field")\n                max \:\= "max"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}, FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(CASE "count_all" WHEN BIGINT '0' THEN true ELSE (("orderkey" >\= "max") AND (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE true END)) END)] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [max\:bigint, count_all\:bigint, count_non_null\:bigint]\n                max \:\= "max"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}, FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(CASE "count_all" WHEN BIGINT '0' THEN false ELSE (("orderkey" >\= "min") OR (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE false END)) END)] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [min\:bigint, count_all\:bigint, count_non_null\:bigint]\n                min \:\= "min"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}, FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(CASE "count_all" WHEN BIGINT '0' THEN true ELSE (("orderkey" < "min") AND (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE true END)) END)] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [min\:bigint, count_all\:bigint, count_non_null\:bigint]\n                min \:\= "min"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}, FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(CASE "count_all" WHEN BIGINT '0' THEN false ELSE (("orderkey" < "max") OR (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE false END)) END)] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [max\:bigint, count_all\:bigint, count_non_null\:bigint]\n                max \:\= "max"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}, FailureType{failureName\='java.lang.AssertionError', failureDetail\='Plan does not match, expected [\n\nanyTree\n    node(JoinNode)\n        node(TableScanNode)\n            TableScanMatcher{expectedTableName\=orders}\n        anyTree\n            node(AggregationNode)\n                node(ValuesNode)\n\n] but found [\n\n- Output[orderkey, custkey] \=> [orderkey\:bigint, custkey\:bigint]\n    - InnerJoin[(NOT (CASE "count_all" WHEN BIGINT '0' THEN true ELSE ((("min" \= "max") AND ("orderkey" \= "max")) AND (CASE WHEN ("count_all" <> "count_non_null") THEN CAST(null AS boolean) ELSE true END)) END))] \=> [orderkey\:bigint, custkey\:bigint]\n        - TableScan[local\:tpch\:orders\:sf0.01, originalConstraint \= true] \=> [orderkey\:bigint, custkey\:bigint]\n                orderkey \:\= tpch\:orderkey\n                custkey \:\= tpch\:custkey\n        - Aggregate \=> [min\:bigint, max\:bigint, count_all\:bigint, count_non_null\:bigint]\n                min \:\= "min"("field")\n                max \:\= "max"("field")\n                count_all \:\= "count"(*)\n                count_non_null \:\= "count"("field")\n            - Values \=> [field\:bigint]\n                    (BIGINT '5')\n                    (BIGINT '3')\n\n]', isError\=false}], nbFailures\=6, nbErrors\=0}
pr-base-commit-id=cda4143d1f7e64910174a3d69a70ea46cd53da31
