nopolinfo #0
location: FailureLocation{className='org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests', failingMethods=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[3]], erroringMethods=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[0]], failures=[FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=4, nbErrors=52}
status: NOPATCH
dateEnd: Thu Apr 20 06:16:05 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@18f20260', projectTests=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_ERRORING
----------



nopolinfo #1
location: FailureLocation{className='org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests', failingMethods=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[3]], erroringMethods=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[1], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[0], org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[0]], failures=[FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='DATAREDIS-108 Test is intermittently failing', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=4, nbErrors=52}
status: NOPATCH
dateEnd: Thu Apr 20 06:16:18 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5563bb40', projectTests=[org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_FAILING
----------



nopolinfo #2
location: FailureLocation{className='org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests', failingMethods=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectWithPassword, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testLotsOfConnections], erroringMethods=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetNewConnectionOnError, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectionErrorNoValidate, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionNotSharedBadHostname, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetSharedConnectionNotShared, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testSelectDb, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testCreateFactoryWithPool, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testValidateNoError, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetAndInitConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryWorksWithoutClientResources, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testDisableSharedConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#dbIndexShouldBePropagatedCorrectly, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testInitConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionException], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Uncomment this test to manually check connection reuse in a pool scenario', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}], nbFailures=2, nbErrors=14}
status: NOPATCH
dateEnd: Thu Apr 20 06:16:31 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@19b8f1bd', projectTests=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_ERRORING
----------



nopolinfo #3
location: FailureLocation{className='org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests', failingMethods=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectWithPassword, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testLotsOfConnections], erroringMethods=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetNewConnectionOnError, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectionErrorNoValidate, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionNotSharedBadHostname, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetSharedConnectionNotShared, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testSelectDb, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testCreateFactoryWithPool, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testValidateNoError, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetAndInitConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryWorksWithoutClientResources, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testDisableSharedConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#dbIndexShouldBePropagatedCorrectly, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testInitConnection, org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionException], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Uncomment this test to manually check connection reuse in a pool scenario', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}], nbFailures=2, nbErrors=14}
status: NOPATCH
dateEnd: Thu Apr 20 06:16:43 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2ea3f905', projectTests=[org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_FAILING
----------



nopolinfo #4
location: FailureLocation{className='org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests', failingMethods=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreatePassword, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateInvalidPassword], erroringMethods=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateWithDbIndex, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourceValidate, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourcePoolExhausted, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnBrokenResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#poolWorksWithoutClientResources], failures=[FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}], nbFailures=2, nbErrors=7}
status: NOPATCH
dateEnd: Thu Apr 20 06:16:56 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@19cf111c', projectTests=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_ERRORING
----------



nopolinfo #5
location: FailureLocation{className='org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests', failingMethods=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreatePassword, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateInvalidPassword], erroringMethods=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateWithDbIndex, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourceValidate, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourcePoolExhausted, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnBrokenResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnResource, org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#poolWorksWithoutClientResources], failures=[FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}], nbFailures=2, nbErrors=7}
status: NOPATCH
dateEnd: Thu Apr 20 06:17:08 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@6dde8046', projectTests=[org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_FAILING
----------



nopolinfo #6
location: FailureLocation{className='org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests', failingMethods=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnectWithPassword], erroringMethods=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnect], failures=[FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=1, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:17:20 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@41756187', projectTests=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_ERRORING
----------



nopolinfo #7
location: FailureLocation{className='org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests', failingMethods=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnectWithPassword], erroringMethods=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnect], failures=[FailureType{failureName='skipped', failureDetail='Redis must have requirepass set to run this test', isError=false}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=1, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:17:32 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@38d6ad53', projectTests=[org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: IGNORE_FAILING
----------



nopolinfo #8
location: FailureLocation{className='org.springframework.data.redis.core.MultithreadedRedisTemplateTests', failingMethods=[org.springframework.data.redis.core.MultithreadedRedisTemplateTests#assertResouresAreReleasedProperlyWhenSharingRedisTemplate[0]], erroringMethods=[], failures=[FailureType{failureName='java.lang.AssertionError', failureDetail='null', isError=false}], nbFailures=1, nbErrors=0}
status: NOPATCH
dateEnd: Thu Apr 20 06:17:43 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@498fd768', projectTests=[org.springframework.data.redis.core.MultithreadedRedisTemplateTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #9
location: FailureLocation{className='org.springframework.data.redis.core.RedisKeyValueTemplateTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[1], org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[0], org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[1]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}], nbFailures=0, nbErrors=80}
status: NOPATCH
dateEnd: Thu Apr 20 06:17:55 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@c46e26c', projectTests=[org.springframework.data.redis.core.RedisKeyValueTemplateTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #10
location: FailureLocation{className='org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[1], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[2], org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[0]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=0, nbErrors=64}
status: NOPATCH
dateEnd: Thu Apr 20 06:18:07 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@753c9fde', projectTests=[org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #11
location: FailureLocation{className='org.springframework.data.redis.support.atomic.RedisAtomicLongTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[2], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[3], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1], org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[1]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=0, nbErrors=56}
status: NOPATCH
dateEnd: Thu Apr 20 06:18:18 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5bc629cd', projectTests=[org.springframework.data.redis.support.atomic.RedisAtomicLongTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #12
location: FailureLocation{className='org.springframework.data.redis.core.RedisKeyValueAdapterTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[1], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[0], org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[0]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}], nbFailures=0, nbErrors=48}
status: NOPATCH
dateEnd: Thu Apr 20 06:18:30 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@75cc3ab1', projectTests=[org.springframework.data.redis.core.RedisKeyValueAdapterTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #13
location: FailureLocation{className='org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsGreaterThanNumberOfConnections, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShouldBeCommittedCorrectly, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeCommittedCorrectly, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsIsOne, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsEqualToNumberOfConnections, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#readonlyTransactionSyncShouldNotExcceedMaxConnections, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShoudBeRolledBackCorrectly, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationShouldWorkWithReadOnlyTransactions, org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeRolledBackCorrectly], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=18}
status: NOPATCH
dateEnd: Thu Apr 20 06:18:42 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@47944d11', projectTests=[org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #14
location: FailureLocation{className='org.springframework.data.redis.repository.RedisRepositoryIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsPageCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findUsingOrReturnsResultCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectlyOnNestedProperty, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsReferenceDataCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindAll, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyFirstKeywordCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldFindNothingIfOutOfRange, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectlyWhenCriteriaPresent, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindShouldReturnEntitiesCorrectly, org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindByMultipleProperties], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=15}
status: NOPATCH
dateEnd: Thu Apr 20 06:18:53 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5c8c77b0', projectTests=[org.springframework.data.redis.repository.RedisRepositoryIntegrationTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #15
location: FailureLocation{className='org.apache.maven.surefire.junit4.JUnit4Provider', failingMethods=[], erroringMethods=[org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionTransactionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineTxIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineIntegrationTests, org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jredis.JRedisConnectionIntegrationTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=13}
status: NOPATCH
dateEnd: Thu Apr 20 06:19:05 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5a921bc2', projectTests=[org.apache.maven.surefire.junit4.JUnit4Provider], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #16
location: FailureLocation{className='org.springframework.data.redis.listener.SubscriptionConnectionTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[0], org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[2], org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[3], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[2], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[1], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[2], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[1], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[3], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[3], org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[0], org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[0], org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[1]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.jredis.ClientRuntimeException', failureDetail='null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.jredis.ClientRuntimeException', failureDetail='null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.jredis.ClientRuntimeException', failureDetail='null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}], nbFailures=0, nbErrors=12}
status: NOPATCH
dateEnd: Thu Apr 20 06:19:17 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5a99acff', projectTests=[org.springframework.data.redis.listener.SubscriptionConnectionTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #17
location: FailureLocation{className='org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeRolledBackCorrectly, org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShouldBeCommittedCorrectly, org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShoudBeRolledBackCorrectly, org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeCommittedCorrectly, org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379', isError=true}], nbFailures=0, nbErrors=10}
status: NOPATCH
dateEnd: Thu Apr 20 06:19:28 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@422e4dd', projectTests=[org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #18
location: FailureLocation{className='org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeCommittedCorrectly, org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShoudBeRolledBackCorrectly, org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeRolledBackCorrectly, org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShouldBeCommittedCorrectly, org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=10}
status: NOPATCH
dateEnd: Thu Apr 20 06:19:40 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2580be8', projectTests=[org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #19
location: FailureLocation{className='org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeCommittedCorrectly, org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeRolledBackCorrectly, org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShouldBeCommittedCorrectly, org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShoudBeRolledBackCorrectly, org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Could not connect; nested exception is redis.client.RedisException: Could not connect', isError=true}], nbFailures=0, nbErrors=10}
status: NOPATCH
dateEnd: Thu Apr 20 06:19:52 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@44ad4513', projectTests=[org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #20
location: FailureLocation{className='org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldReturnNullWhenSouceIsEmptyArray, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#serializeShouldReturnEmptyByteArrayWhenSouceIsNull, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldBeAbleToRestoreComplexObjectAfterSerialization, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsEmpty, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldReturnNullWhenSouceIsNull, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldBeAbleToRestoreSimpleObjectAfterSerialization, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldSerializeNullValueSoThatItCanBeDeserializedWithDefaultTypingEnabled, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsProvided, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsNull, org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTyping], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}], nbFailures=0, nbErrors=10}
status: NOPATCH
dateEnd: Thu Apr 20 06:20:03 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2b6f9c2b', projectTests=[org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #21
location: FailureLocation{className='org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorCustomConversionOnRootType, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorCustomConversionOnNestedType, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeHandlesArraysProperly, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldWritePartialUpdatePathWithRegisteredCustomConversionCorrectly, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorIndexAnnotationsOnWhenCustomConversionOnNestedype, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#readShouldHonorCustomConversionOnNestedType, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorIndexOnCustomConversionForNestedType, org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#readShouldHonorCustomConversionOnRootType], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}], nbFailures=0, nbErrors=8}
status: NOPATCH
dateEnd: Thu Apr 20 06:20:15 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2c22a55e', projectTests=[org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #22
location: FailureLocation{className='org.springframework.data.redis.connection.jredis.JredisPoolTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostAndPort, org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnResource, org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourcePoolExhausted, org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnBrokenResource, org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResource, org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostPortAndDbIndex, org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourceValidate], failures=[FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}, FailureType{failureName='org.springframework.data.redis.connection.PoolException', failureDetail='Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: => [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]', isError=true}], nbFailures=0, nbErrors=7}
status: NOPATCH
dateEnd: Thu Apr 20 06:20:26 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@211dd950', projectTests=[org.springframework.data.redis.connection.jredis.JredisPoolTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #23
location: FailureLocation{className='org.springframework.data.redis.core.DefaultHashOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[1], org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[0], org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[0], org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[1], org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[1], org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[0]], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule', isError=true}], nbFailures=0, nbErrors=6}
status: NOPATCH
dateEnd: Thu Apr 20 06:20:38 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@7d72d3b8', projectTests=[org.springframework.data.redis.core.DefaultHashOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #24
location: FailureLocation{className='org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerilizerThrowsExceptionWhenSettingNullObjectMapper, org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerilizerShouldThrowExceptionWhenDeserializingInvalidByteArray, org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializerShouldReturnNullWhenDerserializingEmtyByteArray, org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializerShouldReturnEmptyByteArrayWhenSerializingNull, org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializer], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}], nbFailures=0, nbErrors=5}
status: NOPATCH
dateEnd: Thu Apr 20 06:20:49 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@75e0aa66', projectTests=[org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #25
location: FailureLocation{className='org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldNotReactToDeleteEvents, org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldPublishEventCorrectly], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=4}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:01 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5b026139', projectTests=[org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #26
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testNone, org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testExistingCol], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=4}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:12 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@29e8bafe', projectTests=[org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #27
location: FailureLocation{className='org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization', failingMethods=[], erroringMethods=[org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization#shouldInitWithDefaults, org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization#shouldRegisterDefaultBeans], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}, FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=2}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:24 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@f6a3a33', projectTests=[org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #28
location: FailureLocation{className='org.springframework.data.redis.mapping.Jackson2HashMapperTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[1], org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[0]], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}, FailureType{failureName='java.lang.NoClassDefFoundError', failureDetail='Could not initialize class com.fasterxml.jackson.databind.SerializationConfig', isError=true}], nbFailures=0, nbErrors=2}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:35 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@715fd824', projectTests=[org.springframework.data.redis.mapping.Jackson2HashMapperTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #29
location: FailureLocation{className='org.springframework.data.redis.connection.jedis.ScanTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[1], org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[0]], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}, FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379', isError=true}], nbFailures=0, nbErrors=2}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:47 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2c06206a', projectTests=[org.springframework.data.redis.connection.jedis.ScanTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #30
location: FailureLocation{className='org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:21:59 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@3a1fa33', projectTests=[org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #31
location: FailureLocation{className='org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests#org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:22:10 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@3d1ce7d4', projectTests=[org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #32
location: FailureLocation{className='org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests#org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:22:22 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@5f124b68', projectTests=[org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #33
location: FailureLocation{className='org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests#org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:22:33 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@68bad7e1', projectTests=[org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #34
location: FailureLocation{className='org.springframework.data.redis.support.BoundKeyOperationsTest', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.BoundKeyOperationsTest#initializationError], failures=[FailureType{failureName='org.springframework.data.redis.RedisConnectionFailureException', failureDetail='Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:22:45 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@43aabdfa', projectTests=[org.springframework.data.redis.support.BoundKeyOperationsTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #35
location: FailureLocation{className='org.springframework.data.redis.listener.PubSubResubscribeTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.listener.PubSubResubscribeTests#org.springframework.data.redis.listener.PubSubResubscribeTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:22:57 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@3710da0b', projectTests=[org.springframework.data.redis.listener.PubSubResubscribeTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #36
location: FailureLocation{className='org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests#org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:23:08 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@136a39f7', projectTests=[org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #37
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisSetTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisSetTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:23:19 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@1d6e9194', projectTests=[org.springframework.data.redis.support.collections.RedisSetTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #38
location: FailureLocation{className='org.springframework.data.redis.listener.PubSubTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.listener.PubSubTests#org.springframework.data.redis.listener.PubSubTests], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:23:31 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@224bc8b3', projectTests=[org.springframework.data.redis.listener.PubSubTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #39
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisPropertiesTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisPropertiesTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:23:43 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@215fa6c2', projectTests=[org.springframework.data.redis.support.collections.RedisPropertiesTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #40
location: FailureLocation{className='org.springframework.data.redis.mapping.Jackson2HashMapperUnitTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.mapping.Jackson2HashMapperUnitTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:23:54 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@81f1991', projectTests=[org.springframework.data.redis.mapping.Jackson2HashMapperUnitTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #41
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisMapTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisMapTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:24:05 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@2cb2b217', projectTests=[org.springframework.data.redis.support.collections.RedisMapTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #42
location: FailureLocation{className='org.springframework.data.redis.core.DefaultValueOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultValueOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:24:17 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@28e8303b', projectTests=[org.springframework.data.redis.core.DefaultValueOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #43
location: FailureLocation{className='org.springframework.data.redis.core.DefaultGeoOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultGeoOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.ExceptionInInitializerError', failureDetail='null', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:24:28 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@40e478ff', projectTests=[org.springframework.data.redis.core.DefaultGeoOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #44
location: FailureLocation{className='org.springframework.data.redis.core.RedisClusterTemplateTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.RedisClusterTemplateTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:24:40 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@1a9665f', projectTests=[org.springframework.data.redis.core.RedisClusterTemplateTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #45
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisZSetTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisZSetTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:24:51 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@7c81cd6a', projectTests=[org.springframework.data.redis.support.collections.RedisZSetTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #46
location: FailureLocation{className='org.springframework.data.redis.support.collections.RedisListTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.RedisListTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:25:02 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@67e693d4', projectTests=[org.springframework.data.redis.support.collections.RedisListTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #47
location: FailureLocation{className='org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithCustomReferenceResolver', failingMethods=[], erroringMethods=[org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithCustomReferenceResolver#shouldPickUpReferenceResolver], failures=[FailureType{failureName='java.lang.IllegalStateException', failureDetail='Failed to load ApplicationContext', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:25:14 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@170fa38b', projectTests=[org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithCustomReferenceResolver], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #48
location: FailureLocation{className='org.springframework.data.redis.core.DefaultListOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultListOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:25:26 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@7ad960f0', projectTests=[org.springframework.data.redis.core.DefaultListOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #49
location: FailureLocation{className='org.springframework.data.redis.core.DefaultSetOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultSetOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:25:37 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@1930ab16', projectTests=[org.springframework.data.redis.core.DefaultSetOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #50
location: FailureLocation{className='org.springframework.data.redis.core.DefaultZSetOperationsTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.DefaultZSetOperationsTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:25:48 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@48ef2183', projectTests=[org.springframework.data.redis.core.DefaultZSetOperationsTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #51
location: FailureLocation{className='org.springframework.data.redis.support.collections.SupportXmlTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.support.collections.SupportXmlTests#testContainerSetup], failures=[FailureType{failureName='org.springframework.beans.factory.BeanCreationException', failureDetail='Error creating bean with name 'non-existing': Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:26:00 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@181cbb37', projectTests=[org.springframework.data.redis.support.collections.SupportXmlTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #52
location: FailureLocation{className='org.springframework.data.redis.core.RedisTemplateTests', failingMethods=[], erroringMethods=[org.springframework.data.redis.core.RedisTemplateTests#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:26:11 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@3a3db7d9', projectTests=[org.springframework.data.redis.core.RedisTemplateTests], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



nopolinfo #53
location: FailureLocation{className='org.springframework.data.redis.cache.RedisCacheTest', failingMethods=[], erroringMethods=[org.springframework.data.redis.cache.RedisCacheTest#initializationError], failures=[FailureType{failureName='java.lang.NoSuchMethodError', failureDetail='com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;', isError=true}], nbFailures=0, nbErrors=1}
status: NOPATCH
dateEnd: Thu Apr 20 06:26:23 CEST 2017
allocatedtime: 120minutes 
passingTime: 0minutes 
nb patches: 0
nopol context: Config{synthesisDepth=3, collectStaticMethods=true, collectStaticFields=false, collectLiterals=false, onlyOneSynthesisResult=false, sortExpressions=true, maxLineInvocationPerTest=250, timeoutMethodInvocation=2000, dataCollectionTimeoutInSecondForSynthesis=900, addWeight=0.19478, subWeight=0.04554, mulWeight=0.0102, divWeight=0.00613, andWeight=0.10597, orWeight=0.05708, eqWeight=0.22798, nEqWeight=0.0, lessEqWeight=0.0255, lessWeight=0.0947, methodCallWeight=0.1, fieldAccessWeight=0.08099, constantWeight=0.14232, variableWeight=0.05195, mode=REPAIR, type=COND_THEN_PRE, synthesis=DYNAMOTH, oracle=ANGELIC, solver=Z3, solverPath='./z3_for_linux', projectSources=[/root/workspace/spring-projects/spring-data-redis/223765205/src/main/java], projectClasspath='[Ljava.net.URL;@7e2b59cd', projectTests=[org.springframework.data.redis.cache.RedisCacheTest], complianceLevel=8, outputFolder=null, json=false}
exception: null
nbStatements: 0
nbAngelicValues: 0
ignoreStatus: NOTHING_TO_IGNORE
----------



