= Common Considerations =
PerfMon Server Agent did support only few metrics in versions up to 0.4.2. 
The old agent still supported in [PerfMon PerfMon Metrics Collector] version 0.5.0+.
However, version 0.5.0 ships new [PerfMonAgent ServerAgent] which provide over 75 
separate metrics, support per-process CPU and Memory metrics and even 
custom metrics for measuring whatever you want: file sizes, database row counts,
Java heap sizes and garbage collections.

== Specifying Metric Params ==
[PerfMon PerfMon Metrics Collector] has special "Metric Parameter" column,
where user can specify metric subtype to collect, specify which process
should be monitored (which filesystem, network interface).
Metric parameter string may have several parameters inside it,
separated with colon {{{:}}}. To include colon as a char inside parameter, use 
backslash escaping {{{\:}}}. Make note you cannot use tab characters inside 
metric parameter string, all tabs will be converted to spaces silently.

Most of the metrics accepts single parameter called 'type'. This parameter
specifies which particular number you want to collect. There is default
metric type for each metric category that will be collected if no 'type' 
parameter specified (see lists below, *bold* first item in each category).

Some metric types are commonly used and considered *primary*, 
leaving some rarely used types as *additional*. Make note that not all metrics
available on all platforms, we depend on [http://support.hyperic.com/display/SIGAR/Home SIGAR] 
API capabilities here.

Some metrics allow specifying particular object to monitor, you may specify
_selector parameter_ to monitor values only for this object:
  * _name_, _pid_ and _[http://support.hyperic.com/display/SIGAR/PTQL ptql]_ selectors for processes
  * _core_ selector for monitoring specific CPU of multicore systems
  * _fs_ selector for filesystems
  * _iface_ selector for network interfaces
Make note that metric types are different for per-process and total metrics for
CPU and Memory. 

Some example metric parameter strings: 

{{{
### CPU ###
combined - measure total CPU usage, equals to 100-idle value
core=2:user - measure user process CPU usage for third core in system (core numbering starts at 0)
name=java#2:user - will monitor second java process instance for user time spent
pid=14523:percent - will monitor process with PID 14523 for total CPU usage percentage 
name=httpd - omitting metric type will use default 'percent'

### Disk IO ###
fs=/home:writes - will monitor /home filesystem for number of write operations

### Network IO ###
iface=eth0:tx - will monitor interface eth0 for transmitted packet rate
}}}


== Viewing Available System Objects ==
[PerfMonAgent Server Agent] has special command-line option {{{--sysinfo}}} 
for printing available processes, filesystems and network interfaces together 
with their selectors.

= CPU Metrics =
== Total ==
Primary
  * *combined* 
  * idle 
  * system 
  * user 
  * iowait

Additional 
  * irq 
  * nice 
  * softirq 
  * stolen 

== Per Process ==
  * *percent*
  * total 
  * system 
  * user

= Memory Metrics =
== Total ==
Primary
  * *usedperc* - relative memory usage in percents
  * freeperc
  * used 
  * free

Additional
  * actualfree 
  * actualused  
  * ram 
  * total 

== Per Process ==
Primary 
  * *resident*
  * virtual
  * shared

Additional
  * pagefaults
  * majorfaults
  * minorfaults 

= Disk I/O Metrics = 
Primary
  * *queue*
  * reads 
  * writes 
  * readbytes
  * writebytes 

Additional
  * available
  * service
  * files
  * free
  * freefiles
  * total
  * useperc
  * used

= Network I/O Metrics = 
Primary
  * *bytesrecv*
  * bytessent 
  * rx 
  * tx

Additional
  * used
  * speed 
  * rxdrops
  * rxerr
  * rxframe
  * rxoverruns
  * txcarrier
  * txcollisions
  * txdrops
  * txerr
  * txoverruns

= JMX Metrics =

Since version 0.5.2 Server Agent has ability to monitor some [http://docs.oracle.com/javase/6/docs/api/javax/management/package-summary.html#package_description JMX]
values inside Java Virtual Machine. To enable JMX monitoring you must start Java 
with some special properties enabled, like described [http://docs.oracle.com/javase/6/docs/technotes/guides/management/agent.html here].
Here's simpliest (and not so secure) options to start Java with JMX enabled:

{{{
java -Dcom.sun.management.jmxremote.port=4711 -Dcom.sun.management.jmxremote.authenticate=false \
  -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.ssl=false <other options>
}}}

By default the Server Agent will try to connect to JMX server at localhost with port 4711. 
If you started JMX server at different host/port or using authentication with username/password,
please, use following additional parameters:
  * {{{url=<hostname>\:<port>}}}
  * {{{user=<username>}}}
  * {{{password=<password>}}}

Available JMX metric types:
  * gc-time - time spent in garbage collection, milliseconds ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/GarbageCollectorMXBean.html#getCollectionTime() used method])
  * memory-usage - heap memory used by VM, bytes ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryMXBean.html#getHeapMemoryUsage() method used])
  * memory-committed - heap memory committed by VM, bytes ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryMXBean.html#getHeapMemoryUsage() method used])
  * memorypool-usage - heap memory pool usage, bytes ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryPoolMXBean.html#getUsage() method used]) 
  * memorypool-committed - heap memory pool committed size, bytes ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/MemoryPoolMXBean.html#getUsage() method used]) 
  * class-count - loaded class count in VM ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/ClassLoadingMXBean.html#getLoadedClassCount() used method])
  * compile-time - time spent in compilation, milliseconds ([http://docs.oracle.com/javase/6/docs/api/java/lang/management/CompilationMXBean.html#getTotalCompilationTime() used method])

Examples:

{{{
gc-time - monitor GC time at localhost:4711
memory-usage:url=somehost.com\:4715 - use alternative hostname/password
class-count:url=somehost.com\:4715:user=apc:password=SecurityPlease123 - some secure setup access
}}}

= TCP Metrics = 
TCP metrics represents TCP socket state statistics (like open ports).
Primary
  * *estab* - established connections
  * time_wait
  * close_wait

Additional
  * bound
  * close
  * closing
  * fin_wait1
  * fin_wait2
  * idle
  * inbound
  * last_ack
  * listen
  * outbound
  * syn_recv 

= Swap Metrics =
  * *used*
  * pagein
  * pageout
  * free
  * total 

= Custom Metrics =
If you haven't found appropriate metric in above lists,
you can set up collecting any value with custom metrics.

== EXEC ==
This metric type interprets parameter string as path to process to start and
arguments to pass to the process. Parameters separated with colon (not space), 
see examples below. The process must print out to standard output single line
containing single numeric metric value.

In most cases you'll need to start system interpreter (cmd.exe, /bin/sh)
to run complex sequences of parameterized calls.

Example1: Monitoring Linux _cached_ memory size (unavailable via SIGAR lib in default metrics), 
used _free_ utility output:

{{{
/bin/sh:-c:free | grep Mem | awk '{print $7}'
}}}

Example2: Monitoring MySQL _select_ query count:

{{{
/bin/sh:-c:echo "show global status like 'Com_select'" | mysql -u root | awk ' $1 =="Com_select" {print $2}'
}}}

== TAIL ==
Another way to collect cutom metrics is to read lines off the end of the file.
Metric parameter for tail type is path to file to read. Lines added to file must 
contain single numeric metric. Example: 

{{{
123
342
333
297
}}}