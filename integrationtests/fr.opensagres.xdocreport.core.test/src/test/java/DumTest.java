/**
 * Copyright (C) 2011-2015 The XDocReport Team <xdocreport@googlegroups.com>
 *
 * All rights reserved.
 *
 * Permission is hereby granted, free  of charge, to any person obtaining
 * a  copy  of this  software  and  associated  documentation files  (the
 * "Software"), to  deal in  the Software without  restriction, including
 * without limitation  the rights to  use, copy, modify,  merge, publish,
 * distribute,  sublicense, and/or sell  copies of  the Software,  and to
 * permit persons to whom the Software  is furnished to do so, subject to
 * the following conditions:
 *
 * The  above  copyright  notice  and  this permission  notice  shall  be
 * included in all copies or substantial portions of the Software.
 *
 * THE  SOFTWARE IS  PROVIDED  "AS  IS", WITHOUT  WARRANTY  OF ANY  KIND,
 * EXPRESS OR  IMPLIED, INCLUDING  BUT NOT LIMITED  TO THE  WARRANTIES OF
 * MERCHANTABILITY,    FITNESS    FOR    A   PARTICULAR    PURPOSE    AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE,  ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.StringReader;
import java.util.Map;

import fr.opensagres.xdocreport.core.utils.Base64Utility;
import fr.opensagres.xdocreport.document.IXDocReport;
import fr.opensagres.xdocreport.document.json.JSONObject;
import fr.opensagres.xdocreport.document.registry.XDocReportRegistry;
import fr.opensagres.xdocreport.template.formatter.FieldsMetadata;
import fr.opensagres.xdocreport.template.formatter.FieldsMetadataXMLSerializer;

public class DumTest
{

    public static void main( String[] args )
    {
        try
        {
            // Load report
            String document = "";
            InputStream in = new ByteArrayInputStream( Base64Utility.decode( document ) );
            IXDocReport report = XDocReportRegistry.getRegistry().loadReport( in, null, "Velocity" );
                        
            // Set FieldsMetadata
            StringReader fieldsReader = new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><fields templateEngineKind=\"Velocity\" ><description><![CDATA[]]></description><field name=\"developers.Name\" list=\"true\" imageName=\"\" syntaxKind=\"\"><description><![CDATA[]]></description></field><field name=\"developers.LastName\" list=\"true\" imageName=\"\" syntaxKind=\"\"><description><![CDATA[]]></description></field><field name=\"developers.Mail\" list=\"true\" imageName=\"\" syntaxKind=\"\"><description><![CDATA[]]></description></field></fields>");
            FieldsMetadata metadata = FieldsMetadataXMLSerializer.getInstance().load( fieldsReader );
            report.setFieldsMetadata( metadata );
                        			 
            // Create context
            String json = "{\"project\":{\"name\":\"XDocReport\"},\"developers\":[{\"mail\":\"angelo.zerr@gmail.com\",\"lastName\":\"Angelo\",\"name\":\"ZERR\"},{\"mail\":\"pascal.leclercq@gmail.com\",\"lastName\":\"Pascal\",\"name\":\"Leclercq\"}]}";
            Map context = new JSONObject( json );
            
            // Generate report by merging context and template report.
            OutputStream out = new FileOutputStream( new File( "DumTest_Out.docx" ) );
            report.process( context, out );

        }
        catch ( Exception e )
        {
            e.printStackTrace();
        }
    }
}