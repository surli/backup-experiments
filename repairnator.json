{
  "totalNumberSkippingTests": 39,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "prestodb/presto",
  "failingModule": "/root/workspace/prestodb/presto/283319945/presto-tests",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 650,
  "error-types": [
    "java.io.UncheckedIOException",
    "java.lang.IllegalStateException",
    "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
    "java.lang.AssertionError",
    "java.lang.RuntimeException",
    "java.lang.NullPointerException",
    "skipped"
  ],
  "totalNumberRunningTests": 6325,
  "failing-test-cases": [
    {
      "className": "com.facebook.presto.memory.TestMemoryManager",
      "failingMethods": [
        "com.facebook.presto.memory.TestMemoryManager#testQueryMemoryLimit",
        "com.facebook.presto.memory.TestMemoryManager#testClusterPools",
        "com.facebook.presto.memory.TestMemoryManager#testNoLeak",
        "com.facebook.presto.memory.TestMemoryManager#testOutOfMemoryKiller",
        "com.facebook.presto.memory.TestMemoryManager#testQueryMemoryPerNodeLimit",
        "com.facebook.presto.memory.TestMemoryManager#testQueryCpuLimit",
        "com.facebook.presto.memory.TestMemoryManager#testResourceOverCommit"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestTpchDistributedQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWithSimilarExpressions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testVariance",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinDoubleClauseWithLeftOverlap",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinWithEmptyInnerTable",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRepeatedOutputs2",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTry",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFunctionsFromAggregate",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinDoubleClauseWithRightOverlap",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPlainRightJoinPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderBy2",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowCatalogsLike",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableQuery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinEqualityInference",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowColumns",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueryBodyOrderLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTooLongQuery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testVariancePop",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithJoinOnNonTranslateableSymbols",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTransactionsTable",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQuantifiedComparisonCornerCases",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByLimitAll",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSelectWithComparison",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFunctionWithGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRollup",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinUnionAggregationNullHandling",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionAllPredicateMoveAroundWithOverlappingProjections",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithHavingFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPartialPreSortedWindowFunction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFunctionsExpressions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableQueryInUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOuterJoinWithComplexCorrelatedSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleRightJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithChaining",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPruningCountAggregationOverScalar",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinPredicatePushdownWithSelfEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberUnpartitionedFilterLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleCrossJoins",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueryBody",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPredicatePushdownJoinEqualityGroups",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleLeftJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonReservedTimeWords",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionRequiringCoercion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleRightJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testReorderOutputsOfGroupByAggregation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberUnpartitionedFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnsupportedCorrelatedExistsSubqueries",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleLeftJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSameWindowFunctionsTwoCoerces",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithUnionAndAggregation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithFilterNotInSelect",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithProjectionPushDown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testReferenceToWithQueryInFromClause",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowsPrefixPartitioning",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableSampleBernoulli",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWhereWithRowField",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPartialPrePartitionedWindowFunction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowSchemasLike",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowTablesLike",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnaliasedSubqueries1",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWildcardFromSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberFilterAndLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinNormalizedToInner",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testProbeFilteredLeftJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowSchemasFrom",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testProbeFilteredRightJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSingleGroupingSet",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithAggregationAndJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleRightJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberNoOptimization",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowTablesFrom",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPlainLeftJoinPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testVarbinary",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberPropertyDerivation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValuesWithUnusedColumns",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTrivialNonDeterministicPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNPartitionedWindowWithEqualityFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowFieldAccessor",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQualifiedWildcard",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetOnlyNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinWithNullValues",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithMultipleFromFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testParsingError",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowsSameOrdering",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityLeftJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithAggregation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetVarcharGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetWithNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityRightJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableSampleBernoulliBoundaryValues",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testScalarSubqueryWithGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowNoChannels",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithSelectFunctionCallFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleFullJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByLimitZero",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByMultipleFields",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testScalarFunction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNPartitionedWindow",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWindowFunctionWithNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOutputInEnforceSingleRow",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionDistinct",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnaliasSymbolReferencesWithUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowPropertyDerivation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinLimitPushDown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByOrdinal",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowImplicitCoercion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowTables",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNUnpartitionedWindow",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValues",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSingleDistinctOptimizer",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableSampleSystem",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRandCrossJoins",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinNullHandling",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWith",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNullOnLhsOfInPredicateAllowed",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWhereNull",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValuesWithTimestamp",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinAsInnerPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionArray",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOuterJoinWithNullsOnProbe",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowSession",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowMapAgg",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithRecursive",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testNonEqualityJoinWithTryInFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFunctionWithoutParameters",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionAll",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnaliasedSubqueries",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithQualifiedPrefix",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNUnpartitionedWindowWithCompositeFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleLeftJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWildcard",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPreparedStatementWithSubqueries",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTwoCorrelatedExistsSubqueries",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWithAggregation",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOuterJoinWithCommonExpression",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQualifiedWildcardFromAlias",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueryUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testStdDev",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowCatalogs",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithGroupByFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithSelectDistinctFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSpecialFloatingPointValues",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinWithGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTimeLiterals",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithWhereFunctionCallFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetBigintGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNByMultipleFields",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFrames",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithColumnAliasing",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowCast",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetGroupByWithNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSameInPredicateInProjectionAndFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSelfJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleFullJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnnest",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableQueryOrderLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByAliasWithSameNameAsUnselectedColumn",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberMultipleFilters",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testParametersNonPreparedStatement",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRollupOverUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testPredicatePushdown",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSelectColumnOfNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithHiding",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByExpressionWithLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithSelfJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWithOutputColumnReference",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetBigint",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinAggregationUnionNullHandling",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithAggregationAndTableScan",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRepeatedAggregations",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQualifiedWildcardFromInlineView",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQualifiedWildcardFromJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSelectCaseInsensitive",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberPartitionedFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTableAsSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRows",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnionWithTopN",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleFullJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByOrdinalWithWildcard",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightFilteredJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowFieldAccessorInAggregate",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQuantifiedComparison",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSumOfNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowSchemas",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowFunctionWithImplicitCoercion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWildcardFromJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowsConstantExpression",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithNestedSubqueries",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowNumberLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testScalarSubquery",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValueWindowFunctions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetDouble",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetDoubleGroupBy",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetVarchar",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWindowFunction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRightJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByWithNulls",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSelectOnlyUnion",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowFieldAccessorInWindowFunction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testValuesWithNonTrivialType",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRepeatedOutputs",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowFunctions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNUnpartitionedWindowWithEqualityFilter",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWindowsDifferentPartitions",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinUnionNullHandling",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueryBodyDoubleOrderby",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testWithAliased",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSimpleJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByAlias",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderLimitCompaction",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testOrderByLimit",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testStdDevPop",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSameInputToAggregates",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testShowStatsWithoutFromFails",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testRowFieldAccessorInJoin",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTryLambdaRepeated",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSemiJoinAggregationNullHandling",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTryInvalidCast",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testP4ApproxSetGroupByWithOnlyNullsInOneGroup",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTypeMismatch",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testTopNUnpartitionedLargeWindow",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testQuotedIdentifiers",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueryBodyProjectedOrderby",
        "com.facebook.presto.tests.TestTpchDistributedQueries#testSubqueriesWithDisjunction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES (1,1), (1,2)) t1(a,b) LEFT OUTER JOIN (VALUES (1,1), (1,2)) t2(c,d)              ON a\u003dc AND TRY(1 / (b-a) !\u003d 1000)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM       (SELECT * FROM lineitem ORDER BY orderkey,linenumber LIMIT 5) l          LEFT OUTER JOIN       (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o          ON       o.custkey !\u003d 1000 WHERE o.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM       (SELECT * FROM lineitem ORDER BY orderkey,linenumber LIMIT 5) l          RIGHT OUTER JOIN       (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o          ON       l.quantity !\u003d 5 WHERE l.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT TIME, TIMESTAMP, DATE, INTERVAL\nFROM (SELECT 1 TIME, 2 TIMESTAMP, 3 DATE, 4 INTERVAL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL IN (1, 2, 3)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM orders ORDER BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM orders ORDER BY orderkey DESC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus x FROM orders ORDER BY x ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus orderdate FROM orders ORDER BY orderdate ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM ORDERS ORDER BY orderkey + 1 DESC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM ORDERS ORDER BY orderkey DESC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.quantity + length(orders.comment) \u003e 7",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, totalprice FROM orders ORDER BY orderkey LIMIT ALL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, totalprice FROM orders ORDER BY orderkey LIMIT 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM orders ORDER BY custkey DESC, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, orderdate FROM orders ORDER BY 2, 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM orders ORDER BY 1",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x, sum(cast(x AS double))\nFROM (VALUES \u00271.0\u0027) t(x)\nGROUP BY x\nORDER BY sum(cast(t.x AS double))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, orderstatus FROM orders ORDER BY nullif(orderkey, 3) ASC NULLS FIRST, custkey ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a*2 AS b FROM (VALUES -1, 0, 2) t(a) ORDER BY b*-1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH t AS (SELECT 1 x, 2 y) SELECT x, y FROM t ORDER BY x, y",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT * FROM orders ORDER BY orderkey) LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027line .*: .* is not supported\u0027 for query: SELECT * FROM (VALUES 1,2,3,4) t(x) left JOIN (VALUES 1,2,3,5) t2(y) ON EXISTS(SELECT 1 WHERE x \u003d y)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT DISTINCT a.orderkey FROM (SELECT CASE WHEN orderkey \u003e 10 THEN orderkey END orderkey FROM orders WHERE orderkey \u003c 100) a RIGHT OUTER JOIN (SELECT * FROM orders WHERE orderkey \u003c 100) b ON a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (SELECT (SELECT 1))",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [line 1:1: Incorrect number of parameters: expected 1 but found 0] but found [java.net.ConnectException: Failed to connect to /127.0.0.1:55237]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027line 1:16: no viable alternative at input.*\u0027 for query: SELECT foo FROM",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM lineitem \nLEFT JOIN (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nON lineitem.orderkey \u003d orders.orderkey \nWHERE lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT orderkey+1 as a FROM orders WHERE orderstatus \u003d \u0027F\u0027 UNION ALL \n  SELECT orderkey FROM orders WHERE orderkey % 2 \u003d 0 UNION ALL \n  (SELECT orderkey+custkey FROM orders ORDER BY orderkey LIMIT 10)\n) \nWHERE a \u003c 20 OR a \u003e 100 \nORDER BY a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT custkey custkey1, custkey%4 custkey1a, custkey%8 custkey1b, custkey%16 custkey1c\n  FROM orders\n) orders1 \nJOIN (\n  SELECT custkey custkey2, custkey%4 custkey2a, custkey%8 custkey2b\n  FROM orders\n) orders2 ON orders1.custkey1 \u003d orders2.custkey2\nWHERE custkey2a \u003d custkey2b\n  AND custkey1 \u003d custkey1a\n  AND custkey2 \u003d custkey2a\n  AND custkey1a \u003d custkey1c\n  AND custkey1b \u003d custkey1c\n  AND custkey1b % 2 \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: EXECUTE my_query USING 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT * FROM lineitem WHERE orderkey % 2 \u003d 0) a LEFT JOIN orders ON a.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem RIGHT JOIN (SELECT *  FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT SUM(orderkey) FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT ORDERS.* FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT T.* FROM ORDERS T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT T.* FROM (SELECT orderkey + custkey FROM ORDERS) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.*, b.* FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT nationkey, name, regionkey FROM nation WHERE regionkey \u003d ANY (SELECT regionkey FROM region WHERE name IN (\u0027ASIA\u0027, \u0027EUROPE\u0027))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT \"TOTALPRICE\" \"my price\" FROM \"ORDERS\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM orders ORDER BY rand() LIMIT 5) a CROSS JOIN (SELECT * FROM lineitem ORDER BY rand() LIMIT 5) b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders)SELECT * FROM (   SELECT * FROM a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, a, custkey, b FROM (SELECT custkey, orderstatus, -COUNT(*) a, MAX(orderkey) b FROM ORDERS WHERE orderkey \u003d 1 GROUP BY custkey, orderstatus) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(orderkey), SUM(orderkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey a, orderkey b FROM ORDERS WHERE orderstatus \u003d \u0027F\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderdate, orderdate, orderkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem JOIN (SELECT *  FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders\nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.custkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d orders.custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d lineitem.partkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE orderkey % 4 \u003d 0) orders\nRIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 4 \u003d 0 AND suppkey % 2 \u003d partkey % 2 AND linenumber % 3 \u003d orderkey % 3) lineitem\nON lineitem.linenumber % 3 \u003d orders.orderkey % 4 AND lineitem.orderkey % 3 \u003d orders.custkey % 3\nWHERE lineitem.suppkey % 2 \u003d lineitem.linenumber % 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey WHERE lineitem.orderkey IS NOT NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders\nRIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem\nON lineitem.orderkey % 8 \u003d orders.orderkey % 8\nWHERE (orders.custkey % 8 \u003c 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 \u003d lineitem.orderkey % 8",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey \u003d orders.orderkey\n  AND lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM orders b RIGHT JOIN (SELECT * FROM orders WHERE orderkey \u003d rand()) a ON a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 1024 \u003d 0) lineitem RIGHT JOIN orders ON orders.orderkey \u003d 1024",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT lineitem.orderkey, orders.orderkey\nFROM (\n  SELECT CASE WHEN orderkey % 3 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM lineitem\n  WHERE partkey % 512 \u003d 0\n) AS lineitem \nRIGHT JOIN (\n  SELECT CASE WHEN orderkey % 2 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM orders\n  WHERE custkey % 512 \u003d 0\n) AS orders\nON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 1024 \u003d 0) lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d 1024",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY ROLLUP (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(orderkey)\nFROM (SELECT orderkey, orderstatus\n      FROM orders\n      UNION ALL\n      SELECT orderkey, orderstatus\n      FROM orders) x\nGROUP BY ROLLUP (orderstatus)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT cast(row(1, 2) as row(aa bigint, bb boolean)).aa",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0 FROM (VALUES ROW (CAST(ROW(1, 2) AS ROW(col0 integer, col1 int)))) AS t (a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0, SUM(a.col1[2]), SUM(a.col2.col0), SUM(a.col2.col1) FROM (VALUES ROW(CAST(ROW(1.0, ARRAY[2, 13, 4], row(11, 4.1))   AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.0, ARRAY[2, 23, 4], row(12, 14.0))  AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(1.0, ARRAY[22, 33, 44], row(13, 5.0)) AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double))))) t(a) GROUP BY a.col0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT t.a.col1, custkey, orderkey FROM (VALUES ROW(CAST(ROW(1, 11) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(2, 22) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(3, 33) AS ROW(col0 integer, col1 integer)))) t(a) INNER JOIN orders ON t.a.col0 \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0, SUM(a.col1[1].col1) OVER(PARTITION BY a.col2.col0), SUM(a.col2.col1) OVER(PARTITION BY a.col2.col0) FROM (VALUES ROW(CAST(ROW(1.0, ARRAY[row(31, 14.5), row(12, 4.2)], row(3, 4.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 17.1), row(45, 4.2)], row(7, 16.0)) AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(3.1, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double))))) t(a) ",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT row_number() OVER ()\nFROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey\nWHERE orders.orderkey \u003d 10000\nLIMIT 20",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT JSON_FORMAT(CAST(ROW(1 + 2, CONCAT(\u0027a\u0027, \u0027b\u0027)) AS JSON))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x IN (SELECT * FROM (VALUES 1))\nFROM (VALUES 1) t(x)\nWHERE x IN (SELECT * FROM (VALUES 1))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(a), max(b) FROM (SELECT custkey a, custkey b FROM orders) x",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUBSTR(\u0027Quadratically\u0027, 5, 6) FROM orders LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT (SELECT (SELECT (SELECT 1)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), (SELECT max(orderkey) FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT ORDERKEY FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT \n CAST(NULL AS VARCHAR),\n CAST(NULL AS BIGINT)\nFROM ORDERS\n ORDER BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 123, \u0027foo\u0027 UNION ALL SELECT 999, \u0027bar\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM lineitem WHERE tax \u003c discount",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM orders a JOIN orders b on a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey) FROM lineitem GROUP BY linenumber HAVING min(orderkey) IN (SELECT orderkey FROM orders WHERE orderkey \u003e 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 10 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 2 \u003d 0\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM orders\n  WHERE orderkey % 3 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT orderkey\n    FROM (\n      SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n      FROM orders\n      WHERE orderkey % 200 \u003d 0\n      UNION ALL\n      SELECT CASE WHEN orderkey % 600 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n      FROM orders\n      WHERE orderkey % 300 \u003d 0\n    )\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM lineitem\n  WHERE orderkey % 100 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE orderkey % 2 \u003d 0)\n  FROM orders\n  LIMIT 10)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH empty AS (SELECT 1 WHERE FALSE) SELECT 3 FROM (VALUES 1) WHERE NULL IN (SELECT * FROM empty)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE custkey % 2 \u003d 0 AND orderkey % 3 \u003d 0)\nWHERE orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 7 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE partkey % 2 \u003d 0)\n  AND\n    orderkey % 2 \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 250 \u003d 0\n    UNION ALL\n    SELECT CASE WHEN orderkey % 300 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 200 \u003d 0\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM orders\n  WHERE orderkey % 100 \u003d 0)\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END\n    FROM orders\n    WHERE orderkey % 200 \u003d 0\n    UNION ALL\n    SELECT CASE WHEN orderkey % 600 \u003d 0 THEN NULL ELSE orderkey END\n    FROM orders\n    WHERE orderkey % 300 \u003d 0\n  )\nFROM (\n  SELECT orderkey\n  FROM lineitem\n  WHERE orderkey % 100 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), 6 IN (SELECT orderkey FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*GROUP BY is not supported in SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY clerk)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*HAVING is not supported in SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT avg(orderkey) FROM orders HAVING avg(orderkey) \u003c 5)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*There must be exactly one table in query passed to SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT * FROM orders, lineitem)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*DISTINCT is not supported by SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT DISTINCT * FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*Only \\* and column references are supported by SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT sin(orderkey) FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*Only literals, column references, comparators, is \\(not\\) null and logical operators are allowed in WHERE of SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT orderkey FROM orders WHERE sin(orderkey) \u003e 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027.*There must be exactly one table in query passed to SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT 1)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT 1 a) x CROSS JOIN (SELECT 2 b) y",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a, b FROM (VALUES (1), (2)) t (a) FULL OUTER JOIN (VALUES (1), (3)) u (b) ON a \u003d b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus, COUNT(DISTINCT orderkey) FROM orders GROUP BY custkey, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT STDDEV_SAMP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT STDDEV_POP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM nation WHERE nationkey IN (SELECT 1) OR TRUE",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS ORDER BY custkey) ORDER BY orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey AS a, custkey AS b FROM ORDERS) ORDER BY a LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS) ORDER BY orderkey * -1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT orderkey FROM orders UNION SELECT custkey FROM orders UNION SELECT orderkey FROM orders) ORDER BY orderkey LIMIT 1000",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(CAST(NULL AS BIGINT)) FROM orders GROUP BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (TABLE orders) ORDER BY orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: TABLE orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT * FROM orders ORDER BY orderkey LIMIT 10) UNION ALL TABLE orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: TABLE orders ORDER BY orderkey LIMIT 10",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey FROM orders\", located:\"SELECT orderkey FROM orders\", rewritten:\"SELECT orderkey FROM orders\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, orderstatus FROM orders ORDER BY orderkey ASC, custkey ASC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) WHERE rand() \u003e\u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, sum(TRY(100/(CAST (tax*10 AS BIGINT)))) FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT TRY(CAST(\u0027a\u0027 AS BIGINT))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x + x FROM (SELECT apply(a, i -\u003e i * i) x FROM (VALUES 3) t(a))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT\n  count(*) AS numwait\nFROM\n  nation l1\nWHERE\n  EXISTS(\n    SELECT *\n    FROM\n      nation l2\n    WHERE\n      l2.nationkey \u003d l1.nationkey\n  )\n  AND NOT EXISTS(\n    SELECT *\n    FROM\n      nation l3\n    WHERE\n      l3.nationkey\u003d l1.nationkey\n  )\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027\\Qline 1:10: \u0027\u003c\u003e\u0027 cannot be applied to integer, varchar(1)\\E\u0027 for query: SELECT 1 \u003c\u003e \u0027x\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1, 1, \u0027a\u0027, \u0027a\u0027 UNION ALL SELECT 1, 2, \u0027a\u0027, \u0027b\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM (SELECT orderkey FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a FROM (SELECT orderkey a FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION ALL SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n  WHERE orderkey % 3 \u003d 0\n  UNION ALL\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n  WHERE orderkey % 2 \u003d 0\n) a\nJOIN (\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n) b\nON a.x \u003d b.x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a[1] FROM (SELECT ARRAY[1] UNION ALL SELECT ARRAY[1]) t(a) LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION DISTINCT SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: VALUES 1 UNION ALL VALUES 1.0, 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT regionkey, count(*) FROM (   SELECT regionkey FROM nation    UNION ALL    SELECT * FROM (VALUES 2, 100) t(regionkey)) GROUP BY regionkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey \u003d t.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, 1 FROM orders UNION ALL SELECT orderkey, count(*) FROM orders GROUP BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, orderdate FROM orders WHERE custkey \u003c 1000 UNION ALL SELECT orderkey, shipdate FROM lineitem WHERE linenumber \u003c 2000",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a JOIN orders o ON (a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (SELECT orderdate ds, orderkey\n      FROM orders\n      UNION ALL\n      SELECT shipdate ds, orderkey\n      FROM lineitem) a\nJOIN orders o\nON (substr(cast(a.ds AS VARCHAR), 6, 2) \u003d substr(cast(o.orderdate AS VARCHAR), 6, 2) AND a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT key + 5, status FROM (SELECT orderkey key, orderstatus status FROM orders UNION ALL SELECT orderkey key, linestatus status FROM lineitem)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (   SELECT regionkey FROM nation    UNION ALL    SELECT nationkey FROM nation) t(a) ORDER BY a LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (SELECT 1 FROM nation GROUP BY regionkey UNION ALL SELECT 1 FROM (   SELECT 1 FROM nation    UNION ALL    SELECT 1 FROM nation))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027line .*: Given correlated subquery is not supported\u0027 for query: SELECT EXISTS(SELECT 1 WHERE l.orderkey \u003e 0 OR l.orderkey !\u003d 3) FROM lineitem l",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: VALUES 1, 2, 3, 4",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT LENGTH(x) FROM (SELECT from_base64(\u0027gw\u003d\u003d\u0027) as x)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT VAR_SAMP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT VAR_POP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey FROM orders WHERE custkey \u003d custkey AND cast(nullif(custkey, custkey) as boolean) AND cast(nullif(custkey, custkey) as boolean)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0 FROM (VALUES ROW(CAST(ROW(1, 2) AS ROW(col0 integer, col1 integer)))) AS t (a) WHERE a.col0 \u003e 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT orderkey X FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *, 1.0 * sum(x) OVER () FROM (VALUES 1) t(x)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:55237",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders) SELECT * FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders) SELECT * FROM a x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT orderkey n FROM orders)\n, b AS (SELECT n + 1 n FROM a)\n, c AS (SELECT n + 1 n FROM b)\nSELECT n + 1 FROM c",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a (id) AS (SELECT 123 FROM orders LIMIT 1) SELECT id FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT 1),      b AS (         WITH a AS (SELECT 2)         SELECT * FROM a    )SELECT * FROM b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (\n  WITH aa AS (SELECT 123 x FROM orders LIMIT 1)\n  SELECT x y FROM aa\n), b AS (\n  WITH bb AS (\n    WITH bbb AS (SELECT y FROM a)\n    SELECT bbb.* FROM bbb\n  )\n  SELECT y z FROM bb\n)\nSELECT *\nFROM (\n  WITH q AS (SELECT z w FROM b)\n  SELECT j.*, k.*\n  FROM a j\n  JOIN q k ON (j.y \u003d k.w)\n) t",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT 123 FROM orders LIMIT 1)SELECT a.* FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:55237\u0027 to match \u0027line 1:1: Recursive WITH queries are not supported\u0027 for query: WITH RECURSIVE a AS (SELECT 123) SELECT * FROM a",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "com.facebook.presto.spi.PrestoException: Server is shutting down",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "com.facebook.presto.spi.PrestoException: Server is shutting down",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "com.facebook.presto.spi.PrestoException: Server is shutting down",
          "isError": false
        }
      ],
      "nbFailures": 305,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestQueryPlanDeterminism",
      "failingMethods": [
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testTopNUnpartitionedLargeWindow",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testRowNumberPartitionedFilter",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testTableSampleBernoulli",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testTableSampleBernoulliBoundaryValues",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testTopNUnpartitionedWindow",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testRowNumberUnpartitionedFilter",
        "com.facebook.presto.tests.TestQueryPlanDeterminism#testRowNumberNoOptimization"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey, orderstatus FROM ORDERS\", located:\"SELECT orderkey, orderstatus FROM ORDERS\", rewritten:\"SELECT orderkey, orderstatus FROM ORDERS\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey, orderstatus FROM ORDERS\", located:\"SELECT orderkey, orderstatus FROM ORDERS\", rewritten:\"SELECT orderkey, orderstatus FROM ORDERS\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey, orderstatus FROM ORDERS\", located:\"SELECT orderkey, orderstatus FROM ORDERS\", rewritten:\"SELECT orderkey, orderstatus FROM ORDERS\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey FROM orders\", located:\"SELECT orderkey FROM orders\", rewritten:\"SELECT orderkey FROM orders\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey FROM orders\", located:\"SELECT orderkey FROM orders\", rewritten:\"SELECT orderkey FROM orders\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 10000\", located:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 10000\", rewritten:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 10000\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 5\", located:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 5\", rewritten:\"SELECT row_number() OVER (), orderkey, orderstatus FROM orders ORDER BY orderkey LIMIT 5\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.execution.resourceGroups.db.TestQueues",
      "failingMethods": [
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#setup",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testTwoQueriesAtSameTime",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testRejection",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testBasic",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#tearDown",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testQueuedTimeLimit",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testRunningQuery",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testRunningTimeLimit",
        "com.facebook.presto.execution.resourceGroups.db.TestQueues#testTooManyQueries"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "skipped",
          "isError": false
        }
      ],
      "nbFailures": 21,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.execution.resourceGroups.db.TestResourceGroupIntegration",
      "failingMethods": [
        "com.facebook.presto.execution.resourceGroups.db.TestResourceGroupIntegration#testMemoryFraction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestDistributedSpilledQueries",
      "failingMethods": [
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetBigint",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleFullJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithSelfJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithUnionAndAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByAliasWithSameNameAsUnselectedColumn",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinAggregationNullHandling",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelectColumnOfNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNPartitionedWindowWithEqualityFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinWithEmptyInnerTable",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithTopN",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFunctionWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByOrdinal",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOuterJoinWithCommonExpression",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueriesWithDisjunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinDoubleClauseWithRightOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleRightJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testReorderOutputsOfGroupByAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowTablesFrom",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPruningCountAggregationOverScalar",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testValuesWithTimestamp",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetDoubleGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQuantifiedComparisonCornerCases",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleDistinctOptimizer",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNUnpartitionedWindowWithCompositeFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowImplicitCoercion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonReservedTimeWords",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFunctionsFromAggregate",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTimeLiterals",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowsDifferentPartitions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetBigintGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberPartitionedFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelectWithComparison",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinAggregationUnionNullHandling",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionDistinct",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityRightJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPlainRightJoinPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByOrdinalWithWildcard",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTry",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTryLambdaRepeated",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testVariancePop",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNullOnLhsOfInPredicateAllowed",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinUnionNullHandling",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testVariance",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testParametersNonPreparedStatement",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowTablesLike",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRollup",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQuantifiedComparison",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithHavingFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetGroupByWithOnlyNullsInOneGroup",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSameInPredicateInProjectionAndFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithoutFromFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByLimitAll",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinNormalizedToInner",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithJoinOnNonTranslateableSymbols",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSameInputToAggregates",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnsupportedCorrelatedExistsSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWildcardFromSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionAllPredicateMoveAroundWithOverlappingProjections",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowNoChannels",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWindowFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowsSameOrdering",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelectCaseInsensitive",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithRecursive",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testValuesWithUnusedColumns",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcardFromAlias",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleFullJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleLeftJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithWhereFunctionCallFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByAlias",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcardFromJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueryBody",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWildcardFromJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessorInWindowFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowColumns",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowsConstantExpression",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTransactionsTable",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessor",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#close",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetOnlyNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelfJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testProbeFilteredLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTryInvalidCast",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowCatalogsLike",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNPartitionedWindow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWith",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberMultipleFilters",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithQualifiedPrefix",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNByMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTypeMismatch",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOuterJoinWithComplexCorrelatedSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberUnpartitionedFilterLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableQuery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWhereWithRowField",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowTables",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueryBodyDoubleOrderby",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTwoCorrelatedExistsSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFunctionWithoutParameters",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowPropertyDerivation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRepeatedOutputs",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTrivialNonDeterministicPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinUnionAggregationNullHandling",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOutputInEnforceSingleRow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessorInJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowSession",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableAsSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithFilterNotInSelect",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPredicatePushdownJoinEqualityGroups",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleRightJoinWithRightConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testStdDevPop",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityLeftJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowMapAgg",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPartialPrePartitionedWindowFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueryBodyOrderLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightFilteredJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSelectOnlyUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowFieldAccessorInAggregate",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinPredicatePushdownWithSelfEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFunctionsExpressions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetVarchar",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubquery",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleLeftJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFunctionWithImplicitCoercion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowSchemas",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithSelectFunctionCallFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleRightJoinWithLeftConstantEquality",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOuterJoinWithNullsOnProbe",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinAsInnerPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPreparedStatementWithSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSameWindowFunctionsTwoCoerces",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRollupOverUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithColumnAliasing",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinDoubleClauseWithLeftOverlap",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithAliased",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetGroupByWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionArray",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQuotedIdentifiers",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnnest",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithSimilarExpressions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetDouble",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableQueryOrderLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testParsingError",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSingleGroupingSet",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinEqualityInference",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithHiding",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNUnpartitionedWindow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowSchemasFrom",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowCast",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionAll",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testNonEqualityJoinWithTryInFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinNullHandling",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testStdDev",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinPredicateMoveAround",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoinLimitPushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testP4ApproxSetVarcharGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithSelectDistinctFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowFrames",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithChaining",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testScalarSubqueryWithGroupBy",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByLimitZero",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRightJoinWithNullValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueryUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByMultipleFields",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSubqueryBodyProjectedOrderby",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNUnpartitionedWindowWithEqualityFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderLimitCompaction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRandCrossJoins",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberNoOptimization",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWildcard",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnaliasedSubqueries1",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTopNUnpartitionedLargeWindow",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWithNestedSubqueries",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWindowFunctionWithNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowFunctions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnaliasSymbolReferencesWithUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithProjectionPushDown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testValueWindowFunctions",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSemiJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleFullJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRows",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithAggregation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByWithOutputColumnReference",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowCatalogs",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionRequiringCoercion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableSampleBernoulli",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberFilterAndLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndTableScan",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableSampleBernoulliBoundaryValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testReferenceToWithQueryInFromClause",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowSchemasLike",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testValuesWithNonTrivialType",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWindowsPrefixPartitioning",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPlainLeftJoinPredicatePushdown",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcardFromInlineView",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRepeatedOutputs2",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSpecialFloatingPointValues",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderBy2",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testOrderByExpressionWithLimit",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithGroupByFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testQualifiedWildcard",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testWhereNull",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRepeatedAggregations",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testPartialPreSortedWindowFunction",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testVarbinary",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberPropertyDerivation",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testRowNumberUnpartitionedFilter",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testShowStatsWithMultipleFromFails",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSumOfNulls",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testSimpleCrossJoins",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testTableQueryInUnion",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnionWithAggregationAndJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testProbeFilteredRightJoin",
        "com.facebook.presto.tests.TestDistributedSpilledQueries#testUnaliasedSubqueries"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.comment LIKE \u0027%forges%\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (VALUES (1,1), (1,2)) t1(a,b) LEFT OUTER JOIN (VALUES (1,1), (1,2)) t2(c,d)              ON a\u003dc AND TRY(1 / (b-a) !\u003d 1000)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM       (SELECT * FROM lineitem ORDER BY orderkey,linenumber LIMIT 5) l          LEFT OUTER JOIN       (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o          ON       o.custkey !\u003d 1000 WHERE o.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM       (SELECT * FROM lineitem ORDER BY orderkey,linenumber LIMIT 5) l          RIGHT OUTER JOIN       (SELECT * FROM orders ORDER BY orderkey LIMIT 5) o          ON       l.quantity !\u003d 5 WHERE l.orderkey IS NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT TIME, TIMESTAMP, DATE, INTERVAL\nFROM (SELECT 1 TIME, 2 TIMESTAMP, 3 DATE, 4 INTERVAL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL IN (1, 2, 3)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM orders ORDER BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus FROM orders ORDER BY orderkey DESC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus x FROM orders ORDER BY x ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus orderdate FROM orders ORDER BY orderdate ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM ORDERS ORDER BY orderkey + 1 DESC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM ORDERS ORDER BY orderkey DESC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, totalprice FROM orders ORDER BY orderkey LIMIT ALL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, totalprice FROM orders ORDER BY orderkey LIMIT 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus FROM orders ORDER BY custkey DESC, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, orderdate FROM orders ORDER BY 2, 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM orders ORDER BY 1",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x, sum(cast(x AS double))\nFROM (VALUES \u00271.0\u0027) t(x)\nGROUP BY x\nORDER BY sum(cast(t.x AS double))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, orderstatus FROM orders ORDER BY nullif(orderkey, 3) ASC NULLS FIRST, custkey ASC",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a*2 AS b FROM (VALUES -1, 0, 2) t(a) ORDER BY b*-1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH t AS (SELECT 1 x, 2 y) SELECT x, y FROM t ORDER BY x, y",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT * FROM orders ORDER BY orderkey) LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027line .*: .* is not supported\u0027 for query: SELECT * FROM (VALUES 1,2,3,4) t(x) left JOIN (VALUES 1,2,3,5) t2(y) ON EXISTS(SELECT 1 WHERE x \u003d y)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT DISTINCT a.orderkey FROM (SELECT CASE WHEN orderkey \u003e 10 THEN orderkey END orderkey FROM orders WHERE orderkey \u003c 100) a RIGHT OUTER JOIN (SELECT * FROM orders WHERE orderkey \u003c 100) b ON a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (SELECT (SELECT 1))",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "expected [line 1:1: Incorrect number of parameters: expected 1 but found 0] but found [java.net.ConnectException: Failed to connect to /127.0.0.1:47032]",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027line 1:16: no viable alternative at input.*\u0027 for query: SELECT foo FROM",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM lineitem \nLEFT JOIN (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nON lineitem.orderkey \u003d orders.orderkey \nWHERE lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT orderkey+1 as a FROM orders WHERE orderstatus \u003d \u0027F\u0027 UNION ALL \n  SELECT orderkey FROM orders WHERE orderkey % 2 \u003d 0 UNION ALL \n  (SELECT orderkey+custkey FROM orders ORDER BY orderkey LIMIT 10)\n) \nWHERE a \u003c 20 OR a \u003e 100 \nORDER BY a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (\n  SELECT custkey custkey1, custkey%4 custkey1a, custkey%8 custkey1b, custkey%16 custkey1c\n  FROM orders\n) orders1 \nJOIN (\n  SELECT custkey custkey2, custkey%4 custkey2a, custkey%8 custkey2b\n  FROM orders\n) orders2 ON orders1.custkey1 \u003d orders2.custkey2\nWHERE custkey2a \u003d custkey2b\n  AND custkey1 \u003d custkey1a\n  AND custkey2 \u003d custkey2a\n  AND custkey1a \u003d custkey1c\n  AND custkey1b \u003d custkey1c\n  AND custkey1b % 2 \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: EXECUTE my_query USING 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT * FROM lineitem WHERE orderkey % 2 \u003d 0) a LEFT JOIN orders ON a.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem RIGHT JOIN (SELECT *  FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT SUM(orderkey) FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT ORDERS.* FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT T.* FROM ORDERS T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT T.* FROM (SELECT orderkey + custkey FROM ORDERS) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.*, b.* FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT nationkey, name, regionkey FROM nation WHERE regionkey \u003d ANY (SELECT regionkey FROM region WHERE name IN (\u0027ASIA\u0027, \u0027EUROPE\u0027))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (SELECT 1 WHERE false))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (SELECT CAST(NULL AS INTEGER)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ALL (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 !\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003c\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 \u003e\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL !\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003c\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT NULL \u003e\u003d ANY (SELECT * FROM (VALUES (1), (NULL)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT \"TOTALPRICE\" \"my price\" FROM \"ORDERS\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM orders ORDER BY rand() LIMIT 5) a CROSS JOIN (SELECT * FROM lineitem ORDER BY rand() LIMIT 5) b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders)SELECT * FROM (   SELECT * FROM a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, a, custkey, b FROM (SELECT custkey, orderstatus, -COUNT(*) a, MAX(orderkey) b FROM ORDERS WHERE orderkey \u003d 1 GROUP BY custkey, orderstatus) T",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUM(orderkey), SUM(orderkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey a, orderkey b FROM ORDERS WHERE orderstatus \u003d \u0027F\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderdate, orderdate, orderkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, linestatus, tax, totalprice, orderstatus FROM lineitem JOIN (SELECT *  FROM orders WHERE orderkey % 2 \u003d 0) a ON lineitem.orderkey \u003d a.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders\nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.custkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d orders.custkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d lineitem.partkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE orderkey % 4 \u003d 0) orders\nRIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 4 \u003d 0 AND suppkey % 2 \u003d partkey % 2 AND linenumber % 3 \u003d orderkey % 3) lineitem\nON lineitem.linenumber % 3 \u003d orders.orderkey % 4 AND lineitem.orderkey % 3 \u003d orders.custkey % 3\nWHERE lineitem.suppkey % 2 \u003d lineitem.linenumber % 3",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey WHERE lineitem.orderkey IS NOT NULL",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE orderkey % 16 \u003d 0 AND custkey % 2 \u003d 0) orders\nRIGHT JOIN (SELECT * FROM lineitem WHERE orderkey % 16 \u003d 0 AND partkey % 2 \u003d 0) lineitem\nON lineitem.orderkey % 8 \u003d orders.orderkey % 8\nWHERE (orders.custkey % 8 \u003c 7 OR orders.custkey % 8 IS NULL) AND orders.custkey % 8 \u003d lineitem.orderkey % 8",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT * FROM orders WHERE orders.orderkey % 2 \u003d 0\n) orders \nRIGHT JOIN lineitem\nON lineitem.orderkey \u003d orders.orderkey \nWHERE orders.orderkey \u003d orders.orderkey\n  AND lineitem.orderkey % 4 \u003d 0\n  AND (lineitem.suppkey % 2 \u003d orders.orderkey % 2 OR orders.orderkey IS NULL)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM orders b RIGHT JOIN (SELECT * FROM orders WHERE orderkey \u003d rand()) a ON a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 1024 \u003d 0) lineitem RIGHT JOIN orders ON orders.orderkey \u003d 1024",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT lineitem.orderkey, orders.orderkey\nFROM (\n  SELECT CASE WHEN orderkey % 3 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM lineitem\n  WHERE partkey % 512 \u003d 0\n) AS lineitem \nRIGHT JOIN (\n  SELECT CASE WHEN orderkey % 2 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n  FROM orders\n  WHERE custkey % 512 \u003d 0\n) AS orders\nON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM (SELECT * FROM lineitem WHERE orderkey % 1024 \u003d 0) lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d 1024",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, suppkey, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY ROLLUP (linenumber, suppkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(orderkey)\nFROM (SELECT orderkey, orderstatus\n      FROM orders\n      UNION ALL\n      SELECT orderkey, orderstatus\n      FROM orders) x\nGROUP BY ROLLUP (orderstatus)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT cast(row(1, 2) as row(aa bigint, bb boolean)).aa",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0 FROM (VALUES ROW (CAST(ROW(1, 2) AS ROW(col0 integer, col1 int)))) AS t (a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0, SUM(a.col1[2]), SUM(a.col2.col0), SUM(a.col2.col1) FROM (VALUES ROW(CAST(ROW(1.0, ARRAY[2, 13, 4], row(11, 4.1))   AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.0, ARRAY[2, 23, 4], row(12, 14.0))  AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(1.0, ARRAY[22, 33, 44], row(13, 5.0)) AS ROW(col0 double, col1 array(integer), col2 row(col0 integer, col1 double))))) t(a) GROUP BY a.col0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT t.a.col1, custkey, orderkey FROM (VALUES ROW(CAST(ROW(1, 11) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(2, 22) AS ROW(col0 integer, col1 integer))), ROW(CAST(ROW(3, 33) AS ROW(col0 integer, col1 integer)))) t(a) INNER JOIN orders ON t.a.col0 \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0, SUM(a.col1[1].col1) OVER(PARTITION BY a.col2.col0), SUM(a.col2.col1) OVER(PARTITION BY a.col2.col0) FROM (VALUES ROW(CAST(ROW(1.0, ARRAY[row(31, 14.5), row(12, 4.2)], row(3, 4.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 17.1), row(45, 4.2)], row(7, 16.0)) AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(2.2, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double)))), ROW(CAST(ROW(3.1, ARRAY[row(41, 13.1), row(32, 4.2)], row(6, 6.0))  AS ROW(col0 double, col1 array(ROW(col0 integer, col1 double)), col2 row(col0 integer, col1 double))))) t(a) ",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT row_number() OVER ()\nFROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey\nWHERE orders.orderkey \u003d 10000\nLIMIT 20",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT JSON_FORMAT(CAST(ROW(1 + 2, CONCAT(\u0027a\u0027, \u0027b\u0027)) AS JSON))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x IN (SELECT * FROM (VALUES 1))\nFROM (VALUES 1) t(x)\nWHERE x IN (SELECT * FROM (VALUES 1))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT max(a), max(b) FROM (SELECT custkey a, custkey b FROM orders) x",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT SUBSTR(\u0027Quadratically\u0027, 5, 6) FROM orders LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT (SELECT (SELECT (SELECT 1)))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), (SELECT max(orderkey) FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT ORDERKEY FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT \n CAST(NULL AS VARCHAR),\n CAST(NULL AS BIGINT)\nFROM ORDERS\n ORDER BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 123, \u0027foo\u0027 UNION ALL SELECT 999, \u0027bar\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM lineitem WHERE tax \u003c discount",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM orders a JOIN orders b on a.orderkey \u003d b.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey) FROM lineitem GROUP BY linenumber HAVING min(orderkey) IN (SELECT orderkey FROM orders WHERE orderkey \u003e 1)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 10 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 2 \u003d 0\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM orders\n  WHERE orderkey % 3 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT orderkey\n    FROM (\n      SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n      FROM orders\n      WHERE orderkey % 200 \u003d 0\n      UNION ALL\n      SELECT CASE WHEN orderkey % 600 \u003d 0 THEN NULL ELSE orderkey END AS orderkey\n      FROM orders\n      WHERE orderkey % 300 \u003d 0\n    )\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM lineitem\n  WHERE orderkey % 100 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT orderkey\n  IN (\n    SELECT orderkey\n    FROM lineitem\n    WHERE orderkey % 2 \u003d 0)\n  FROM orders\n  LIMIT 10)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH empty AS (SELECT 1 WHERE FALSE) SELECT 3 FROM (VALUES 1) WHERE NULL IN (SELECT * FROM empty)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (SELECT * FROM orders WHERE custkey % 2 \u003d 0 AND orderkey % 3 \u003d 0)\nWHERE orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 7 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE partkey % 2 \u003d 0)\n  AND\n    orderkey % 2 \u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 250 \u003d 0\n    UNION ALL\n    SELECT CASE WHEN orderkey % 300 \u003d 0 THEN NULL ELSE orderkey END\n    FROM lineitem\n    WHERE orderkey % 200 \u003d 0\n    GROUP BY orderkey\n  )\nFROM (\n  SELECT orderkey\n  FROM orders\n  WHERE orderkey % 100 \u003d 0)\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey\n  IN (\n    SELECT CASE WHEN orderkey % 500 \u003d 0 THEN NULL ELSE orderkey END\n    FROM orders\n    WHERE orderkey % 200 \u003d 0\n    UNION ALL\n    SELECT CASE WHEN orderkey % 600 \u003d 0 THEN NULL ELSE orderkey END\n    FROM orders\n    WHERE orderkey % 300 \u003d 0\n  )\nFROM (\n  SELECT orderkey\n  FROM lineitem\n  WHERE orderkey % 100 \u003d 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, min(orderkey), 6 IN (SELECT orderkey FROM orders WHERE orderkey \u003c 7)FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*GROUP BY is not supported in SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT avg(totalprice) FROM orders GROUP BY clerk)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*HAVING is not supported in SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT avg(orderkey) FROM orders HAVING avg(orderkey) \u003c 5)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*There must be exactly one table in query passed to SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT * FROM orders, lineitem)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*DISTINCT is not supported by SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT DISTINCT * FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*Only \\* and column references are supported by SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT sin(orderkey) FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*Only literals, column references, comparators, is \\(not\\) null and logical operators are allowed in WHERE of SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT orderkey FROM orders WHERE sin(orderkey) \u003e 0)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027.*There must be exactly one table in query passed to SHOW STATS SELECT clause\u0027 for query: SHOW STATS FOR (SELECT 1)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT 1 a) x CROSS JOIN (SELECT 2 b) y",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a, b FROM (VALUES (1), (2)) t (a) FULL OUTER JOIN (VALUES (1), (3)) u (b) ON a \u003d b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem FULL JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem LEFT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND orders.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) FROM lineitem RIGHT JOIN orders ON lineitem.orderkey \u003d orders.orderkey AND lineitem.orderkey \u003d 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey, orderstatus, COUNT(DISTINCT orderkey) FROM orders GROUP BY custkey, orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, SUM(CAST(quantity AS BIGINT)) FROM lineitem GROUP BY GROUPING SETS (linenumber)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT STDDEV_SAMP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT STDDEV_POP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM nation WHERE nationkey IN (SELECT 1) OR TRUE",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS ORDER BY custkey) ORDER BY orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey AS a, custkey AS b FROM ORDERS) ORDER BY a LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT orderkey, custkey FROM ORDERS) ORDER BY orderkey * -1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT orderkey FROM orders UNION SELECT custkey FROM orders UNION SELECT orderkey FROM orders) ORDER BY orderkey LIMIT 1000",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderstatus, sum(CAST(NULL AS BIGINT)) FROM orders GROUP BY orderstatus",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (TABLE orders) ORDER BY orderkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: TABLE orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: (SELECT * FROM orders ORDER BY orderkey LIMIT 10) UNION ALL TABLE orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: TABLE orders ORDER BY orderkey LIMIT 10",
          "isError": false
        },
        {
          "failureName": "org.skife.jdbi.v2.exceptions.UnableToCreateStatementException",
          "failureDetail": "org.h2.jdbc.JdbcSQLException: Database is already closed (to disable automatic closing at VM shutdown, add \";DB_CLOSE_ON_EXIT\u003dFALSE\" to the db URL) [90121-189] [statement:\"SELECT orderkey FROM orders\", located:\"SELECT orderkey FROM orders\", rewritten:\"SELECT orderkey FROM orders\", arguments:{ positional:{}, named:{}, finder:[]}]",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, custkey, orderstatus FROM orders ORDER BY orderkey ASC, custkey ASC LIMIT 10",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*) WHERE rand() \u003e\u003d 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT linenumber, sum(TRY(100/(CAST (tax*10 AS BIGINT)))) FROM lineitem GROUP BY linenumber",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT TRY(CAST(\u0027a\u0027 AS BIGINT))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT x + x FROM (SELECT apply(a, i -\u003e i * i) x FROM (VALUES 3) t(a))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT\n  count(*) AS numwait\nFROM\n  nation l1\nWHERE\n  EXISTS(\n    SELECT *\n    FROM\n      nation l2\n    WHERE\n      l2.nationkey \u003d l1.nationkey\n  )\n  AND NOT EXISTS(\n    SELECT *\n    FROM\n      nation l3\n    WHERE\n      l3.nationkey\u003d l1.nationkey\n  )\n",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027\\Qline 1:10: \u0027\u003c\u003e\u0027 cannot be applied to integer, varchar(1)\\E\u0027 for query: SELECT 1 \u003c\u003e \u0027x\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1, 1, \u0027a\u0027, \u0027a\u0027 UNION ALL SELECT 1, 2, \u0027a\u0027, \u0027b\u0027",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM (SELECT orderkey FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a FROM (SELECT orderkey a FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION ALL SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT COUNT(*)\nFROM (\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n  WHERE orderkey % 3 \u003d 0\n  UNION ALL\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n  WHERE orderkey % 2 \u003d 0\n) a\nJOIN (\n  SELECT orderkey AS x, orderkey as y\n  FROM orders\n) b\nON a.x \u003d b.x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a[1] FROM (SELECT ARRAY[1] UNION ALL SELECT ARRAY[1]) t(a) LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey FROM orders UNION DISTINCT SELECT custkey FROM orders",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: VALUES 1 UNION ALL VALUES 1.0, 2",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT regionkey, count(*) FROM (   SELECT regionkey FROM nation    UNION ALL    SELECT * FROM (VALUES 2, 100) t(regionkey)) GROUP BY regionkey",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ( SELECT orderkey, count(*) FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a GROUP BY orderkey) t JOIN orders o ON (o.orderkey \u003d t.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, 1 FROM orders UNION ALL SELECT orderkey, count(*) FROM orders GROUP BY 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT orderkey, orderdate FROM orders WHERE custkey \u003c 1000 UNION ALL SELECT orderkey, shipdate FROM lineitem WHERE linenumber \u003c 2000",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (   SELECT orderdate ds, orderkey FROM orders    UNION ALL    SELECT shipdate ds, orderkey FROM lineitem) a JOIN orders o ON (a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *\nFROM (SELECT orderdate ds, orderkey\n      FROM orders\n      UNION ALL\n      SELECT shipdate ds, orderkey\n      FROM lineitem) a\nJOIN orders o\nON (substr(cast(a.ds AS VARCHAR), 6, 2) \u003d substr(cast(o.orderdate AS VARCHAR), 6, 2) AND a.orderkey \u003d o.orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT key + 5, status FROM (SELECT orderkey key, orderstatus status FROM orders UNION ALL SELECT orderkey key, linestatus status FROM lineitem)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (   SELECT regionkey FROM nation    UNION ALL    SELECT nationkey FROM nation) t(a) ORDER BY a LIMIT 1",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT count(*) FROM (SELECT 1 FROM nation GROUP BY regionkey UNION ALL SELECT 1 FROM (   SELECT 1 FROM nation    UNION ALL    SELECT 1 FROM nation))",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT 1 FROM (VALUES (ARRAY[1])) AS t (a) CROSS JOIN UNNEST(a)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027line .*: Given correlated subquery is not supported\u0027 for query: SELECT EXISTS(SELECT 1 WHERE l.orderkey \u003e 0 OR l.orderkey !\u003d 3) FROM lineitem l",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: VALUES 1, 2, 3, 4",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT LENGTH(x) FROM (SELECT from_base64(\u0027gw\u003d\u003d\u0027) as x)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT VAR_SAMP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT VAR_POP(custkey) FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT custkey FROM orders WHERE custkey \u003d custkey AND cast(nullif(custkey, custkey) as boolean) AND cast(nullif(custkey, custkey) as boolean)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT a.col0 FROM (VALUES ROW(CAST(ROW(1, 2) AS ROW(col0 integer, col1 integer)))) AS t (a) WHERE a.col0 \u003e 0",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM ORDERS",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (select orderkey, partkey from lineitem) a join (select orderkey, custkey from orders) b using (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT * FROM (SELECT orderkey X FROM orders)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: SELECT *, 1.0 * sum(x) OVER () FROM (VALUES 1) t(x)",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:47032",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders) SELECT * FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT * FROM orders) SELECT * FROM a x",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT orderkey n FROM orders)\n, b AS (SELECT n + 1 n FROM a)\n, c AS (SELECT n + 1 n FROM b)\nSELECT n + 1 FROM c",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a (id) AS (SELECT 123 FROM orders LIMIT 1) SELECT id FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT 1),      b AS (         WITH a AS (SELECT 2)         SELECT * FROM a    )SELECT * FROM b",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (\n  WITH aa AS (SELECT 123 x FROM orders LIMIT 1)\n  SELECT x y FROM aa\n), b AS (\n  WITH bb AS (\n    WITH bbb AS (SELECT y FROM a)\n    SELECT bbb.* FROM bbb\n  )\n  SELECT y z FROM bb\n)\nSELECT *\nFROM (\n  WITH q AS (SELECT z w FROM b)\n  SELECT j.*, k.*\n  FROM a j\n  JOIN q k ON (j.y \u003d k.w)\n) t",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH a AS (SELECT 123 FROM orders LIMIT 1)SELECT a.* FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Expected exception message \u0027java.net.ConnectException: Failed to connect to /127.0.0.1:47032\u0027 to match \u0027line 1:1: Recursive WITH queries are not supported\u0027 for query: WITH RECURSIVE a AS (SELECT 123) SELECT * FROM a",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": "Execution of \u0027actual\u0027 query failed: WITH x AS (SELECT DISTINCT orderkey FROM orders ORDER BY orderkey LIMIT 10)\nSELECT count(*) FROM x a JOIN x b USING (orderkey)",
          "isError": false
        },
        {
          "failureName": "java.lang.RuntimeException",
          "failureDetail": "com.facebook.presto.spi.PrestoException: Server is shutting down",
          "isError": false
        }
      ],
      "nbFailures": 304,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.execution.TestQueues",
      "failingMethods": [
        "com.facebook.presto.execution.TestQueues#testResourceGroupManager",
        "com.facebook.presto.execution.TestQueues#testSqlQueryQueueManager",
        "com.facebook.presto.execution.TestQueues#testSqlQueryQueueManagerWithTooManyQueriesScheduled",
        "com.facebook.presto.execution.TestQueues#testResourceGroupManagerRejection",
        "com.facebook.presto.execution.TestQueues#testSqlQueryQueueManagerWithTwoDashboardQueriesRequestedAtTheSameTime",
        "com.facebook.presto.execution.TestQueues#testQueryTypeBasedSelection",
        "com.facebook.presto.execution.TestQueues#testSqlQueryQueueManagerRejection",
        "com.facebook.presto.execution.TestQueues#testResourceGroupManagerWithTooManyQueriesScheduled",
        "com.facebook.presto.execution.TestQueues#testResourceGroupManagerWithTwoDashboardQueriesRequestedAtTheSameTime"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 9,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestMetadataManager",
      "failingMethods": [
        "com.facebook.presto.tests.TestMetadataManager#testMetadataIsClearedAfterQueryFailed",
        "com.facebook.presto.tests.TestMetadataManager#setUp",
        "com.facebook.presto.tests.TestMetadataManager#testMetadataIsClearedAfterQueryFinished",
        "com.facebook.presto.tests.TestMetadataManager#tearDown",
        "com.facebook.presto.tests.TestMetadataManager#testMetadataIsClearedAfterQueryCanceled"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.execution.TestEventListener",
      "failingMethods": [
        "com.facebook.presto.execution.TestEventListener#tearDown",
        "com.facebook.presto.execution.TestEventListener#testOutputStats",
        "com.facebook.presto.execution.TestEventListener#setUp",
        "com.facebook.presto.execution.TestEventListener#testConstantQuery",
        "com.facebook.presto.execution.TestEventListener#testNormalQuery"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "skipped",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": false
        }
      ],
      "nbFailures": 5,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestTpchDistributedStats",
      "failingMethods": [
        "com.facebook.presto.tests.TestTpchDistributedStats#testEstimateForSimpleQuery"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.io.UncheckedIOException",
          "failureDetail": "java.net.ConnectException: Failed to connect to /127.0.0.1:38881",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestMinWorkerRequirement",
      "failingMethods": [
        "com.facebook.presto.tests.TestMinWorkerRequirement#testInitializationTimeout",
        "com.facebook.presto.tests.TestMinWorkerRequirement#testInsufficientWorkerNodes",
        "com.facebook.presto.tests.TestMinWorkerRequirement#testInsufficientWorkerNodesWithCoordinatorExcluded",
        "com.facebook.presto.tests.TestMinWorkerRequirement#testSufficientWorkerNodes"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 4,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.tests.TestGracefulShutdown",
      "failingMethods": [
        "com.facebook.presto.tests.TestGracefulShutdown#testCoordinatorShutdown",
        "com.facebook.presto.tests.TestGracefulShutdown#testShutdown"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 2,
      "nbErrors": 0
    },
    {
      "className": "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration",
      "failingMethods": [
        "com.facebook.presto.execution.resourceGroups.TestResourceGroupIntegration#testMemoryFraction"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Shutdown in progress",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}