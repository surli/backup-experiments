{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 0,
  "repo": "phoenixnap/springmvc-raml-plugin",
  "failingModule": "/root/workspace/phoenixnap/springmvc-raml-plugin/313516611/springmvc-raml-parser",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 15,
  "error-types": [
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 221,
  "failing-test-cases": [
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-------com.gen.test.[BaseController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateBaseRequest; import com.gen.test.model.CreateBaseResponse; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @Validated @RequestMapping(\"/api/base\") public interface BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cCreateBaseResponse\u003e createBase(         @Valid         @RequestBody         CreateBaseRequest createBaseRequest);  } ] \u003e but was:\u003c...-------com.gen.test.[model.User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      final static long serialVersionUID \u003d 432244124315052446L;     private List\u003cString\u003e nickNames \u003d new ArrayList\u003cString\u003e();     private List\u003cDouble\u003e orderNumbers \u003d new ArrayList\u003cDouble\u003e();      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(List\u003cString\u003e nickNames, List\u003cDouble\u003e orderNumbers) {         super();         this.nickNames \u003d nickNames;         this.orderNumbers \u003d orderNumbers;     }      /**      * Returns the nickNames.      *       * @return      *     nickNames      */     public List\u003cString\u003e getNickNames() {         return nickNames;     }      /**      * Set the nickNames.      *       * @param nickNames      *     the new nickNames      */     public void setNickNames(List\u003cString\u003e nickNames) {         this.nickNames \u003d nickNames;     }      /**      * Returns the orderNumbers.      *       * @return      *     orderNumbers      */     public List\u003cDouble\u003e getOrderNumbers() {         return orderNumbers;     }      /**      * Set the orderNumbers.      *       * @param orderNumbers      *     the new orderNumbers      */     public void setOrderNumbers(List\u003cDouble\u003e orderNumbers) {         this.orderNumbers \u003d orderNumbers;     }      public int hashCode() {         return new HashCodeBuilder().append(nickNames).append(orderNumbers).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().append(nickNames, otherObject.nickNames).append(orderNumbers, otherObject.orderNumbers).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"nickNames\", nickNames).append(\"orderNumbers\", orderNumbers).toString();     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.User; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(\"/api/users\") public interface UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cUser\u003e createUser(User user);      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003cUser\u003e updateUsers(User user);  }] \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-------com.gen.test.[BaseController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateBaseRequest; import com.gen.test.model.CreateBaseResponse; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @RequestMapping(\"/api/base\") @Validated public class BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public CreateBaseResponse createBase(         @Valid         @RequestBody         CreateBaseRequest createBaseRequest) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ] \u003e but was:\u003c...-------com.gen.test.[model.User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      final static long serialVersionUID \u003d 328137634419312123L;     private List\u003cString\u003e nickNames \u003d new ArrayList\u003cString\u003e();     private List\u003cDouble\u003e orderNumbers \u003d new ArrayList\u003cDouble\u003e();      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(List\u003cString\u003e nickNames, List\u003cDouble\u003e orderNumbers) {         super();         this.nickNames \u003d nickNames;         this.orderNumbers \u003d orderNumbers;     }      /**      * Returns the nickNames.      *       * @return      *     nickNames      */     public List\u003cString\u003e getNickNames() {         return nickNames;     }      /**      * Set the nickNames.      *       * @param nickNames      *     the new nickNames      */     public void setNickNames(List\u003cString\u003e nickNames) {         this.nickNames \u003d nickNames;     }      /**      * Returns the orderNumbers.      *       * @return      *     orderNumbers      */     public List\u003cDouble\u003e getOrderNumbers() {         return orderNumbers;     }      /**      * Set the orderNumbers.      *       * @param orderNumbers      *     the new orderNumbers      */     public void setOrderNumbers(List\u003cDouble\u003e orderNumbers) {         this.orderNumbers \u003d orderNumbers;     }      public int hashCode() {         return new HashCodeBuilder().append(nickNames).append(orderNumbers).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().append(nickNames, otherObject.nickNames).append(orderNumbers, otherObject.orderNumbers).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"nickNames\", nickNames).append(\"orderNumbers\", orderNumbers).toString();     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.User; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(\"/api/users\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public User createUser(User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.PUT)     public User updateUsers(User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }] \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-------com.gen.test.[BaseController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateBaseRequest; import com.gen.test.model.CreateBaseResponse; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ public interface BaseController {       /**      * No description      *      */     public ResponseEntity\u003cCreateBaseResponse\u003e createBase(         @Valid         CreateBaseRequest createBaseRequest);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateBaseRequest; import com.gen.test.model.CreateBaseResponse; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @RequestMapping(\"/api/base\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cCreateBaseResponse\u003e createBase(         @Valid         @RequestBody         CreateBaseRequest createBaseRequest) {         return this.baseControllerDelegate.createBase(createBaseRequest);     }  } ] \u003e but was:\u003c...-------com.gen.test.[model.User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      final static long serialVersionUID \u003d 291782986472392122L;     private List\u003cString\u003e nickNames \u003d new ArrayList\u003cString\u003e();     private List\u003cDouble\u003e orderNumbers \u003d new ArrayList\u003cDouble\u003e();      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(List\u003cString\u003e nickNames, List\u003cDouble\u003e orderNumbers) {         super();         this.nickNames \u003d nickNames;         this.orderNumbers \u003d orderNumbers;     }      /**      * Returns the nickNames.      *       * @return      *     nickNames      */     public List\u003cString\u003e getNickNames() {         return nickNames;     }      /**      * Set the nickNames.      *       * @param nickNames      *     the new nickNames      */     public void setNickNames(List\u003cString\u003e nickNames) {         this.nickNames \u003d nickNames;     }      /**      * Returns the orderNumbers.      *       * @return      *     orderNumbers      */     public List\u003cDouble\u003e getOrderNumbers() {         return orderNumbers;     }      /**      * Set the orderNumbers.      *       * @param orderNumbers      *     the new orderNumbers      */     public void setOrderNumbers(List\u003cDouble\u003e orderNumbers) {         this.orderNumbers \u003d orderNumbers;     }      public int hashCode() {         return new HashCodeBuilder().append(nickNames).append(orderNumbers).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().append(nickNames, otherObject.nickNames).append(orderNumbers, otherObject.orderNumbers).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"nickNames\", nickNames).append(\"orderNumbers\", orderNumbers).toString();     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.User; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface UserController {       /**      * No description      *       */     public ResponseEntity\u003cUser\u003e createUser(User user);      /**      * No description      *       */     public ResponseEntity\u003cUser\u003e updateUsers(User user);  } -----------------------------------com.gen.test.UserControllerDecorator.java-----------------------------------  package com.gen.test;  import com.gen.test.model.User; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(\"/api/users\") @Validated public class UserControllerDecorator     implements UserController {      @Autowired     private UserController userControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cUser\u003e createUser(User user) {         return this.userControllerDelegate.createUser(user);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003cUser\u003e updateUsers(User user) {         return this.userControllerDelegate.updateUsers(user);     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.RamlSchemaWithInheritanceTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.RamlSchemaWithInheritanceTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a.util.List; import [javax.validation.Valid; import com.gen.test.model.Person; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/persons\", produces \u003d \"application/json\") @Validated public class PersonController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cPerson\u003e getPersons() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public Person createPerson(         @Valid         @RequestBody         ]Person person) {    ...\u003e but was:\u003c...a.util.List; import [com.gen.test.model.Person; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/persons\", produces \u003d \"application/json\") @Validated public class PersonController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cPerson\u003e getPersons() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public Person createPerson(]Person person) {    ...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue172RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue172RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...m.gen.test;  import [javax.validation.Valid; import com.gen.test.model.EventCreate; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(\"/api/events\") @Validated public class EventController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e createEvent(         @Valid         @RequestBody         EventCreate eventCreate) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...m.gen.test;  import [com.gen.test.model.EventCreate; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(\"/api/events\") @Validated public class EventController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e createEvent(EventCreate eventCreate) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue208RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue208RulesTest#applySpring4ControllerInterfaceRule_shouldCreate_valid_class_inheritance"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...m.gen.test;  import [javax.validation.Valid; import com.gen.test.model.Product; import com.gen.test.model.ProductUpdate; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(\"/api/products\") public interface ProductController {       /**      * No description      *       */     @RequestMapping(value \u003d \"/{productId}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cProduct\u003e getProductById(         @PathVariable         Long productId);      /**      * No description      *       */     @RequestMapping(value \u003d \"/{productId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003c?\u003e updateProductById(         @PathVariable         Long productId,         @Valid         @RequestBody         ProductUpdate productUpdate);  }]\u003e but was:\u003c...m.gen.test;  import [com.gen.test.model.Product; import com.gen.test.model.ProductUpdate; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(\"/api/products\") public interface ProductController {       /**      * No description      *       */     @RequestMapping(value \u003d \"/{productId}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cProduct\u003e getProductById(         @PathVariable         Long productId);      /**      * No description      *       */     @RequestMapping(value \u003d \"/{productId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003c?\u003e updateProductById(         @PathVariable         Long productId, ProductUpdate productUpdate);  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest#applySpringFeignClient_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...el.Song\u003e createSong([         @javax.validation.Valid         @org.springframework.web.bind.annotation.RequestBody         com.gen.test.model.Song song);      /**      * Gets song by id      *       */     @RequestMapping(value \u003d \"/{songId}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003ccom.gen.test.model.Song\u003e getSongById(         @PathVariable         String songId);      /**      * Updates song      *       */     @RequestMapping(value \u003d \"/{songId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003ccom.gen.test.model.Song\u003e updateSongById(         @PathVariable         String songId,         @javax.validation.Valid         @org.springframework.web.bind.annotation.RequestBody        ] com.gen.test.model....\u003e but was:\u003c...el.Song\u003e createSong([com.gen.test.model.Song song);      /**      * Gets song by id      *       */     @RequestMapping(value \u003d \"/{songId}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003ccom.gen.test.model.Song\u003e getSongById(         @PathVariable         String songId);      /**      * Updates song      *       */     @RequestMapping(value \u003d \"/{songId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003ccom.gen.test.model.Song\u003e updateSongById(         @PathVariable         String songId,] com.gen.test.model....\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue181RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue181RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...m.gen.test;  import [javax.validation.Valid; import com.gen.test.model.User; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"/{userId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003c?\u003e updateUserById(         @PathVariable         Long userId,         @Valid         @RequestBody         User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{userId}\", method \u003d RequestMethod.PATCH)     public ResponseEntity\u003c?\u003e modifyUserById(         @PathVariable         Long userId,         @RequestBody         User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ] \u003e but was:\u003c...m.gen.test;  import [com.gen.test.model.User; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"/{userId}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003c?\u003e updateUserById(         @PathVariable         Long userId, User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{userId}\", method \u003d RequestMethod.PATCH)     public ResponseEntity\u003c?\u003e modifyUserById(         @PathVariable         Long userId, User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue158RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue158RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a.util.List; import [javax.validation.Valid; import com.gen.test.model.User; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cUser\u003e getUsers() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public User createUser(         @Valid         @RequestBody         User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...a.util.List; import [com.gen.test.model.User; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cUser\u003e getUsers() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public User createUser(User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest#applySpring4RestTemplateClientRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...--------------------[  package com.gen.test;  import java.util.List; import javax.validation.Valid; import org.springframework.http.ResponseEntity;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface SampleUnitClient {       /**      * Retrieves  samples      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e getSampleUnits();      /**      * Creates a sample unit      *       * @param sampleUnit The Request Body Payload      */     public ResponseEntity\u003c?\u003e createSampleUnit(         @Valid         com.gen.test.model.SampleUnit sampleUnit);  } -----------------------------------com.gen.test.SampleUnitClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import javax.validation.Valid; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @Component public class SampleUnitClientImpl     implements SampleUnitClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * Retrieves  samples      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e getSampleUnits() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/sample_units\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.SampleUnit\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * Creates a sample unit      *       */     public ResponseEntity\u003c?\u003e createSampleUnit(         @Valid         com.gen.test.model.SampleUnit sampleUnit) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/sample_units\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(sampleUnit, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Object.class);     }  } ] \u003e but was:\u003c...--------------------[  package com.gen.test;  import java.util.List; import org.springframework.http.ResponseEntity;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface SampleUnitClient {       /**      * Retrieves  samples      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e getSampleUnits();      /**      * Creates a sample unit      *       * @param sampleUnit The Request Body Payload      */     public ResponseEntity\u003c?\u003e createSampleUnit(com.gen.test.model.SampleUnit sampleUnit);  } -----------------------------------com.gen.test.SampleUnitClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @Component public class SampleUnitClientImpl     implements SampleUnitClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * Retrieves  samples      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e getSampleUnits() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/sample_units\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.SampleUnit\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003ccom.gen.test.model.SampleUnit\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * Creates a sample unit      *       */     public ResponseEntity\u003c?\u003e createSampleUnit(com.gen.test.model.SampleUnit sampleUnit) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/sample_units\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(sampleUnit, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Object.class);     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.ShortcutMappingsTest#applySpring4ControllerInterfaceWithShortcutAnnotationsRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a.util.List; import [javax.validation.Valid; import com.gen.test.model.Manager; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PatchMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @Validated @RequestMapping(value \u003d \"/api/organization/persons/managers\", produces \u003d \"application/json\") public interface PersonManagerController {       /**      * No description      *      */     @GetMapping     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers();      /**      * No description      *      */     @PostMapping     public ResponseEntity\u003cManager\u003e createPersonsManager(         @Valid         @RequestBody         Manager manager);      /**      * No description      *      */     @PatchMapping     public ResponseEntity\u003cManager\u003e modifyPersonsManagers(         @RequestBody         Manager manager);      /**      * No description      *      */     @PutMapping(\"/{id}\")     public ResponseEntity\u003c?\u003e updateById(         @PathVariable         String id,         @Valid         @RequestBody         Manager manager);      /**      * No description      *]      */     @Delete...\u003e but was:\u003c...a.util.List; import [com.gen.test.model.Manager; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PatchMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(value \u003d \"/api/organization/persons/managers\", produces \u003d \"application/json\") public interface PersonManagerController {       /**      * No description      *       */     @GetMapping     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers();      /**      * No description      *       */     @PostMapping     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager);      /**      * No description      *       */     @PatchMapping     public ResponseEntity\u003cManager\u003e modifyPersonsManagers(Manager manager);      /**      * No description      *       */     @PutMapping(\"/{id}\")     public ResponseEntity\u003c?\u003e updateById(         @PathVariable         String id, Manager manager);      /**      * No description      * ]      */     @Delete...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...--------------------[  package com.gen.test;  import java.util.List; import javax.validation.Valid; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface PersonController {       /**      * No description      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.Person\u003e\u003e getPersons();      /**      * No description      *       */     public ResponseEntity\u003c?\u003e createPerson(         @Valid         com.gen.test.model.Person person);  } -----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------  package com.gen.test;  import java.util.List; import javax.validation.Valid; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/persons\", produces \u003d \"application/json\") @Validated public class PersonControllerDecorator     implements PersonController {      @Autowired     private PersonController personControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cList\u003ccom.gen.test.model.Person\u003e\u003e getPersons() {         return this.personControllerDelegate.getPersons();     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e createPerson(         @Valid         @RequestBody         com.gen.test.model.Person person) {         return this.personControllerDelegate.createPerson(person);     }  } ] \u003e but was:\u003c...--------------------[  package com.gen.test;  import java.util.List; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface PersonController {       /**      * No description      *       */     public ResponseEntity\u003cList\u003ccom.gen.test.model.Person\u003e\u003e getPersons();      /**      * No description      *       */     public ResponseEntity\u003c?\u003e createPerson(com.gen.test.model.Person person);  } -----------------------------------com.gen.test.PersonControllerDecorator.java-----------------------------------  package com.gen.test;  import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @RequestMapping(value \u003d \"/api/persons\", produces \u003d \"application/json\") @Validated public class PersonControllerDecorator     implements PersonController {      @Autowired     private PersonController personControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cList\u003ccom.gen.test.model.Person\u003e\u003e getPersons() {         return this.personControllerDelegate.getPersons();     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e createPerson(com.gen.test.model.Person person) {         return this.personControllerDelegate.createPerson(person);     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest#applySpring4ClientStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a.util.List; import [javax.validation.Valid; import com.gen.test.model.Manager; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface PersonManagerClient {       /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers();      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity\u003cManager\u003e createPersonsManager(         @Valid         Manager manager);  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import javax.validation.Valid; import com.gen.test.model.Manager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @Component public class PersonManagerClientImpl     implements PersonManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.Manager\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003cManager\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity\u003cManager\u003e createPersonsManager(         @Valid         Manager manager) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  } ] \u003e but was:\u003c...a.util.List; import [com.gen.test.model.Manager; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ public interface PersonManagerClient {       /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers();      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager);  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import com.gen.test.model.Manager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @Component public class PersonManagerClientImpl     implements PersonManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.Manager\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003cManager\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue211RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue211RulesTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-------com.gen.test.[BaseController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateBaseRequest; import com.gen.test.model.CreateBaseResponse; import com.gen.test.model.UpdateBaseByIdRequest; import com.gen.test.model.UpdateBaseByIdResponse; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @Validated @RequestMapping(\"/api/base\") public interface BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cCreateBaseResponse\u003e createBase(         @Valid         @RequestBody         CreateBaseRequest createBaseRequest);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003cUpdateBaseByIdResponse\u003e updateBaseById(         @PathVariable         String id,         @Valid         @RequestBody         UpdateBaseByIdRequest updateBaseByIdRequest);  } ] \u003e but was:\u003c...-------com.gen.test.[model.User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      final static long serialVersionUID \u003d -5412525764520775992L;     private List\u003cString\u003e nickNames \u003d new ArrayList\u003cString\u003e();     private List\u003cDouble\u003e orderNumbers \u003d new ArrayList\u003cDouble\u003e();      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(List\u003cString\u003e nickNames, List\u003cDouble\u003e orderNumbers) {         super();         this.nickNames \u003d nickNames;         this.orderNumbers \u003d orderNumbers;     }      /**      * Returns the nickNames.      *       * @return      *     nickNames      */     public List\u003cString\u003e getNickNames() {         return nickNames;     }      /**      * Set the nickNames.      *       * @param nickNames      *     the new nickNames      */     public void setNickNames(List\u003cString\u003e nickNames) {         this.nickNames \u003d nickNames;     }      /**      * Returns the orderNumbers.      *       * @return      *     orderNumbers      */     public List\u003cDouble\u003e getOrderNumbers() {         return orderNumbers;     }      /**      * Set the orderNumbers.      *       * @param orderNumbers      *     the new orderNumbers      */     public void setOrderNumbers(List\u003cDouble\u003e orderNumbers) {         this.orderNumbers \u003d orderNumbers;     }      public int hashCode() {         return new HashCodeBuilder().append(nickNames).append(orderNumbers).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().append(nickNames, otherObject.nickNames).append(orderNumbers, otherObject.orderNumbers).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"nickNames\", nickNames).append(\"orderNumbers\", orderNumbers).toString();     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.User; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(\"/api/users\") public interface UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cUser\u003e createUser(User user);      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.PUT)     public ResponseEntity\u003cUser\u003e updateUsers(User user);  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue199RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue199RulesTest#applySpring4ControllerInterfaceRule_shouldCreate_valid_class_inheritance"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...new Employee.      *[      */     public Employee() {         super();     }      /**      * Creates a new Employee.      *      */     public Employee(String name, String skill) {         super();         this.name \u003d name;         this.skill \u003d skill;     }      /**      * Returns the name.      *      * @return      *     name      */     public String getName() {         return name;     }      /**      * Set the name.      *      * @param name      *     the new name      */     public void setName(String name) {         this.name \u003d name;     }      /**      * Returns the skill.      *      * @return      *     skill      */     public String getSkill() {         return skill;     }      /**      * Set the skill.      *      * @param skill      *     the new skill      */     public void setSkill(String skill) {         this.skill \u003d skill;     }      public int hashCode() {         return new HashCodeBuilder().append(name).append(skill).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         Employee otherObject \u003d ((Employee) other);         return new EqualsBuilder().append(name, otherObject.name).append(skill, otherObject.skill).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"name\", name).append(\"skill\", skill).toString();     }  } -----------------------------------com.gen.test.model.EmployeeExtended.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeExtended     extends Employee     implements Serializable {      private String job;      /**      * Creates a new EmployeeExtended.      *      */     public EmployeeExtended() {         super();     }      /**      * Creates a new EmployeeExtended.      *      */     public EmployeeExtended(String name, String skill, String job) {         super(name, skill);         this.job \u003d job;     }      /**      * Returns the job.      *      * @return      *     job      */     public String getJob() {         return job;     }      /**      * Set the job.      *      * @param job      *     the new job      */     public void setJob(String job) {         this.job \u003d job;     }      public int hashCode() {         return new HashCodeBuilder().appendSuper(super.hashCode()).append(job).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeExtended otherObject \u003d ((EmployeeExtended) other);         return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(job, otherObject.job).isEquals();     }      public String toString() {         return new ToStringBuilder(this).appendSuper(super.toString()).append(\"job\", job).toString();     }  } -----------------------------------com.gen.test.model.EmployeeRq.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeRq implements Serializable {      private List\u003cEmployee\u003e employees \u003d new ArrayList\u003cEmployee\u003e();      /**      * Creates a new EmployeeRq.      *      */     public EmployeeRq() {         super();     }      /**      * Creates a new EmployeeRq.      *      */     public EmployeeRq(List\u003cEmployee\u003e employees) {         super();         this.employees \u003d employees;     }      /**      * Returns the employees.      *      * @return      *     employees      */     public List\u003cEmployee\u003e getEmployees() {         return employees;     }      /**      * Set the employees.      *      * @param employees      *     the new employees      */     public void setEmployees(List\u003cEmployee\u003e employees) {         this.employees \u003d employees;     }      public int hashCode() {         return new HashCodeBuilder().append(employees).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeRq otherObject \u003d ((EmployeeRq) other);         return new EqualsBuilder().append(employees, otherObject.employees).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"employees\", employees).toString();     }  } -----------------------------------com.gen.test.model.EmployeeRs.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeRs implements Serializable {      private List\u003cEmployeeExtended\u003e employees \u003d new ArrayList\u003cEmployeeExtended\u003e();      /**      * Creates a new EmployeeRs.      *      */     public EmployeeRs() {         super();     }      /**      * Creates a new EmployeeRs.      *      */     public EmployeeRs(List\u003cEmployeeExtended\u003e employees) {         super();         this.employees \u003d employees;     }      /**      * Returns the employees.      *      * @return      *     employees      */     public List\u003cEmployeeExtended\u003e getEmployees() {         return employees;     }      /**      * Set the employees.      *      * @param employees      *     the new employees      */     public void setEmployees(List\u003cEmployeeExtended\u003e employees) {         this.employees \u003d employees;     }      public int hashCode() {         return new HashCodeBuilder().append(employees).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeRs otherObject \u003d ((EmployeeRs) other);         return new EqualsBuilder().append(employees, otherObject.employees).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"employees\", employees).toString();     }  } -----------------------------------com.gen.test.EmployeeController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.EmployeeRq; import com.gen.test.model.EmployeeRs; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *  */ @RestController @Validated @RequestMapping(value \u003d \"/api/employee\", produces \u003d \"application/json\") public interface EmployeeController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cEmployeeRs\u003e createEmployee(         @Valid         @RequestBody         ]EmployeeRq employeeR...\u003e but was:\u003c...new Employee.      *[       */     public Employee() {         super();     }      /**      * Creates a new Employee.      *       */     public Employee(String name, String skill) {         super();         this.name \u003d name;         this.skill \u003d skill;     }      /**      * Returns the name.      *       * @return      *     name      */     public String getName() {         return name;     }      /**      * Set the name.      *       * @param name      *     the new name      */     public void setName(String name) {         this.name \u003d name;     }      /**      * Returns the skill.      *       * @return      *     skill      */     public String getSkill() {         return skill;     }      /**      * Set the skill.      *       * @param skill      *     the new skill      */     public void setSkill(String skill) {         this.skill \u003d skill;     }      public int hashCode() {         return new HashCodeBuilder().append(name).append(skill).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         Employee otherObject \u003d ((Employee) other);         return new EqualsBuilder().append(name, otherObject.name).append(skill, otherObject.skill).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"name\", name).append(\"skill\", skill).toString();     }  } -----------------------------------com.gen.test.model.EmployeeExtended.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeExtended     extends Employee     implements Serializable {      private String job;      /**      * Creates a new EmployeeExtended.      *       */     public EmployeeExtended() {         super();     }      /**      * Creates a new EmployeeExtended.      *       */     public EmployeeExtended(String name, String skill, String job) {         super(name, skill);         this.job \u003d job;     }      /**      * Returns the job.      *       * @return      *     job      */     public String getJob() {         return job;     }      /**      * Set the job.      *       * @param job      *     the new job      */     public void setJob(String job) {         this.job \u003d job;     }      public int hashCode() {         return new HashCodeBuilder().appendSuper(super.hashCode()).append(job).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeExtended otherObject \u003d ((EmployeeExtended) other);         return new EqualsBuilder().appendSuper(super.equals(otherObject)).append(job, otherObject.job).isEquals();     }      public String toString() {         return new ToStringBuilder(this).appendSuper(super.toString()).append(\"job\", job).toString();     }  } -----------------------------------com.gen.test.model.EmployeeRq.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeRq implements Serializable {      private List\u003cEmployee\u003e employees \u003d new ArrayList\u003cEmployee\u003e();      /**      * Creates a new EmployeeRq.      *       */     public EmployeeRq() {         super();     }      /**      * Creates a new EmployeeRq.      *       */     public EmployeeRq(List\u003cEmployee\u003e employees) {         super();         this.employees \u003d employees;     }      /**      * Returns the employees.      *       * @return      *     employees      */     public List\u003cEmployee\u003e getEmployees() {         return employees;     }      /**      * Set the employees.      *       * @param employees      *     the new employees      */     public void setEmployees(List\u003cEmployee\u003e employees) {         this.employees \u003d employees;     }      public int hashCode() {         return new HashCodeBuilder().append(employees).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeRq otherObject \u003d ((EmployeeRq) other);         return new EqualsBuilder().append(employees, otherObject.employees).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"employees\", employees).toString();     }  } -----------------------------------com.gen.test.model.EmployeeRs.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class EmployeeRs implements Serializable {      private List\u003cEmployeeExtended\u003e employees \u003d new ArrayList\u003cEmployeeExtended\u003e();      /**      * Creates a new EmployeeRs.      *       */     public EmployeeRs() {         super();     }      /**      * Creates a new EmployeeRs.      *       */     public EmployeeRs(List\u003cEmployeeExtended\u003e employees) {         super();         this.employees \u003d employees;     }      /**      * Returns the employees.      *       * @return      *     employees      */     public List\u003cEmployeeExtended\u003e getEmployees() {         return employees;     }      /**      * Set the employees.      *       * @param employees      *     the new employees      */     public void setEmployees(List\u003cEmployeeExtended\u003e employees) {         this.employees \u003d employees;     }      public int hashCode() {         return new HashCodeBuilder().append(employees).toHashCode();     }      public boolean equals(Object other) {         if (other \u003d\u003d null) {             return false;         }         if (other \u003d\u003d this) {             return true;         }         if (this.getClass()!\u003d other.getClass()) {             return false;         }         EmployeeRs otherObject \u003d ((EmployeeRs) other);         return new EqualsBuilder().append(employees, otherObject.employees).isEquals();     }      public String toString() {         return new ToStringBuilder(this).append(\"employees\", employees).toString();     }  } -----------------------------------com.gen.test.EmployeeController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.EmployeeRq; import com.gen.test.model.EmployeeRs; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.13)  *   */ @RestController @Validated @RequestMapping(value \u003d \"/api/employee\", produces \u003d \"application/json\") public interface EmployeeController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cEmployeeRs\u003e createEmployee(]EmployeeRq employeeR...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}