{"step-durations":{"CheckoutBuild":3,"":0,"ComputeClasspath":5,"CloneRepository":28,"BuildProject":357,"PushIncriminatedBuild":7,"ComputeSourceDir":0,"SquashRepository":9},"workspace":"./workspace","pr-remote-repo":"kaijianding/druid","pr-head-commit-id":"1d348a4d490afeda5144b7b5183f16ccb9f28484","pr-id":4155,"repo":"druid-io/druid","failingModule":"/root/workspace/druid-io/druid/220469371/processing","is-pr":"true","buildid":220469371,"error-types":["java.lang.AssertionError"],"failing-test-cases":[{"className":"io.druid.query.timeseries.TimeseriesQueryRunnerTest","failingMethods":["io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mMappedTestIndex:descending\u003dtrue]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupMMappedTestIndex:descending\u003dtrue]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mergedRealtimeIndex:descending\u003dfalse]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mergedRealtimeIndex:descending\u003dtrue]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupRtIndex:descending\u003dfalse]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[rtIndex:descending\u003dtrue]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupRtIndex:descending\u003dtrue]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupMMappedTestIndex:descending\u003dfalse]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mMappedTestIndex:descending\u003dfalse]","io.druid.query.timeseries.TimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[rtIndex:descending\u003dfalse]"],"erroringMethods":[],"failures":[{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false}],"nbFailures":10,"nbErrors":0},{"className":"io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest","failingMethods":["io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mergedRealtimeIndex]","io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupRtIndex]","io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[noRollupMMappedTestIndex]","io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[rtIndex]","io.druid.query.groupby.GroupByTimeseriesQueryRunnerTest#testTimeSeriesWithSelectionFilterLookupExtractionFn[mMappedTestIndex]"],"erroringMethods":[],"failures":[{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false},{"failureName":"java.lang.AssertionError","failureDetail":": map keys expected:\u003c[rows, index, addRowsIndexConstant, uniques]\u003e but was:\u003c[uniques, index, rows]\u003e","isError":false}],"nbFailures":5,"nbErrors":0}],"pr-base-commit-id":"7e0d4c955507e603cd1572d7f2b5dce5355332d7"}