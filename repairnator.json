{
  "totalNumberSkippingTests": 20,
  "step-durations": {
    "CheckoutBuild": 0,
    "": 0,
    "ComputeClasspath": 2,
    "CloneRepository": 4,
    "NopolRepair": 636,
    "ResolveDependency": 188,
    "TestProject": 654,
    "BuildProject": 76,
    "PushIncriminatedBuild": 4,
    "ComputeSourceDir": 0,
    "SquashRepository": 1
  },
  "nbLibraries": 90,
  "workspace": "./workspace",
  "totalNumberErroringTests": 484,
  "repo": "spring-projects/spring-data-redis",
  "bugCommit": "https://github.com/spring-projects/spring-data-redis/compare/aea037325442^...db4d47b82104",
  "failingModule": "/root/workspace/spring-projects/spring-data-redis/223765205",
  "buildid": 223765205,
  "totalNumberFailingTests": 1,
  "error-types": [
    "java.lang.IllegalStateException",
    "org.springframework.data.redis.connection.PoolException",
    "org.springframework.data.redis.RedisConnectionFailureException",
    "org.springframework.beans.factory.BeanCreationException",
    "java.lang.NoSuchMethodError",
    "java.lang.AssertionError",
    "java.lang.NoClassDefFoundError",
    "java.lang.ExceptionInInitializerError",
    "skipped",
    "org.jredis.ClientRuntimeException"
  ],
  "totalNumberRunningTests": 2208,
  "failing-test-cases": [
    {
      "className": "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHyperLogLogOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests#org.springframework.data.redis.core.script.srp.SrpDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldNotReactToDeleteEvents",
        "org.springframework.data.redis.listener.KeyExpirationEventMessageListenerTests#listenerShouldPublishEventCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization#shouldInitWithDefaults",
        "org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithoutCustomization#shouldRegisterDefaultBeans"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests#org.springframework.data.redis.repository.cdi.CdiExtensionIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsPageCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findUsingOrReturnsResultCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectlyOnNestedProperty",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingQueryMethod",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#findReturnsReferenceDataCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldReturnResultsCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyFirstKeywordCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldReturnEmptyListWhenPageableOutOfBoundsUsingFindAll",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyPageableCorrectlyWhenUsingFindByWithoutCriteria",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#nearQueryShouldFindNothingIfOutOfRange",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#shouldApplyTopKeywordCorrectlyWhenCriteriaPresent",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindShouldReturnEntitiesCorrectly",
        "org.springframework.data.redis.repository.RedisRepositoryIntegrationTests#simpleFindByMultipleProperties"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        },
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 15
    },
    {
      "className": "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests#org.springframework.data.redis.core.script.jedis.JedisDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerilizerThrowsExceptionWhenSettingNullObjectMapper",
        "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerilizerShouldThrowExceptionWhenDeserializingInvalidByteArray",
        "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializerShouldReturnNullWhenDerserializingEmtyByteArray",
        "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializerShouldReturnEmptyByteArrayWhenSerializingNull",
        "org.springframework.data.redis.serializer.Jackson2JsonRedisSerializerTests#testJackson2JsonSerializer"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 5
    },
    {
      "className": "org.springframework.data.redis.support.BoundKeyOperationsTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.BoundKeyOperationsTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubResubscribeTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubResubscribeTests#org.springframework.data.redis.listener.PubSubResubscribeTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests#org.springframework.data.redis.core.script.lettuce.LettuceDefaultScriptExecutorTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectWithPassword",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testLotsOfConnections"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetNewConnectionOnError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testConnectionErrorNoValidate",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionNotSharedBadHostname",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetSharedConnectionNotShared",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testSelectDb",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testCreateFactoryWithPool",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testValidateNoError",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetAndInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testResetConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#factoryWorksWithoutClientResources",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testDisableSharedConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#dbIndexShouldBePropagatedCorrectly",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testInitConnection",
        "org.springframework.data.redis.connection.lettuce.LettuceConnectionFactoryTests#testGetConnectionException"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Uncomment this test to manually check connection reuse in a pool scenario",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 14
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisSetTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.listener.PubSubTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.PubSubTests#org.springframework.data.redis.listener.PubSubTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveAndSetItToMinusOnelIfPersisted[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexType[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectType[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateShouldLeaveIndexesNotInvolvedInUpdateUntouched[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedList[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#updateShouldAlterIndexesCorrectlyWhenValuesGetRemovedFromHash[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningSingleIdCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningMultipleIdsCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLive[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateSimpleTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateObjectTypedMap[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveWhenFetchingList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#savesObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedList[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#findProcessesCallbackReturningNullCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#partialUpdateComplexTypedMap[0]",
        "org.springframework.data.redis.core.RedisKeyValueTemplateTests#shouldReadBackExplicitTimeToLiveToPrimitiveField[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 80
    },
    {
      "className": "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnectWithPassword"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.srp.SrpConnectionFactoryTests#testConnect"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisPropertiesTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisPropertiesTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.lettuce.TransactionalLettuceItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.DefaultHashOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[0]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testDelete[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testEntries[1]",
        "org.springframework.data.redis.core.DefaultHashOperationsTests#testHScanReadsValuesFully[0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class org.springframework.data.redis.test.util.MinimumRedisVersionRule",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests",
      "failingMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCompareSet[3]"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldBeAbleToUseRedisAtomicIntegerWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testShouldThrowExceptionIfRedisAtomicIntegerIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicIntegerTests#testGetAndAdd[0]"
      ],
      "failures": [
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "DATAREDIS-108 Test is intermittently failing",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 4,
      "nbErrors": 52
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperUnitTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.mapping.Jackson2HashMapperUnitTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.TransactionalJedisItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisMapTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisMapTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultValueOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultValueOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultGeoOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultGeoOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisClusterTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisClusterTemplateTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisZSetTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisZSetTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisListTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisListTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.mapping.Jackson2HashMapperTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[1]",
        "org.springframework.data.redis.mapping.Jackson2HashMapperTests#shouldWriteReadHashCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    },
    {
      "className": "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testNone",
        "org.springframework.data.redis.support.collections.RedisCollectionFactoryBeanTests#testExistingCol"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 4
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldBeAbleToUseRedisAtomicDoubleWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpireAt[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testShouldThrowExceptionIfRedisAtomicDoubleIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testExpire[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicDoubleTests#testRename[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 64
    },
    {
      "className": "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorCustomConversionOnRootType",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorCustomConversionOnNestedType",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeHandlesArraysProperly",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldWritePartialUpdatePathWithRegisteredCustomConversionCorrectly",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorIndexAnnotationsOnWhenCustomConversionOnNestedype",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#readShouldHonorCustomConversionOnNestedType",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#writeShouldHonorIndexOnCustomConversionForNestedType",
        "org.springframework.data.redis.core.convert.MappingRedisConverterUnitTests#readShouldHonorCustomConversionOnRootType"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 8
    },
    {
      "className": "org.springframework.data.redis.listener.SubscriptionConnectionTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[2]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[1]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopMessageListenerContainers[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[3]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testStopListening[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[0]",
        "org.springframework.data.redis.listener.SubscriptionConnectionTests#testRemoveLastListener[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.jredis.ClientRuntimeException",
          "failureDetail": "null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 12
    },
    {
      "className": "org.springframework.data.redis.core.MultithreadedRedisTemplateTests",
      "failingMethods": [
        "org.springframework.data.redis.core.MultithreadedRedisTemplateTests#assertResouresAreReleasedProperlyWhenSharingRedisTemplate[0]"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithCustomReferenceResolver",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.repository.configuration.RedisRepositoryConfigurationUnitTests$ContextWithCustomReferenceResolver#shouldPickUpReferenceResolver"
      ],
      "failures": [
        {
          "failureName": "java.lang.IllegalStateException",
          "failureDetail": "Failed to load ApplicationContext",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultListOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultListOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.DefaultSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultSetOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.jredis.JredisPoolTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostAndPort",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourcePoolExhausted",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testReturnBrokenResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResource",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testCreateWithHostPortAndDbIndex",
        "org.springframework.data.redis.connection.jredis.JredisPoolTests#testGetResourceValidate"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 7
    },
    {
      "className": "org.springframework.data.redis.support.atomic.RedisAtomicLongTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getThrowsExceptionWhenKeyHasBeenRemoved[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndDecrement[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testCheckAndSet[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#getAndSetReturnsZeroWhenKeyHasBeenRemoved[0]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testAddAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndSet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndIncrement[2]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldBeAbleToUseRedisAtomicLongWithProperlyConfiguredRedisTemplate[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testDecrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testIncrementAndGet[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetExistingValue[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoValueSerializer[3]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testShouldThrowExceptionIfAtomicLongIsUsedWithRedisTemplateAndNoKeySerializer[1]",
        "org.springframework.data.redis.support.atomic.RedisAtomicLongTests#testGetAndAdd[1]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is org.jredis.ClientRuntimeException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero] cause: \u003d\u003e [IllegalArgumentException: null reference:{connection on setConnection()} in method JRedisClient.setConnection() [file: JRedisClient.java line:158 - package: org.jredis.ri.alphazero]]",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 56
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsGreaterThanNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsIsOne",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#testNumberOfOperationsEqualToNumberOfConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#readonlyTransactionSyncShouldNotExcceedMaxConnections",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationShouldWorkWithReadOnlyTransactions",
        "org.springframework.data.redis.connection.jedis.JedisTransactionalConnectionStarvationTest#valueOperationSetShouldBeRolledBackCorrectly"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 18
    },
    {
      "className": "org.springframework.data.redis.core.DefaultZSetOperationsTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.DefaultZSetOperationsTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.core.RedisKeyValueAdapterTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteRemovesEntriesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putShouldCreateGeoIndexCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadSimpleObjectCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#getShouldReadNestedObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexListValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnDelete[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesNestedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectPathCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventWithoutKeyspaceShouldBeIgnored[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#couldReadsKeyspaceSizeCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterGeoIndexCorrectlyOnUpdate[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#keyExpiredEventShouldRemoveHelperStructures[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexObjectCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#putWritesSimpleNestedIndexValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteCleansIndexedDataCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleListValuesCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#deleteShouldRemoveGeoIndexCorrectly[1]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveSimpleMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldRemoveComplexMapValuesCorrectly[0]",
        "org.springframework.data.redis.core.RedisKeyValueAdapterTests#updateShouldAlterIndexDataOnNestedObjectCorrectly[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on localhost:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to localhost/127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 48
    },
    {
      "className": "org.springframework.data.redis.support.collections.SupportXmlTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.support.collections.SupportXmlTests#testContainerSetup"
      ],
      "failures": [
        {
          "failureName": "org.springframework.beans.factory.BeanCreationException",
          "failureDetail": "Error creating bean with name \u0027non-existing\u0027: Invocation of init method failed; nested exception is org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationSetShouldBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShouldBeCommittedCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#listOperationLPushShoudBeRolledBackCorrectly",
        "org.springframework.data.redis.connection.srp.TransactionalSrpItegrationTests#valueOperationShouldWorkWithReadOnlyTransactions"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Could not connect; nested exception is redis.client.RedisException: Could not connect",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldReturnNullWhenSouceIsEmptyArray",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#serializeShouldReturnEmptyByteArrayWhenSouceIsNull",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldBeAbleToRestoreComplexObjectAfterSerialization",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsEmpty",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldReturnNullWhenSouceIsNull",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#deserializeShouldBeAbleToRestoreSimpleObjectAfterSerialization",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldSerializeNullValueSoThatItCanBeDeserializedWithDefaultTypingEnabled",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsProvided",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTypingWhenClassPropertyNameIsNull",
        "org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializerUnitTests#shouldUseDefaultTyping"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        },
        {
          "failureName": "java.lang.NoClassDefFoundError",
          "failureDetail": "Could not initialize class com.fasterxml.jackson.databind.SerializationConfig",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 10
    },
    {
      "className": "org.springframework.data.redis.core.RedisTemplateTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.core.RedisTemplateTests#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests",
      "failingMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreatePassword",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateInvalidPassword"
      ],
      "erroringMethods": [
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testCreateWithDbIndex",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourceValidate",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResourcePoolExhausted",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testGetResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnBrokenResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#testReturnResource",
        "org.springframework.data.redis.connection.lettuce.DefaultLettucePoolTests#poolWorksWithoutClientResources"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "skipped",
          "failureDetail": "Redis must have requirepass set to run this test",
          "isError": false
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.connection.PoolException",
          "failureDetail": "Could not get a resource from the pool; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 2,
      "nbErrors": 7
    },
    {
      "className": "org.apache.maven.surefire.junit4.JUnit4Provider",
      "failingMethods": [],
      "erroringMethods": [
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineTxIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jedis.JedisConnectionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.lettuce.LettuceConnectionTransactionIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.srp.SrpConnectionPipelineIntegrationTests",
        "org.apache.maven.surefire.junit4.JUnit4Provider#org.springframework.data.redis.connection.jredis.JRedisConnectionIntegrationTests"
      ],
      "failures": [
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        },
        {
          "failureName": "java.lang.ExceptionInInitializerError",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 13
    },
    {
      "className": "org.springframework.data.redis.cache.RedisCacheTest",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.cache.RedisCacheTest#initializationError"
      ],
      "failures": [
        {
          "failureName": "java.lang.NoSuchMethodError",
          "failureDetail": "com.fasterxml.jackson.annotation.JsonFormat$Value.empty()Lcom/fasterxml/jackson/annotation/JsonFormat$Value;",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "org.springframework.data.redis.connection.jedis.ScanTests",
      "failingMethods": [],
      "erroringMethods": [
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[1]",
        "org.springframework.data.redis.connection.jedis.ScanTests#contextLoads[0]"
      ],
      "failures": [
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool",
          "isError": true
        },
        {
          "failureName": "org.springframework.data.redis.RedisConnectionFailureException",
          "failureDetail": "Unable to connect to Redis on 127.0.0.1:6379; nested exception is com.lambdaworks.redis.RedisConnectionException: Unable to connect to /127.0.0.1:6379",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 2
    }
  ],
  "bugRepo": "spring-projects/spring-data-redis"
}