{
  "totalNumberSkippingTests": 0,
  "bugType": "only_fail",
  "totalNumberErroringTests": 12,
  "repo": "phoenixnap/springmvc-raml-plugin",
  "bugCommit": "https://github.com/phoenixnap/springmvc-raml-plugin/compare/30887f78d3f0^...610fc79cf1ca",
  "failingModule": "/root/workspace/phoenixnap/springmvc-raml-plugin/285541374/springmvc-raml-parser",
  "hostname": "spirals-librepair",
  "totalNumberFailingTests": 40,
  "error-types": [
    "java.lang.AssertionError",
    "java.lang.NullPointerException",
    "org.junit.ComparisonFailure"
  ],
  "totalNumberRunningTests": 208,
  "failing-test-cases": [
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesTest#applySpring4SpringTemplateClient_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...eEntity\u003c?\u003e getBase()[;      /**      * Get base entity by ID      *       * @param id       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id);      /**      * No description      *       * @param optionalQueryParam      * @param xAnotherHeader      * @param id       * @param requiredQueryParam       * @param optionalQueryParam2      * @param xMyHeader      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader);  } -----------------------------------com.gen.test.BaseClientImpl.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class BaseClientImpl     implements BaseClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base/{id}\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, NamedResponseType.class);     }      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         if (xMyHeader!\u003d null) {             httpHeaders.add(\"X-My-Header\", xMyHeader.toString());         }         if (xAnotherHeader!\u003d null) {             httpHeaders.add(\"X-Another-Header\", xAnotherHeader.toString());         }         String url \u003d baseUrl.concat(\"/base/{id}/elements\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url).queryParam(\"requiredQueryParam\", requiredQueryParam).queryParam(\"optionalQueryParam\", optionalQueryParam).queryParam(\"optionalQueryParam2\", optionalQueryParam2);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }  }]\u003e but was:\u003c...eEntity\u003c?\u003e getBase()[         throws Exception     ;      /**      * Get base entity by ID      *       * @param id       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id)         throws Exception     ;      /**      * No description      *       * @param optionalQueryParam       * @param xAnotherHeader       * @param id       * @param requiredQueryParam       * @param optionalQueryParam2       * @param xMyHeader       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader)         throws Exception     ;  } -----------------------------------com.gen.test.BaseClientImpl.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class BaseClientImpl     implements BaseClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase()         throws Exception     {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id)         throws Exception     {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base/{id}\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, NamedResponseType.class);     }      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader)         throws Exception     {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         if (xMyHeader!\u003d null) {             httpHeaders.add(\"X-My-Header\", xMyHeader.toString());         }         if (xAnotherHeader!\u003d null) {             httpHeaders.add(\"X-Another-Header\", xAnotherHeader.toString());         }         String url \u003d baseUrl.concat(\"/base/{id}/elements\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url).queryParam(\"requiredQueryParam\", requiredQueryParam).queryParam(\"optionalQueryParam\", optionalQueryParam).queryParam(\"optionalQueryParam2\", optionalQueryParam2);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.RequestBodyWithValidationTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 3
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue169RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue169RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ate datetimeRFC2616)[ {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...ate datetimeRFC2616)[         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applyAsyncSpring4ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applyAsyncSpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applyAsyncSpring4ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ public interface BaseController {       /**      * No description      *      */     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase();      /**      * Get base entity by ID      *      */     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(String id);      /**      * No description      *      */     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.concurrent.Callable; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase() {         return this.baseControllerDelegate.getBase();     }      /**      * Get base entity by ID      *      */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(         @PathVariable         String id) {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)] {         return th...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ public interface BaseController {       /**      * No description      *       */     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(String id)         throws Exception     ;      /**      * No description      *       */     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader)         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.concurrent.Callable; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase()         throws Exception     {         return this.baseControllerDelegate.getBase();     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(         @PathVariable         String id)         throws Exception     {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception    ] {         return th...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase();      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader);  } ] \u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception     ;  }] \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase();      /**      * Get base entity by ID      *      */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(         @PathVariable         String id);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)];  } \u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003cNamedResponseType\u003e\u003e getBaseById(         @PathVariable         String id)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception     ];  } \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase() {         return null; //TODO Autogenerated Method Stub. Implement me please.  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public NamedResponseType getBaseById(         @PathVariable         String id) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader) {     ]        return null;...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public NamedResponseType getBaseById(         @PathVariable         String id)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception     { ]        return null;...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *      */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)] {         return nu...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getBase()         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public Callable\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public Callable\u003cResponseEntity\u003c?\u003e\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception    ] {         return nu...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ public interface BaseController {    /**   * No description   *   */  public ResponseEntity\u003c?\u003e getBase();      /**      * Get base entity by ID      *      */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id);      /**      * No description      *      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;   /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase() {         return this.baseControllerDelegate.getBase();  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id) {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)] {         return th...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ public interface BaseController {       /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id)         throws Exception     ;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader)         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     {         return this.baseControllerDelegate.getBase();     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id)         throws Exception     {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception    ] {         return th...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue172RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue172RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tCreate eventCreate)[ {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...tCreate eventCreate)[         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.PatternConstraintTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.PatternConstraintTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...1, String xMyHeader)[;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import javax.validation.constraints.Pattern; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(\"/api/base\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"/endpoint/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getEndpointById(         @PathVariable         @Pattern(regexp \u003d \"^.{1,255}$\")         String id,         @RequestParam         @Pattern(regexp \u003d \"^.{1,255}$\")         String param1,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false)         @Pattern(regexp \u003d \"^.{1,255}$\")         String xMyHeader)] {         return th...\u003e but was:\u003c...1, String xMyHeader)[         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import javax.validation.constraints.Pattern; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(\"/api/base\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"/endpoint/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getEndpointById(         @PathVariable         @Pattern(regexp \u003d \"^.{1,255}$\")         String id,         @RequestParam         @Pattern(regexp \u003d \"^.{1,255}$\")         String param1,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false)         @Pattern(regexp \u003d \"^.{1,255}$\")         String xMyHeader)         throws Exception    ] {         return th...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesHtppHeadersTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4RestTemplateClientRulesHtppHeadersTest#applySpring4SpringTemplateClient_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...o description      *[      * @param httpHeaders The HTTP headers for the request      */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders);      /**      * Get base entity by ID      *      * @param httpHeaders The HTTP headers for the request      * @param id       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders);      /**      * No description      *       * @param optionalQueryParam      * @param xAnotherHeader      * @param httpHeaders The HTTP headers for the request      * @param id       * @param requiredQueryParam       * @param optionalQueryParam2      * @param xMyHeader      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders);  } -----------------------------------com.gen.test.BaseClientImpl.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class BaseClientImpl     implements BaseClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders) {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders) {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base/{id}\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, NamedResponseType.class);     }      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders) {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         if (xMyHeader!\u003d null) {             httpHeaders.add(\"X-My-Header\", xMyHeader.toString());         }         if (xAnotherHeader!\u003d null) {             httpHeaders.add(\"X-Another-Header\", xAnotherHeader.toString());         }         String url \u003d baseUrl.concat(\"/base/{id}/elements\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url).queryParam(\"requiredQueryParam\", requiredQueryParam).queryParam(\"optionalQueryParam\", optionalQueryParam).queryParam(\"optionalQueryParam2\", optionalQueryParam2);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }  }]\u003e but was:\u003c...o description      *[       * @param httpHeaders The HTTP headers for the request      */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders)         throws Exception     ;      /**      * Get base entity by ID      *       * @param httpHeaders The HTTP headers for the request      * @param id       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders)         throws Exception     ;      /**      * No description      *       * @param optionalQueryParam       * @param xAnotherHeader       * @param httpHeaders The HTTP headers for the request      * @param id       * @param requiredQueryParam       * @param optionalQueryParam2       * @param xMyHeader       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders)         throws Exception     ;  } -----------------------------------com.gen.test.BaseClientImpl.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import java.util.ArrayList; import java.util.HashMap; import java.util.Map; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class BaseClientImpl     implements BaseClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders)         throws Exception     {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders)         throws Exception     {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/base/{id}\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, NamedResponseType.class);     }      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders)         throws Exception     {         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         if (xMyHeader!\u003d null) {             httpHeaders.add(\"X-My-Header\", xMyHeader.toString());         }         if (xAnotherHeader!\u003d null) {             httpHeaders.add(\"X-Another-Header\", xAnotherHeader.toString());         }         String url \u003d baseUrl.concat(\"/base/{id}/elements\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url).queryParam(\"requiredQueryParam\", requiredQueryParam).queryParam(\"optionalQueryParam\", optionalQueryParam).queryParam(\"optionalQueryParam2\", optionalQueryParam2);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         Map\u003cString, Object\u003e uriParamMap \u003d new HashMap();         uriParamMap.put(\"id\", id);         uriComponents \u003d uriComponents.expand(uriParamMap);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, Object.class);     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.ControllerBodyParamsShouldNotBeGroupedUnderDummyObjectNamedObjectTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.ControllerBodyParamsShouldNotBeGroupedUnderDummyObjectNamedObjectTest#applySpring4RestTemplateClientRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-com.gen.test.model.[CreateSampleUnitRequest.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class CreateSampleUnitRequest implements Serializable {      private String a;     private Long b;      /**      * Creates a new CreateSampleUnitRequest.      *      */     public CreateSampleUnitRequest() {         super();     }      /**      * Creates a new CreateSampleUnitRequest.      *      */     public CreateSampleUnitRequest(String a, Long b) {         super();         this.a \u003d a;         this.b \u003d b;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof CreateSampleUnitRequest) \u003d\u003d false) {             return false;         }         CreateSampleUnitRequest otherObject \u003d ((CreateSampleUnitRequest) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the a.      *      * @return      *     a      */     public String getA() {         return a;     }      /**      * Set the a.      *      * @param a      *     the new a      */     public void setA(String a) {         this.a \u003d a;     }      /**      * Returns the b.      *      * @return      *     b      */     public Long getB() {         return b;     }      /**      * Set the b.      *      * @param b      *     the new b      */     public void setB(Long b) {         this.b \u003d b;     }  } -----------------------------------com.gen.test.model.ResponseType.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class ResponseType implements Serializable {      /**      * facebook token for the user. This token will be validated with facebook      *      */     private String token;     private String facebookId;      /**      * Creates a new ResponseType.      *      */     public ResponseType() {         super();     }      /**      * Creates a new ResponseType.      *      */     public ResponseType(String token, String facebookId) {         super();         this.token \u003d token;         this.facebookId \u003d facebookId;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof ResponseType) \u003d\u003d false) {             return false;         }         ResponseType otherObject \u003d ((ResponseType) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the token.      *      * @return      *     token      */     public String getToken() {         return token;     }      /**      * Set the token.      *      * @param token      *     the new token      */     public void setToken(String token) {         this.token \u003d token;     }      /**      * Returns the facebookId.      *      * @return      *     facebookId      */     public String getFacebookId() {         return facebookId;     }      /**      * Set the facebookId.      *      * @param facebookId      *     the new facebookId      */     public void setFacebookId(String facebookId) {         this.facebookId \u003d facebookId;     }  } -----------------------------------com.gen.test.SampleUnitController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.CreateSampleUnitRequest; import com.gen.test.model.ResponseType; import org.springframework.http.ResponseEntity;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.8.2-SNAPSHOT)  *  */ public interface SampleUnitController {       /**      * Creates a sample unit      *      */     public ResponseEntity\u003cResponseType\u003e createSampleUnit(CreateSampleUnitRequest createSampleUnitRequest)         throws Exception     ;  } -----------------------------------com.gen.test.SampleUnitControllerDecorator.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.CreateSampleUnitRequest; import com.gen.test.model.ResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.8.2-SNAPSHOT)  *  */ @RestController @RequestMapping(value \u003d \"/api/sample_units\", produces \u003d \"application/json\") @Validated public class SampleUnitControllerDecorator {      @Autowired     private SampleUnitController sampleUnitControllerDelegate;      /**      * Creates a sample unit      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cResponseType\u003e createSampleUnit(         @Valid         @RequestBody         CreateSampleUnitRequest createSampleUnitRequest)         throws Exception     {         return this.sampleUnitControllerDelegate.createSampleUnit(createSampleUnitRequest);     }  } ] \u003e but was:\u003c...-com.gen.test.model.[AdsPrivileges.java-----------------------------------  package com.gen.test.model;  import java.util.HashMap; import java.util.Map;  public enum AdsPrivileges {      NO_ADS(\"NO_ADS\"),     SHOW_ADS(\"SHOW_ADS\");     private final String value;     private final static Map\u003cString, AdsPrivileges\u003e VALUE_CACHE \u003d new HashMap\u003cString, AdsPrivileges\u003e();      static {         for (AdsPrivileges c: values()) {             VALUE_CACHE.put(c.value, c);         }     }      private AdsPrivileges(String value) {         this.value \u003d value;     }      public String value() {         return this.value;     }      public static AdsPrivileges fromValue(String value) {         return VALUE_CACHE.get(value);     }      @Override     public String toString() {         return this.value;     }  } -----------------------------------com.gen.test.model.ContentPrivileges.java-----------------------------------  package com.gen.test.model;  import java.util.HashMap; import java.util.Map;  public enum ContentPrivileges {      PREMIUM_BLOCKED(\"PREMIUM_BLOCKED\"),     PREMIUM_GRANTED(\"PREMIUM_GRANTED\");     private final String value;     private final static Map\u003cString, ContentPrivileges\u003e VALUE_CACHE \u003d new HashMap\u003cString, ContentPrivileges\u003e();      static {         for (ContentPrivileges c: values()) {             VALUE_CACHE.put(c.value, c);         }     }      private ContentPrivileges(String value) {         this.value \u003d value;     }      public String value() {         return this.value;     }      public static ContentPrivileges fromValue(String value) {         return VALUE_CACHE.get(value);     }      @Override     public String toString() {         return this.value;     }  } -----------------------------------com.gen.test.model.Privileges.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Privileges implements Serializable {      private ContentPrivileges contentPrivileges;     private AdsPrivileges adsPrivileges;      /**      * Creates a new Privileges.      *       */     public Privileges() {         super();     }      /**      * Creates a new Privileges.      *       */     public Privileges(ContentPrivileges contentPrivileges, AdsPrivileges adsPrivileges) {         super();         this.contentPrivileges \u003d contentPrivileges;         this.adsPrivileges \u003d adsPrivileges;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Privileges) \u003d\u003d false) {             return false;         }         Privileges otherObject \u003d ((Privileges) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the contentPrivileges.      *       * @return      *     contentPrivileges      */     public ContentPrivileges getContentPrivileges() {         return contentPrivileges;     }      /**      * Set the contentPrivileges.      *       * @param contentPrivileges      *     the new contentPrivileges      */     public void setContentPrivileges(ContentPrivileges contentPrivileges) {         this.contentPrivileges \u003d contentPrivileges;     }      /**      * Returns the adsPrivileges.      *       * @return      *     adsPrivileges      */     public AdsPrivileges getAdsPrivileges() {         return adsPrivileges;     }      /**      * Set the adsPrivileges.      *       * @param adsPrivileges      *     the new adsPrivileges      */     public void setAdsPrivileges(AdsPrivileges adsPrivileges) {         this.adsPrivileges \u003d adsPrivileges;     }  } -----------------------------------com.gen.test.model.ResponseType.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class ResponseType implements Serializable {      /**      * privileges for the user      *       */     private Privileges privileges;      /**      * Creates a new ResponseType.      *       */     public ResponseType() {         super();     }      /**      * Creates a new ResponseType.      *       */     public ResponseType(Privileges privileges) {         super();         this.privileges \u003d privileges;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof ResponseType) \u003d\u003d false) {             return false;         }         ResponseType otherObject \u003d ((ResponseType) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the privileges.      *       * @return      *     privileges      */     public Privileges getPrivileges() {         return privileges;     }      /**      * Set the privileges.      *       * @param privileges      *     the new privileges      */     public void setPrivileges(Privileges privileges) {         this.privileges \u003d privileges;     }  } -----------------------------------com.gen.test.SampleUnitController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.ResponseType; import org.springframework.http.ResponseEntity;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ public interface SampleUnitController {       /**      * Creates a sample unit      *       */     public ResponseEntity\u003cResponseType\u003e createSampleUnit()         throws Exception     ;  } -----------------------------------com.gen.test.SampleUnitControllerDecorator.java-----------------------------------  package com.gen.test;  import com.gen.test.model.ResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * A collection of samples  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/sample_units\", produces \u003d \"application/json\") @Validated public class SampleUnitControllerDecorator {      @Autowired     private SampleUnitController sampleUnitControllerDelegate;      /**      * Creates a sample unit      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cResponseType\u003e createSampleUnit()         throws Exception     {         return this.sampleUnitControllerDelegate.createSampleUnit();     }  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest#applySpringFeignClient_shouldCreate_defaultVaules"
      ],
      "erroringMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.SpringFeignClientRulesTest#applySpringFeignClient_shouldCreate_validCode"
      ],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ing xRequiredHeader)[];  } \u003e but was:\u003c...ing xRequiredHeader)[         throws Exception     ];  } \u003e",
          "isError": false
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 1,
      "nbErrors": 1
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue158RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue158RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-com.gen.test.model.[User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      private String firstName;     private String lastName;      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(String firstName, String lastName) {         super();         this.firstName \u003d firstName;         this.lastName \u003d lastName;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof User) \u003d\u003d false) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import java.util.List; import javax.validation.Valid; import com.gen.test.model.User; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cUser\u003e getUsers() {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public User createUser(         @Valid         @RequestBody         User user) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...-com.gen.test.model.[Object.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Object implements Serializable {      private String firstName;     private String lastName;      /**      * Creates a new Object.      *       */     public Object() {         super();     }      /**      * Creates a new Object.      *       */     public Object(String firstName, String lastName) {         super();         this.firstName \u003d firstName;         this.lastName \u003d lastName;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(java.lang.Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Object) \u003d\u003d false) {             return false;         }         Object otherObject \u003d ((Object) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }  } -----------------------------------com.gen.test.model.User.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class User implements Serializable {      private String firstName;     private String lastName;      /**      * Creates a new User.      *       */     public User() {         super();     }      /**      * Creates a new User.      *       */     public User(String firstName, String lastName) {         super();         this.firstName \u003d firstName;         this.lastName \u003d lastName;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(java.lang.Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof User) \u003d\u003d false) {             return false;         }         User otherObject \u003d ((User) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }  } -----------------------------------com.gen.test.UserController.java-----------------------------------  package com.gen.test;  import java.util.List; import javax.validation.Valid; import com.gen.test.model.Object; import com.gen.test.model.User; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/users\", produces \u003d \"application/json\") @Validated public class UserController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public List\u003cObject\u003e getUsers()         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public User createUser(         @Valid         @RequestBody         User user)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue61RulesTest#applySpring4RestTemplateClientRule_shouldCreate_validCode"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest#applySpring4ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring4ControllerRulesHttpHeadersTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(      @RequestHeader      HttpHeaders httpHeaders);      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders);  } ] \u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;  }] \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(      @RequestHeader      HttpHeaders httpHeaders) {         return null; //TODO Autogenerated Method Stub. Implement me please.  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public NamedResponseType getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders) {     ]        return null;...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public NamedResponseType getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     { ]        return null;...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ public interface BaseController {    /**   * No description   *   */  public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders);      /**      * Get base entity by ID      *      */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders);      /**      * No description      *      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpHeaders; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;   /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(       @RequestHeader       HttpHeaders httpHeaders) {         return this.baseControllerDelegate.getBase(httpHeaders);  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders) {         return this.baseControllerDelegate.getBaseById(id, httpHeaders);     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)] {         return th...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ public interface BaseController {       /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders)         throws Exception     ;      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders)         throws Exception     ;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders)         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpHeaders; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return this.baseControllerDelegate.getBase(httpHeaders);     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return this.baseControllerDelegate.getBaseById(id, httpHeaders);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception    ] {         return th...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#checkJSR303",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#interpretPostRequestBody",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#interpretNestedArrays",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#checkJSR303_RequiredDefaultsToTrue",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#interpret2ndLevelNestedArrays",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#interpretGetResponseBody",
        "com.phoenixnap.oss.ramlapisync.raml.interpreters.RamlInterpreterTest#interpretGetResponseBodyAsArray"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: is \"NestedNestedArrayPerson\"      but: was \"NestedArrayPerson\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: is \"com.gen.foo.EnumChecks\"      but: was \"com.gen.foo.AnotherEnum\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: is \"Person\"      but: was \"Object\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: an instance of com.sun.codemodel.JDefinedClass      but: \u003ccom.sun.codemodel.JDirectClass(Person)\u003e is a com.sun.codemodel.JDirectClass",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: an instance of com.sun.codemodel.JDefinedClass      but: \u003ccom.sun.codemodel.JDirectClass(Person)\u003e is a com.sun.codemodel.JDirectClass",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: is \"Manager\"      but: was \"Person\"",
          "isError": false
        },
        {
          "failureName": "java.lang.AssertionError",
          "failureDetail": " Expected: is \"NestedArrayPerson\"      but: was \"Person\"",
          "isError": false
        }
      ],
      "nbFailures": 7,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring3ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring3ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue32RulesTest#applySpring3ControllerStubRule_shouldCreate_validCode"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        },
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 6
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest#applySpring3ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest#applySpring3ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesHttpHeadersTest#applySpring3ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ion.ResponseBody;   [ /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(       @RequestHeader       HttpHeaders httpHeaders) {         return null; //TODO Autogenerated Method Stub. Implement me please.  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public NamedResponseType getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders) {     ]        return null;...\u003e but was:\u003c...ion.ResponseBody;   [/**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public NamedResponseType getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     { ]        return null;...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... BaseController {   [ /**   * No description   *   */  public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders);      /**      * Get base entity by ID      *      */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders);      /**      * No description      *      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpHeaders; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;   /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(       @RequestHeader       HttpHeaders httpHeaders) {         return this.baseControllerDelegate.getBase(httpHeaders);  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders) {         return this.baseControllerDelegate.getBaseById(id, httpHeaders);     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)] {         return th...\u003e but was:\u003c... BaseController {   [    /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase(HttpHeaders httpHeaders)         throws Exception     ;      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id, HttpHeaders httpHeaders)         throws Exception     ;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader, HttpHeaders httpHeaders)         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.HttpHeaders; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return this.baseControllerDelegate.getBase(httpHeaders);     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     {         return this.baseControllerDelegate.getBaseById(id, httpHeaders);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception    ] {         return th...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase(      @RequestHeader      HttpHeaders httpHeaders);      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders);  } ] \u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase(         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader,         @RequestHeader         HttpHeaders httpHeaders)         throws Exception     ;  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue161RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue161RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...-com.gen.test.model.[TestT.java-----------------------------------  package com.gen.test.model;  import java.util.HashMap; import java.util.Map;  public enum TestT {      A(\"A\"),     B(\"B\");     private final String value;     private final static Map\u003cString, TestT\u003e VALUE_CACHE \u003d new HashMap\u003cString, TestT\u003e();      static {         for (TestT c: values()) {             VALUE_CACHE.put(c.value, c);         }     }      private TestT(String value) {         this.value \u003d value;     }      public String value() {         return this.value;     }      public static TestT fromValue(String value) {         return VALUE_CACHE.get(value);     }      @Override     public String toString() {         return this.value;     }  } -----------------------------------com.gen.test.EnumController.java-----------------------------------  package com.gen.test;  import com.gen.test.model.TestT; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/enums\", produces \u003d \"application/json\") @Validated public class EnumController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getEnums(         @RequestParam         TestT commonType) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...-com.gen.test.model.[CommonType.java-----------------------------------  package com.gen.test.model;  import java.util.HashMap; import java.util.Map;  public enum CommonType {      A(\"A\"),     B(\"B\");     private final String value;     private final static Map\u003cString, CommonType\u003e VALUE_CACHE \u003d new HashMap\u003cString, CommonType\u003e();      static {         for (CommonType c: values()) {             VALUE_CACHE.put(c.value, c);         }     }      private CommonType(String value) {         this.value \u003d value;     }      public String value() {         return this.value;     }      public static CommonType fromValue(String value) {         return VALUE_CACHE.get(value);     }      @Override     public String toString() {         return this.value;     }  } -----------------------------------com.gen.test.EnumController.java-----------------------------------  package com.gen.test;  import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/enums\", produces \u003d \"application/json\") @Validated public class EnumController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getEnums(         @RequestParam         TestT commonType)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest#applySpring3ControllerDecoratorRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest#applySpring3ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Spring3ControllerRulesTest#applySpring3ControllerInterfaceRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...ion.ResponseBody;   [ /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase() {         return null; //TODO Autogenerated Method Stub. Implement me please.  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public NamedResponseType getBaseById(         @PathVariable         String id) {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader) {     ]        return null;...\u003e but was:\u003c...ion.ResponseBody;   [/**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public NamedResponseType getBaseById(         @PathVariable         String id)         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception     { ]        return null;...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... BaseController {   [ /**   * No description   *   */  public ResponseEntity\u003c?\u003e getBase();      /**      * Get base entity by ID      *      */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id);      /**      * No description      *      */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader);  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator     implements BaseController {      @Autowired     private BaseController baseControllerDelegate;   /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase() {         return this.baseControllerDelegate.getBase();  }      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id) {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)] {         return th...\u003e but was:\u003c... BaseController {   [    /**      * No description      *       */     public ResponseEntity\u003c?\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(String id)         throws Exception     ;      /**      * No description      *       */     public ResponseEntity\u003c?\u003e getElements(String id, Long requiredQueryParam, String optionalQueryParam, BigDecimal optionalQueryParam2, Long xMyHeader, String xAnotherHeader)         throws Exception     ;  } -----------------------------------com.gen.test.BaseControllerDecorator.java-----------------------------------  package com.gen.test;  import java.math.BigDecimal; import com.gen.test.model.NamedResponseType; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Controller; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestHeader; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.ResponseBody;   /**  * The BaseController class  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseControllerDecorator {      @Autowired     private BaseController baseControllerDelegate;      /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     {         return this.baseControllerDelegate.getBase();     }      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id)         throws Exception     {         return this.baseControllerDelegate.getBaseById(id);     }      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception    ] {         return th...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {    /**   * No description   *   */  @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)  public ResponseEntity\u003c?\u003e getBase();      /**      * Get base entity by ID      *      */  @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)  @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id);      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader);  } ] \u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") public interface BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getBase()         throws Exception     ;      /**      * Get base entity by ID      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     @ResponseBody     public ResponseEntity\u003cNamedResponseType\u003e getBaseById(         @PathVariable         String id)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}/elements\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getElements(         @PathVariable         String id,         @RequestParam         Long requiredQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"dummyDefault\")         String optionalQueryParam,         @RequestParam(required \u003d false, defaultValue \u003d \"2\")         BigDecimal optionalQueryParam2,         @RequestHeader(name \u003d \"X-My-Header\", required \u003d false, defaultValue \u003d \"3\")         Long xMyHeader,         @RequestHeader(name \u003d \"X-Another-Header\")         String xAnotherHeader)         throws Exception     ;  }] \u003e",
          "isError": false
        }
      ],
      "nbFailures": 3,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest",
      "failingMethods": [],
      "erroringMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.RamlEquivalenceRulesTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "failures": [
        {
          "failureName": "java.lang.NullPointerException",
          "isError": true
        }
      ],
      "nbFailures": 0,
      "nbErrors": 1
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring4ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring4ControllerDecoratorRule_configuration_disableArray",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring4ControllerInterfaceRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring4SpringTemplateClient_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring3ControllerStubRule_shouldCreate_validCode",
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue117RulesTest#applySpring4ControllerDecoratorRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tring[] stringArray)[];  } \u003e but was:\u003c...tring[] stringArray)[         throws Exception     ];  } \u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tring[] stringArray)[ {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...tring[] stringArray)[         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tring[] stringArray)[ {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  }]\u003e but was:\u003c...tring[] stringArray)[         throws Exception     {         return null; //TODO Autogenerated Method Stub. Implement me please.     }  } ]\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tring[] stringArray)[;  } -----------------------------------com.gen.test.FileClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class FileClientImpl     implements FileClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * Create file.      *       */     public ResponseEntity\u003c?\u003e getFiles(String notArray, String[] stringArray)] {         HttpHeade...\u003e but was:\u003c...tring[] stringArray)[         throws Exception     ;  } -----------------------------------com.gen.test.FileClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class FileClientImpl     implements FileClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * Create file.      *       */     public ResponseEntity\u003c?\u003e getFiles(String notArray, String[] stringArray)         throws Exception    ] {         HttpHeade...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c... String stringArray)[;  } -----------------------------------com.gen.test.FileControllerDecorator.java-----------------------------------  package com.gen.test;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/files\", produces \u003d \"application/json\") @Validated public class FileControllerDecorator     implements FileController {      @Autowired     private FileController fileControllerDelegate;      /**      * Create file.      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getFiles(         @RequestParam         String notArray,         @RequestParam         String stringArray)] {         return th...\u003e but was:\u003c... String stringArray)[         throws Exception     ;  } -----------------------------------com.gen.test.FileControllerDecorator.java-----------------------------------  package com.gen.test;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/files\", produces \u003d \"application/json\") @Validated public class FileControllerDecorator {      @Autowired     private FileController fileControllerDelegate;      /**      * Create file.      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getFiles(         @RequestParam         String notArray,         @RequestParam         String stringArray)         throws Exception    ] {         return th...\u003e",
          "isError": false
        },
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...tring[] stringArray)[;  } -----------------------------------com.gen.test.FileControllerDecorator.java-----------------------------------  package com.gen.test;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/files\", produces \u003d \"application/json\") @Validated public class FileControllerDecorator     implements FileController {      @Autowired     private FileController fileControllerDelegate;      /**      * Create file.      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getFiles(         @RequestParam         String notArray,         @RequestParam         String[] stringArray)] {         return th...\u003e but was:\u003c...tring[] stringArray)[         throws Exception     ;  } -----------------------------------com.gen.test.FileControllerDecorator.java-----------------------------------  package com.gen.test;  import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.validation.annotation.Validated; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.bind.annotation.RestController;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/files\", produces \u003d \"application/json\") @Validated public class FileControllerDecorator {      @Autowired     private FileController fileControllerDelegate;      /**      * Create file.      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.GET)     public ResponseEntity\u003c?\u003e getFiles(         @RequestParam         String notArray,         @RequestParam         String[] stringArray)         throws Exception    ] {         return th...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 6,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.Issue159RulesTest#applySpring4ClientStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...blic boolean equals([Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Manager) \u003d\u003d false) {             return false;         }         Manager otherObject \u003d ((Manager) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }      /**      * Returns the departman.      *       * @return      *     departman      */     public String getDepartman() {         return departman;     }      /**      * Set the departman.      *       * @param departman      *     the new departman      */     public void setDepartman(String departman) {         this.departman \u003d departman;     }  } -----------------------------------com.gen.test.PersonManagerClient.java-----------------------------------  package com.gen.test;  import java.util.List; import com.gen.test.model.Manager; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ public interface PersonManagerClient {       /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers();      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager);  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import com.gen.test.model.Manager; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class PersonManagerClientImpl     implements PersonManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003cList\u003cManager\u003e\u003e getPersonsManagers() {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.Manager\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003cManager\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager) {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  }]\u003e but was:\u003c...blic boolean equals([java.lang.Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Manager) \u003d\u003d false) {             return false;         }         Manager otherObject \u003d ((Manager) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }      /**      * Returns the departman.      *       * @return      *     departman      */     public String getDepartman() {         return departman;     }      /**      * Set the departman.      *       * @param departman      *     the new departman      */     public void setDepartman(String departman) {         this.departman \u003d departman;     }  } -----------------------------------com.gen.test.model.Object.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Object implements Serializable {      private String firstName;     private String lastName;     private String departman;      /**      * Creates a new Object.      *       */     public Object() {         super();     }      /**      * Creates a new Object.      *       */     public Object(String firstName, String lastName, String departman) {         super();         this.firstName \u003d firstName;         this.lastName \u003d lastName;         this.departman \u003d departman;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(java.lang.Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Object) \u003d\u003d false) {             return false;         }         Object otherObject \u003d ((Object) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the firstName.      *       * @return      *     firstName      */     public String getFirstName() {         return firstName;     }      /**      * Set the firstName.      *       * @param firstName      *     the new firstName      */     public void setFirstName(String firstName) {         this.firstName \u003d firstName;     }      /**      * Returns the lastName.      *       * @return      *     lastName      */     public String getLastName() {         return lastName;     }      /**      * Set the lastName.      *       * @param lastName      *     the new lastName      */     public void setLastName(String lastName) {         this.lastName \u003d lastName;     }      /**      * Returns the departman.      *       * @return      *     departman      */     public String getDepartman() {         return departman;     }      /**      * Set the departman.      *       * @param departman      *     the new departman      */     public void setDepartman(String departman) {         this.departman \u003d departman;     }  } -----------------------------------com.gen.test.PersonManagerClient.java-----------------------------------  package com.gen.test;  import java.util.List; import com.gen.test.model.Manager; import com.gen.test.model.Object; import org.springframework.http.ResponseEntity;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ public interface PersonManagerClient {       /**      * No description      *       */     public ResponseEntity\u003cList\u003cObject\u003e\u003e getPersonsManagers()         throws Exception     ;      /**      * No description      *       * @param manager The Request Body Payload      */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager)         throws Exception     ;  } -----------------------------------com.gen.test.PersonManagerClientImpl.java-----------------------------------  package com.gen.test;  import java.util.ArrayList; import java.util.List; import com.gen.test.model.Manager; import com.gen.test.model.Object; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.core.ParameterizedTypeReference; import org.springframework.http.HttpEntity; import org.springframework.http.HttpHeaders; import org.springframework.http.HttpMethod; import org.springframework.http.MediaType; import org.springframework.http.ResponseEntity; import org.springframework.stereotype.Component; import org.springframework.web.client.RestTemplate; import org.springframework.web.util.UriComponents; import org.springframework.web.util.UriComponentsBuilder;   /**  * No description  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @Component public class PersonManagerClientImpl     implements PersonManagerClient {      @Autowired     private RestTemplate restTemplate;     @Value(\"${client.url}\")     private String baseUrl;      /**      * No description      *       */     public ResponseEntity\u003cList\u003cObject\u003e\u003e getPersonsManagers()         throws Exception     {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(httpHeaders);         class _P extends org.springframework.core.ParameterizedTypeReference\u003cjava.util.List\u003ccom.gen.test.model.Object\u003e\u003e{};         ParameterizedTypeReference\u003cList\u003cObject\u003e\u003e typeReference \u003d new _P();         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.GET, httpEntity, typeReference);     }      /**      * No description      *       */     public ResponseEntity\u003cManager\u003e createPersonsManager(Manager manager)         throws Exception     {         HttpHeaders httpHeaders \u003d new HttpHeaders();         //  Add Accepts Headers and Body Content-Type         ArrayList\u003cMediaType\u003e acceptsList \u003d new ArrayList\u003cMediaType\u003e();         httpHeaders.setContentType(MediaType.valueOf(\"application/json\"));         acceptsList.add(MediaType.valueOf(\"application/json\"));         httpHeaders.setAccept(acceptsList);         String url \u003d baseUrl.concat(\"/organization/persons/managers\");         UriComponentsBuilder builder \u003d UriComponentsBuilder.fromHttpUrl(url);         UriComponents uriComponents \u003d builder.build();         HttpEntity httpEntity \u003d new HttpEntity(manager, httpHeaders);         return this.restTemplate.exchange(uriComponents.encode().toUri(), HttpMethod.POST, httpEntity, Manager.class);     }  } ]\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.pojo.UnionTypeInterpretorTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.pojo.UnionTypeInterpretorTest#applySpring4ClientStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c...a new Device.      *[      */     public Device() {         super();     }      /**      * Creates a new Device.      *      */     public Device(com.gen.test.model.Phone Phone, com.gen.test.model.Notebook Notebook) {         super();         this.Phone \u003d Phone;         this.Notebook \u003d Notebook;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Device) \u003d\u003d false) {             return false;         }         Device otherObject \u003d ((Device) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the Phone.      *      * @return      *     Phone      */     public com.gen.test.model.Phone getPhone() {         return Phone;     }      /**      * Set the Phone.      *      * @param Phone      *     the new Phone      */     public void setPhone(com.gen.test.model.Phone Phone) {         this.Phone \u003d Phone;     }      /**      * Returns the Notebook.      *      * @return      *     Notebook      */     public com.gen.test.model.Notebook getNotebook() {         return Notebook;     }      /**      * Set the Notebook.      *      * @param Notebook      *     the new Notebook      */     public void setNotebook(com.gen.test.model.Notebook Notebook) {         this.Notebook \u003d Notebook;     }  } -----------------------------------com.gen.test.model.Notebook.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Notebook implements Serializable {      private String manufacturer;     private Double numberOfUSBPorts;      /**      * Creates a new Notebook.      *      */     public Notebook() {         super();     }      /**      * Creates a new Notebook.      *      */     public Notebook(String manufacturer, Double numberOfUSBPorts) {         super();         this.manufacturer \u003d manufacturer;         this.numberOfUSBPorts \u003d numberOfUSBPorts;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Notebook) \u003d\u003d false) {             return false;         }         Notebook otherObject \u003d ((Notebook) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the manufacturer.      *      * @return      *     manufacturer      */     public String getManufacturer() {         return manufacturer;     }      /**      * Set the manufacturer.      *      * @param manufacturer      *     the new manufacturer      */     public void setManufacturer(String manufacturer) {         this.manufacturer \u003d manufacturer;     }      /**      * Returns the numberOfUSBPorts.      *      * @return      *     numberOfUSBPorts      */     public Double getNumberOfUSBPorts() {         return numberOfUSBPorts;     }      /**      * Set the numberOfUSBPorts.      *      * @param numberOfUSBPorts      *     the new numberOfUSBPorts      */     public void setNumberOfUSBPorts(Double numberOfUSBPorts) {         this.numberOfUSBPorts \u003d numberOfUSBPorts;     }  } -----------------------------------com.gen.test.model.Phone.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Phone implements Serializable {     private String manufacturer;     private Double numberOfSIMCards;      /**      * Creates a new Phone.      *      */     public Phone() {         super();     }      /**      * Creates a new Phone.      *      */     public Phone(String manufacturer, Double numberOfSIMCards) {         super();         this.manufacturer \u003d manufacturer;         this.numberOfSIMCards \u003d numberOfSIMCards;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Phone) \u003d\u003d false) {             return false;         }         Phone otherObject \u003d ((Phone) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the manufacturer.      *      * @return      *     manufacturer      */     public String getManufacturer() {         return manufacturer;     }      /**      * Set the manufacturer.      *      * @param manufacturer      *     the new manufacturer      */     public void setManufacturer(String manufacturer) {         this.manufacturer \u003d manufacturer;     }      /**      * Returns the numberOfSIMCards.      *      * @return      *     numberOfSIMCards      */     public Double getNumberOfSIMCards() {         return numberOfSIMCards;     }      /**      * Set the numberOfSIMCards.      *      * @param numberOfSIMCards      *     the new numberOfSIMCards      */     public void setNumberOfSIMCards(Double numberOfSIMCards) {         this.numberOfSIMCards \u003d numberOfSIMCards;     }  } -----------------------------------com.gen.test.model.PhoneNotebook.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class PhoneNotebook implements Serializable {     private com.gen.test.model.Phone Phone;     private com.gen.test.model.Notebook Notebook;      /**      * Creates a new PhoneNotebook.      *      */     public PhoneNotebook() {         super();     }      /**      * Creates a new PhoneNotebook.      *      */     public PhoneNotebook(com.gen.test.model.Phone Phone, com.gen.test.model.Notebook Notebook) {         super();         this.Phone \u003d Phone;         this.Notebook \u003d Notebook;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof PhoneNotebook) \u003d\u003d false) {             return false;         }         PhoneNotebook otherObject \u003d ((PhoneNotebook) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the Phone.      *      * @return      *     Phone      */     public com.gen.test.model.Phone getPhone() {         return Phone;     }      /**      * Set the Phone.      *      * @param Phone      *     the new Phone      */     public void setPhone(com.gen.test.model.Phone Phone) {         this.Phone \u003d Phone;     }      /**      * Returns the Notebook.      *      * @return      *     Notebook      */     public com.gen.test.model.Notebook getNotebook() {         return Notebook;     }      /**      * Set the Notebook.      *      * @param Notebook      *     the new Notebook      */     public void setNotebook(com.gen.test.model.Notebook Notebook) {         this.Notebook \u003d Notebook;     } } -----------------------------------com.gen.test.ApiDeviceController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.Device; import com.gen.test.model.PhoneNotebook; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * Api for devices  * (Generated with springmvc-raml-parser v.0.10.6)  *  */ @RestController @RequestMapping(value \u003d \"/api/devices\", produces \u003d \"application/json\") public interface ApiDeviceController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cString\u003e createDevice(         @Valid         @RequestBody         java.lang.String phoneNotebook)         throws Exception     ;      /**      * No description      *      */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cDevice\u003e getDeviceById(         @PathVariable         java.lang.String id)         throws Exception     ;      /**      * No description      *]      */     @Reques...\u003e but was:\u003c...a new Device.      *[       */     public Device() {         super();     }      /**      * Creates a new Device.      *       */     public Device(com.gen.test.model.Phone Phone, com.gen.test.model.Notebook Notebook) {         super();         this.Phone \u003d Phone;         this.Notebook \u003d Notebook;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Device) \u003d\u003d false) {             return false;         }         Device otherObject \u003d ((Device) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the Phone.      *       * @return      *     Phone      */     public com.gen.test.model.Phone getPhone() {         return Phone;     }      /**      * Set the Phone.      *       * @param Phone      *     the new Phone      */     public void setPhone(com.gen.test.model.Phone Phone) {         this.Phone \u003d Phone;     }      /**      * Returns the Notebook.      *       * @return      *     Notebook      */     public com.gen.test.model.Notebook getNotebook() {         return Notebook;     }      /**      * Set the Notebook.      *       * @param Notebook      *     the new Notebook      */     public void setNotebook(com.gen.test.model.Notebook Notebook) {         this.Notebook \u003d Notebook;     }  } -----------------------------------com.gen.test.model.Notebook.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Notebook implements Serializable {      private String manufacturer;     private Double numberOfUSBPorts;      /**      * Creates a new Notebook.      *       */     public Notebook() {         super();     }      /**      * Creates a new Notebook.      *       */     public Notebook(String manufacturer, Double numberOfUSBPorts) {         super();         this.manufacturer \u003d manufacturer;         this.numberOfUSBPorts \u003d numberOfUSBPorts;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Notebook) \u003d\u003d false) {             return false;         }         Notebook otherObject \u003d ((Notebook) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the manufacturer.      *       * @return      *     manufacturer      */     public String getManufacturer() {         return manufacturer;     }      /**      * Set the manufacturer.      *       * @param manufacturer      *     the new manufacturer      */     public void setManufacturer(String manufacturer) {         this.manufacturer \u003d manufacturer;     }      /**      * Returns the numberOfUSBPorts.      *       * @return      *     numberOfUSBPorts      */     public Double getNumberOfUSBPorts() {         return numberOfUSBPorts;     }      /**      * Set the numberOfUSBPorts.      *       * @param numberOfUSBPorts      *     the new numberOfUSBPorts      */     public void setNumberOfUSBPorts(Double numberOfUSBPorts) {         this.numberOfUSBPorts \u003d numberOfUSBPorts;     }  } -----------------------------------com.gen.test.model.Phone.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class Phone implements Serializable {      private String manufacturer;     private Double numberOfSIMCards;      /**      * Creates a new Phone.      *       */     public Phone() {         super();     }      /**      * Creates a new Phone.      *       */     public Phone(String manufacturer, Double numberOfSIMCards) {         super();         this.manufacturer \u003d manufacturer;         this.numberOfSIMCards \u003d numberOfSIMCards;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof Phone) \u003d\u003d false) {             return false;         }         Phone otherObject \u003d ((Phone) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the manufacturer.      *       * @return      *     manufacturer      */     public String getManufacturer() {         return manufacturer;     }      /**      * Set the manufacturer.      *       * @param manufacturer      *     the new manufacturer      */     public void setManufacturer(String manufacturer) {         this.manufacturer \u003d manufacturer;     }      /**      * Returns the numberOfSIMCards.      *       * @return      *     numberOfSIMCards      */     public Double getNumberOfSIMCards() {         return numberOfSIMCards;     }      /**      * Set the numberOfSIMCards.      *       * @param numberOfSIMCards      *     the new numberOfSIMCards      */     public void setNumberOfSIMCards(Double numberOfSIMCards) {         this.numberOfSIMCards \u003d numberOfSIMCards;     }  } -----------------------------------com.gen.test.model.PhoneNotebook.java-----------------------------------  package com.gen.test.model;  import java.io.Serializable; import org.apache.commons.lang.builder.EqualsBuilder; import org.apache.commons.lang.builder.HashCodeBuilder; import org.apache.commons.lang.builder.ToStringBuilder;  public class PhoneNotebook implements Serializable {      private com.gen.test.model.Phone Phone;     private com.gen.test.model.Notebook Notebook;      /**      * Creates a new PhoneNotebook.      *       */     public PhoneNotebook() {         super();     }      /**      * Creates a new PhoneNotebook.      *       */     public PhoneNotebook(com.gen.test.model.Phone Phone, com.gen.test.model.Notebook Notebook) {         super();         this.Phone \u003d Phone;         this.Notebook \u003d Notebook;     }      public String toString() {         return ToStringBuilder.reflectionToString(this);     }      public boolean equals(Object other) {         if (other \u003d\u003d this) {             return true;         }         if ((other instanceof PhoneNotebook) \u003d\u003d false) {             return false;         }         PhoneNotebook otherObject \u003d ((PhoneNotebook) other);         return new EqualsBuilder().isEquals();     }      public int hashCode() {         return new HashCodeBuilder().toHashCode();     }      /**      * Returns the Phone.      *       * @return      *     Phone      */     public com.gen.test.model.Phone getPhone() {         return Phone;     }      /**      * Set the Phone.      *       * @param Phone      *     the new Phone      */     public void setPhone(com.gen.test.model.Phone Phone) {         this.Phone \u003d Phone;     }      /**      * Returns the Notebook.      *       * @return      *     Notebook      */     public com.gen.test.model.Notebook getNotebook() {         return Notebook;     }      /**      * Set the Notebook.      *       * @param Notebook      *     the new Notebook      */     public void setNotebook(com.gen.test.model.Notebook Notebook) {         this.Notebook \u003d Notebook;     }  } -----------------------------------com.gen.test.ApiDeviceController.java-----------------------------------  package com.gen.test;  import javax.validation.Valid; import com.gen.test.model.Device; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RequestMethod; import org.springframework.web.bind.annotation.RestController;   /**  * Api for devices  * (Generated with springmvc-raml-parser v.0.10.8-SNAPSHOT)  *   */ @RestController @RequestMapping(value \u003d \"/api/devices\", produces \u003d \"application/json\") public interface ApiDeviceController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003cString\u003e createDevice(         @Valid         @RequestBody         java.lang.String phoneNotebook)         throws Exception     ;      /**      * No description      *       */     @RequestMapping(value \u003d \"/{id}\", method \u003d RequestMethod.GET)     public ResponseEntity\u003cDevice\u003e getDeviceById(         @PathVariable         java.lang.String id)         throws Exception     ;      /**      * No description      * ]      */     @Reques...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    },
    {
      "className": "com.phoenixnap.oss.ramlapisync.generation.rules.MultipartMimeRequestTest",
      "failingMethods": [
        "com.phoenixnap.oss.ramlapisync.generation.rules.MultipartMimeRequestTest#applySpring3ControllerStubRule_shouldCreate_validCode"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.junit.ComparisonFailure",
          "failureDetail": "expected:\u003c....0.10.8-SNAPSHOT)  *[  */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *      */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e updateBase(         @RequestParam         MultipartFile file)] {         return nu...\u003e but was:\u003c....0.10.8-SNAPSHOT)  *[   */ @Controller @RequestMapping(value \u003d \"/api/base\", produces \u003d \"application/json\") @Validated public class BaseController {       /**      * No description      *       */     @RequestMapping(value \u003d \"\", method \u003d RequestMethod.POST)     public ResponseEntity\u003c?\u003e updateBase(         @RequestParam         MultipartFile file)         throws Exception    ] {         return nu...\u003e",
          "isError": false
        }
      ],
      "nbFailures": 1,
      "nbErrors": 0
    }
  ]
}