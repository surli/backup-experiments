{
  "totalNumberSkippingTests": 1,
  "bugType": "only_fail",
  "totalNumberErroringTests": 1,
  "repo": "elasticjob/elastic-job-lite",
  "failingModule": "/root/workspace/elasticjob/elastic-job-lite/207694348/elastic-job-common/elastic-job-common-core",
  "hostname": "spirals-vortex.lille.inria.fr",
  "totalNumberFailingTests": 16,
  "error-types": [
    "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
    "org.mockito.exceptions.verification.WantedButNotInvoked",
    "org.mockito.exceptions.verification.TooLittleActualInvocations",
    "java.lang.Exception"
  ],
  "totalNumberRunningTests": 187,
  "failing-test-cases": [
    {
      "className": "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest",
      "failingMethods": [
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNullAndEmpty",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyForUnStreamingProcessAndMultipleShardingItems",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyForStreamingProcessAndSingleShardingItem",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyForUnStreamingProcessAndSingleShardingItem",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyAndIsEligibleForJobRunningForStreamingProcess",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyAndIsNotEligibleForJobRunningForStreamingProcess",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyAndProcessFailureWithExceptionForStreamingProcess",
        "com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest#assertExecuteWhenFetchDataIsNotEmptyForStreamingProcessAndMultipleShardingItems"
      ],
      "erroringMethods": [],
      "failures": [
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@1ecee32c\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@4372b9b6\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@232a7d73\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@4b41e4dd\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{1\u003djava.lang.IllegalStateException\n at com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData(TestDataflowJob.java:39)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData(DataflowJobExecutor.java:75)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:55)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process(DataflowJobExecutor.java:46)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:195)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000(AbstractElasticJobExecutor.java:47)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run(AbstractElasticJobExecutor.java:174)\n at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n at java.lang.Thread.run(Thread.java:745)\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@56113384\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@5669c5fb\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@373ebf74\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@5f9678e1\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@112f364d\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@5ccbeb64\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@6d9f7a80\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@59252cb6\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{1\u003djava.lang.IllegalStateException\n at com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData(TestDataflowJob.java:39)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData(DataflowJobExecutor.java:75)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.oneOffExecute(DataflowJobExecutor.java:66)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process(DataflowJobExecutor.java:48)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:195)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000(AbstractElasticJobExecutor.java:47)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run(AbstractElasticJobExecutor.java:174)\n at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n at java.lang.Thread.run(Thread.java:745)\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@626c44e7\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@4dc8caa7\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@1d730606\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@3bcbb589\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@53d102a2\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@6c45ee6e\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{0\u003djava.lang.IllegalStateException\n at com.dangdang.ddframe.job.fixture.job.TestDataflowJob.fetchData(TestDataflowJob.java:33)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.fetchData(DataflowJobExecutor.java:71)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.oneOffExecute(DataflowJobExecutor.java:64)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process(DataflowJobExecutor.java:48)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:195)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:160)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:139)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:115)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutorTest.assertExecuteWhenFetchDataIsNotEmptyForUnStreamingProcessAndSingleShardingItem(DataflowJobExecutorTest.java:75)\n at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n at java.lang.reflect.Method.invoke(Method.java:498)\n at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n at org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)\n at org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)\n at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:367)\n at org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:274)\n at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:238)\n at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:161)\n at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)\n at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)\n at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@1338fb5\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@42463763\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@67c2e933\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@41dd05a\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@613a8ee1\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@178213b\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{1\u003djava.lang.IllegalStateException\n at com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData(TestDataflowJob.java:39)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData(DataflowJobExecutor.java:75)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:55)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process(DataflowJobExecutor.java:46)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:195)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000(AbstractElasticJobExecutor.java:47)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run(AbstractElasticJobExecutor.java:174)\n at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n at java.lang.Thread.run(Thread.java:745)\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@18920cc\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.isEligibleForJobRunning();\n-\u003e at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:56)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@2807bdeb\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@72c28d64\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@6492fab5\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{1\u003djava.lang.IllegalStateException\n at com.dangdang.ddframe.job.fixture.job.TestDataflowJob.processData(TestDataflowJob.java:39)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.processData(DataflowJobExecutor.java:75)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.streamingExecute(DataflowJobExecutor.java:55)\n at com.dangdang.ddframe.job.executor.type.DataflowJobExecutor.process(DataflowJobExecutor.java:46)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:195)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.access$000(AbstractElasticJobExecutor.java:47)\n at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor$1.run(AbstractElasticJobExecutor.java:174)\n at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n at java.lang.Thread.run(Thread.java:745)\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        }
      ],
      "nbFailures": 8,
      "nbErrors": 0
    },
    {
      "className": "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest",
      "failingMethods": [
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceWithMisfireIsEmpty",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenShardingItemsIsEmpty",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceWithMisfireIsNotEmptyButIsNotEligibleForJobRunning",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceAndThrowExceptionForMultipleShardingItems",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceWithMisfire",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceSuccessForMultipleShardingItems",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceSuccessForSingleShardingItems",
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenPreviousJobStillRunning"
      ],
      "erroringMethods": [
        "com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest#assertExecuteWhenRunOnceAndThrowExceptionForSingleShardingItem"
      ],
      "failures": [
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@2002348\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@5911e990\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@31000e60\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@1d470d0\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@2d1dee39\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@48d5f34e\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@fc258b1\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@6ff65192\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.TooLittleActualInvocations",
          "failureDetail": "\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\nWanted 2 times:\n-\u003e at com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest.assertExecuteWhenRunOnceWithMisfire(SimpleJobExecutorTest.java:200)\nBut was 1 time:\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@3e821657\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@1d131e1b\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@71cf1b07\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@615091b8\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0, 1]);\n-\u003e at com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest.assertExecuteWhenRunOnceAndThrowException(SimpleJobExecutorTest.java:143)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@19648c40\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@12bd8a64\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@61e94def\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@3300f4fd\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_ERROR,\n    \"{0\u003djava.lang.RuntimeException\n, 1\u003djava.lang.RuntimeException\n}\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:149)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d2, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA, 1\u003dB}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.junit.ArgumentsAreDifferent",
          "failureDetail": "\nArgument(s) are different! Wanted:\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"Previous job \u0027test_job\u0027 - shardingItems \u0027[]\u0027 is still running, misfired job will start after previous job completed.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest.assertExecuteWhenPreviousJobStillRunning(SimpleJobExecutorTest.java:94)\nActual invocation has different arguments:\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"Sharding item for job \u0027test_job\u0027 is empty.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:129)\n",
          "isError": false
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([]);\n-\u003e at com.dangdang.ddframe.job.executor.type.SimpleJobExecutorTest.assertExecuteWhenShardingItemsIsEmpty(SimpleJobExecutorTest.java:111)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d10, jobParameter\u003d, shardingItemParameters\u003d{}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"Sharding item for job \u0027test_job\u0027 is empty.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:129)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d10, jobParameter\u003d, shardingItemParameters\u003d{}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        },
        {
          "failureName": "java.lang.Exception",
          "failureDetail": "Unexpected exception, expected\u003ccom.dangdang.ddframe.job.exception.JobSystemException\u003e but was\u003corg.mockito.exceptions.verification.WantedButNotInvoked\u003e",
          "isError": true
        },
        {
          "failureName": "org.mockito.exceptions.verification.WantedButNotInvoked",
          "failureDetail": "\nWanted but not invoked:\njobFacade.misfireIfNecessary([0]);\n-\u003e at com.dangdang.ddframe.job.executor.type.ElasticJobVerify.verifyForIsNotMisfire(ElasticJobVerify.java:47)\n\nHowever, there were other interactions with this mock:\njobFacade.loadJobRootConfiguration(true);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.\u003cinit\u003e(AbstractElasticJobExecutor.java:65)\n\njobFacade.checkJobExecutionEnvironment();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:99)\n\njobFacade.getShardingContexts();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:103)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_STAGING,\n    \"Job \u0027test_job\u0027 execute begin.\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:105)\n\njobFacade.cleanPreviousExecutionInfo();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:107)\n\njobFacade.beforeJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:109)\n\njobFacade.registerJobBegin(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:133)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_RUNNING,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:136)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@7a560583\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:190)\n\njobFacade.postJobExecutionEvent(\n    com.dangdang.ddframe.job.event.type.JobExecutionEvent@4d722ac9\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.process(AbstractElasticJobExecutor.java:206)\n\njobFacade.registerJobCompleted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:142)\n\njobFacade.postJobStatusTraceEvent(\n    \"fake_task_id\",\n    TASK_FINISHED,\n    \"\"\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:145)\n\njobFacade.failoverIfNecessary();\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:116)\n\njobFacade.afterJobExecuted(\n    ShardingContexts(taskId\u003dfake_task_id, jobName\u003dtest_job, shardingTotalCount\u003d1, jobParameter\u003d, shardingItemParameters\u003d{0\u003dA}, jobEventSamplingCount\u003d0, currentJobEventSamplingCount\u003d0, allowSendJobEvent\u003dtrue)\n);\n-\u003e at com.dangdang.ddframe.job.executor.AbstractElasticJobExecutor.execute(AbstractElasticJobExecutor.java:118)\n\n",
          "isError": false
        }
      ],
      "nbFailures": 8,
      "nbErrors": 1
    }
  ]
}