/** * Meta class for 'primitiveByteArray' property <br/> * The meta class exposes some useful methods: <ul> *    <li>encodeFromJava: encode a property from raw Java to CQL java compatible type </li> *    <li>encodeField: extract the current property value from the given info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs instance and encode to CQL java compatible type </li> *    <li>decodeFromGettable: decode from a {@link com.datastax.driver.core.GettableData} instance (Row, UDTValue, TupleValue) the current property</li> * </ul> */@java.lang.SuppressWarnings({"serial", "unchecked"})public static final info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, byte[], java.nio.ByteBuffer> primitiveByteArray = new info.archinnov.achilles.internals.metamodel.SimpleProperty<info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs, byte[], java.nio.ByteBuffer>(new info.archinnov.achilles.internals.metamodel.columns.FieldInfo<>((info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$) -> entity$.getPrimitiveByteArray(), (info.archinnov.achilles.internals.sample_classes.parser.field.TestEntityForCodecs entity$, byte[] value$) -> entity$.setPrimitiveByteArray(value$), "primitiveByteArray", "primitive_byte_array", info.archinnov.achilles.internals.metamodel.columns.ColumnType.NORMAL, new info.archinnov.achilles.internals.metamodel.columns.ColumnInfo(false), info.archinnov.achilles.internals.metamodel.index.IndexInfo.noIndex()), com.datastax.driver.core.DataType.blob(), gettableData$ -> gettableData$.get("primitive_byte_array", java.nio.ByteBuffer.class), (settableData$, value$) -> settableData$.set("primitive_byte_array", value$, java.nio.ByteBuffer.class), new com.google.common.reflect.TypeToken<byte[]>(){}, new com.google.common.reflect.TypeToken<java.nio.ByteBuffer>(){}, new info.archinnov.achilles.internals.codec.ByteArrayPrimitiveCodec());