'use strict';

var jqmControllers = angular.module('jqmControllers');

jqmControllers.controller('µPrmListCtrl', function($scope, $http, µPrmDto, $interval)
{
    $scope.prms = null;
    $scope.selected = [];

    $scope.newprm = function()
    {
        var t = new µPrmDto({
            key : 'name',
            value : 'enter value',
        });
        $scope.prms.push(t);
        $scope.gridApi.selection.selectRow(t);
        $interval(function() {
            $scope.gridApi.cellNav.scrollToFocus(t, $scope.gridOptions.columnDefs[0]);
        }, 0, 1);
    };

    $scope.save = function()
    {
        // Save and refresh the table - ID may have been generated by the server.
        µPrmDto.saveAll({}, $scope.prms, $scope.refresh);
    };

    $scope.refresh = function()
    {
        $scope.selected.length = 0;
        $scope.prms = µPrmDto.query();
    };

    // Only remove from list - save() will sync the list with the server so no need to delete it from server now
    $scope.remove = function()
    {
        var q = null;
        for ( var i = 0; i < $scope.selected.length; i++)
        {
            q = $scope.selected[i];
            $scope.prms.splice($scope.prms.indexOf(q), 1);
        }
        $scope.selected.length = 0;
    };

    $scope.filterOptions = {
        filterText : '',
    };

    $scope.gridOptions = {
        data : 'prms',
        
        enableSelectAll : false,
		enableRowSelection : true,
		enableRowHeaderSelection : false,
		enableFullRowSelection : true,
		enableFooterTotalSelected : false,
		multiSelect : false,
		enableSelectionBatchEvent: false,
		noUnselect: true,
		
		enableColumnMenus : false,
		enableCellEditOnFocus : true,
		virtualizationThreshold : 20,
		enableHorizontalScrollbar : 0,
		
		onRegisterApi : function(gridApi) {
			$scope.gridApi = gridApi;
			gridApi.selection.on.rowSelectionChanged($scope, function(rows) {
				$scope.selected = gridApi.selection.getSelectedRows();
			});
			
			gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol){
				if (newRowCol !== oldRowCol)
				{
					gridApi.selection.selectRow(newRowCol.row.entity);
				}
            });
			
			gridApi.grid.registerRowsProcessor(createGlobalFilter($scope, [ 'key', 'value', ]), 200);
		},

		columnDefs : [ {
            field : 'key',
            displayName : 'Name',
            width : '30%',
            sort: {direction: "asc"},
        }, {
            field : 'value',
            displayName : 'Value',
        } ]
    };

    $scope.refresh();
});
