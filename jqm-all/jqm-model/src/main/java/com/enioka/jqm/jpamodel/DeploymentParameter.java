/**
 * Copyright Â© 2013 enioka. All rights reserved
 * Authors: Marc-Antoine GOUILLART (marc-antoine.gouillart@enioka.com)
 *          Pierre COPPEE (pierre.coppee@enioka.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.enioka.jqm.jpamodel;

import java.util.Calendar;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

/**
 * <strong>Not part of any API - this an internal JQM class and may change without notice.</strong> <br>
 * JPA persistence class for associating {@link Node} with {@link Queue}, specifying the max number of concurrent instances and polling
 * interval.
 */
@Entity
@Table(name = "DeploymentParameter", uniqueConstraints = { @UniqueConstraint(columnNames = { "queue", "node" }) })
public class DeploymentParameter
{
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Integer id;
    @Column(nullable = true, name = "classId")
    private Integer classId;
    @ManyToOne(fetch = FetchType.LAZY, targetEntity = com.enioka.jqm.jpamodel.Node.class)
    @JoinColumn(name = "node", nullable = false)
    private Node node;
    @Column(nullable = false, name = "nbThread")
    private Integer nbThread;
    @Column(name = "pollingInterval", nullable = false)
    private Integer pollingInterval;
    @ManyToOne(targetEntity = com.enioka.jqm.jpamodel.Queue.class)
    @JoinColumn(name = "queue", nullable = false)
    private Queue queue;
    private Boolean enabled = true;

    @Version
    @Temporal(TemporalType.TIMESTAMP)
    private Calendar lastModified;

    /**
     * A technical ID without any meaning. Generated by the database.
     */
    public Integer getId()
    {
        return id;
    }

    /**
     * Should never be called. See {@link #getId()}
     */
    void setId(final Integer id)
    {
        this.id = id;
    }

    /**
     * @deprecated was never used
     */
    public Integer getClassId()
    {
        return classId;
    }

    /**
     * @deprecated was never used
     */
    public void setClassId(final Integer classId)
    {
        this.classId = classId;
    }

    /**
     * The maximum of concurrent {@link JobInstance} executions for the {@link Queue} designated by {@link #getQueue()} on the {@link Node}
     * designated by {@link #getNode()}. The queue is considered "full" once there as many active executions as this number and the engine
     * will ignore new execution requests until a running {@link JobInstance} ends.
     */
    public Integer getNbThread()
    {
        return nbThread;
    }

    /**
     * See {@link #getNbThread()}
     */
    public void setNbThread(final Integer nbThread)
    {
        this.nbThread = nbThread;
    }

    /**
     * The {@link Node} that will have to poll the {@link Queue} designated by {@link #getQueue()} for new {@link JobInstance}s to run.
     */
    public Node getNode()
    {
        return node;
    }

    /**
     * See {@link #setNode(Node)}
     */
    public void setNode(final Node node)
    {
        this.node = node;
    }

    /**
     * The period in milliseconds between two peeks on the {@link Queue} designated by {@link #getQueue()} (looking for {@link JobInstance}s
     * to run). Reasonable minimum is 1000 (1s).
     */
    public Integer getPollingInterval()
    {
        return pollingInterval;
    }

    /**
     * See {@link #getPollingInterval()}
     */
    public void setPollingInterval(final Integer pollingInterval)
    {
        this.pollingInterval = pollingInterval;
    }

    /**
     * The {@link Queue} that will have to be polled by the {@link Node} designated by {@link #getNode()} for new {@link JobInstance}s to
     * run.
     */
    public Queue getQueue()
    {
        return queue;
    }

    /**
     * See {@link #getQueue()}
     */
    public void setQueue(final Queue queue)
    {
        this.queue = queue;
    }

    /**
     * When the object was last modified. Read only.
     */
    public Calendar getLastModified()
    {
        return lastModified;
    }

    /**
     * See {@link #getLastModified()}
     */
    protected void setLastModified(Calendar lastModified)
    {
        this.lastModified = lastModified;
    }

    /**
     * Disabled means the binding still exists but no job instances are polled (poller is paused, with already running job instances going
     * on normally).
     */
    public Boolean getEnabled()
    {
        return enabled;
    }

    /**
     * See {@link #getEnabled()}
     */
    public void setEnabled(Boolean enabled)
    {
        this.enabled = enabled;
    }
}
