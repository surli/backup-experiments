<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Bank++" enabled="true">
      <stringProp name="TestPlan.comments">3b01 (315) это код возврата от грида &quot;нет записей&quot;
2206 это код &quot;транзакция уже подтверждена&quot;

Инвест: 80d7862a-6160-4596-aaa9-1743e4c27638 
АУБ: c2ce97a0-8b15-11d1-96ab-00a0c9103fcf</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="callID" elementType="Argument">
            <stringProp name="Argument.name">callID</stringProp>
            <stringProp name="Argument.value">0</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverUUID" elementType="Argument">
            <stringProp name="Argument.name">serverUUID</stringProp>
            <stringProp name="Argument.value">c2ce97a0-8b15-11d1-96ab-00a0c9103fcf</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="returnCodeCheckRegexp" elementType="Argument">
            <stringProp name="Argument.name">returnCodeCheckRegexp</stringProp>
            <stringProp name="Argument.value">^(00000000|3b010000|{0,|{315,|22060000)([^\0]*)$</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="heartbeatTimeout" elementType="Argument">
            <stringProp name="Argument.name">heartbeatTimeout</stringProp>
            <stringProp name="Argument.value">300000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="basedir" elementType="Argument">
            <stringProp name="Argument.name">basedir</stringProp>
            <stringProp name="Argument.value">f:\documents\programming\jmeter-DCERPC\loadtest_bpp</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverAddr" elementType="Argument">
            <stringProp name="Argument.name">serverAddr</stringProp>
            <stringProp name="Argument.value">apc-virt-ws2003</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="serverPort" elementType="Argument">
            <stringProp name="Argument.name">serverPort</stringProp>
            <stringProp name="Argument.value">10400</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="ResultCollector" testname="Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Full debug trace" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.config.VariablesFromCSVFile guiclass="TestBeanGUI" testclass="kg.apc.jmeter.config.VariablesFromCSVFile" testname="RPC Method OpNums" enabled="true">
        <stringProp name="delimiter">\t</stringProp>
        <stringProp name="filename">remote32rpc.idl.tsv</stringProp>
        <stringProp name="variablesPrefix">OpNum_</stringProp>
      </kg.apc.jmeter.config.VariablesFromCSVFile>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Генератор UUID пользователя" enabled="true">
        <stringProp name="maximumValue">1000000</stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="outputFormat">FFFFFFFF-FFFF-FFFF-FFFF-000000000000</stringProp>
        <boolProp name="perThread">true</boolProp>
        <stringProp name="randomSeed"></stringProp>
        <stringProp name="variableName">CLIENT_UUID</stringProp>
      </RandomVariableConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Base Table Handles" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="tab_AM_BTAB_ALLACCOUNTS" elementType="Argument">
            <stringProp name="Argument.name">tab_AM_BTAB_ALLACCOUNTS</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tab_AM_BTAB_FOUND_CUSTOMERS" elementType="Argument">
            <stringProp name="Argument.name">tab_AM_BTAB_FOUND_CUSTOMERS</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tab_CASHACCLIST" elementType="Argument">
            <stringProp name="Argument.name">tab_CASHACCLIST</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tab_PMNTREFCODES" elementType="Argument">
            <stringProp name="Argument.name">tab_PMNTREFCODES</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tab_AM_BTAB_CASH_ACCOUNT_OPERS" elementType="Argument">
            <stringProp name="Argument.name">tab_AM_BTAB_CASH_ACCOUNT_OPERS</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tab_AM_BTAB_CSINCOMERQSTLIST" elementType="Argument">
            <stringProp name="Argument.name">tab_AM_BTAB_CSINCOMERQSTLIST</stringProp>
            <stringProp name="Argument.value">${__Random(1,10000)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <GaussianRandomTimer guiclass="GaussianRandomTimerGui" testclass="GaussianRandomTimer" testname="Gaussian Random Timer" enabled="false">
        <stringProp name="ConstantTimer.delay">0</stringProp>
        <stringProp name="RandomTimer.range">5000</stringProp>
      </GaussianRandomTimer>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Клиентские операционисты" enabled="true">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">2</stringProp>
        <stringProp name="ThreadGroup.ramp_time">15</stringProp>
        <longProp name="ThreadGroup.start_time">1261491292000</longProp>
        <longProp name="ThreadGroup.end_time">1261491292000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Errors" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Логины операционистов" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LOGIN" elementType="Argument">
                <stringProp name="Argument.name">LOGIN</stringProp>
                <stringProp name="Argument.value">${__CSVRead(${basedir}\\${serverUUID}_operationist.txt,0)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Вход в Client32" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="1560976001">Login Client32</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Управление счетами" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Return code check" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1230511136">${returnCodeCheckRegexp}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="heartbeat" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_HowAreYou} I:1
{${CLIENT_UUID}}000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Открыть управление счетами" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="1757036272">Open AccManage</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Заявка на взнос наличных со счета клиента" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">5</stringProp>
          </LoopController>
          <hashTree>
            <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Клик в дереве по разделу &quot;Все клиенты&quot;" enabled="true">
              <collectionProp name="ModuleController.node_path">
                <stringProp name="-1227702913">WorkBench</stringProp>
                <stringProp name="1982486716">Bank++</stringProp>
                <stringProp name="1089177806">Модули</stringProp>
                <stringProp name="763942676">Click in tree on All Customers</stringProp>
              </collectionProp>
            </ModuleController>
            <hashTree/>
            <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Быстрый поиск" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="ActiveBranch" elementType="Argument">
                    <stringProp name="Argument.name">ActiveBranch</stringProp>
                    <stringProp name="Argument.value">${ActiveBranch}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="tabHandle" elementType="Argument">
                    <stringProp name="Argument.name">tabHandle</stringProp>
                    <stringProp name="Argument.value">${tab_AM_BTAB_FOUND_CUSTOMERS}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                  <elementProp name="SearchStr" elementType="Argument">
                    <stringProp name="Argument.name">SearchStr</stringProp>
                    <stringProp name="Argument.value">${__Random(0,1000)}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </kg.apc.jmeter.control.ParameterizedController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Запуск быстрого поиска" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1982486716">Bank++</stringProp>
                  <stringProp name="1089177806">Модули</stringProp>
                  <stringProp name="802967876">FastSearch</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если нашли такого клиента" enabled="true">
              <stringProp name="IfController.condition">&quot;${WasNotFound}&quot; != &quot;YES&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Переход на найденного клиента" enabled="true"/>
              <hashTree>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="CheckDocStatus for customer" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
	&lt;Name&gt;BppCustomerDeleting&lt;/Name&gt;
	&lt;Version&gt;2&lt;/Version&gt;
	&lt;Method&gt;CheckDocStatus&lt;/Method&gt;
	&lt;Parameters&gt;
		&lt;strCode&gt;${Cu_Code}&lt;/strCode&gt;
		&lt;strDocWarning&gt;&lt;/strDocWarning&gt;
		&lt;strSignWarning&gt;&lt;/strSignWarning&gt;
	&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Cu_Code AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr}
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Cu_Code}
01000000</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="BppFastSearchChoose" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
	&lt;Name&gt;BppFastSearchChoose&lt;/Name&gt;
	&lt;Version&gt;2&lt;/Version&gt;
	&lt;Method&gt;ItemForTreeChoosing&lt;/Method&gt;
	&lt;Parameters&gt;
		&lt;strTableAlias&gt;ACCMANAGECUSTOMERSFOUND&lt;/strTableAlias&gt;
		&lt;strTreePrefix&gt;ACCOUNTS&lt;/strTreePrefix&gt;
	&lt;/Parameters&gt;
&lt;/Request&gt;}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string SearchBy AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)}	${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:SearchBy}
00000001000000</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Refresh tree" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)}	${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}00
000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;ExecuteCommand&lt;/Method&gt;

&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;
&lt;xmlRequest&gt;&lt;Root&gt;&lt;Commands&gt;&lt;Command Name=&quot;REFRESH&quot;&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Child&quot;&gt;Yes&lt;/Parameter&gt;&lt;Parameter Name=&quot;Ident&quot;&gt;1&lt;/Parameter&gt;&lt;Parameter Name=&quot;Tree&quot;&gt;&lt;/Parameter&gt;&lt;/Parameters&gt;&lt;/Command&gt;&lt;/Commands&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;&lt;/Parameters&gt;
&lt;Tree&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Locate tree" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}00
000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;ExecuteCommand&lt;/Method&gt;
&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;&lt;xmlRequest&gt;&lt;Root&gt;&lt;Commands&gt;&lt;Command Name=&quot;LOCATE&quot;&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Ident&quot;&gt;1&lt;/Parameter&gt;&lt;Parameter Name=&quot;Locate&quot;&gt;ACCOUNTS\\${Cu_Code}&lt;/Parameter&gt;&lt;/Parameters&gt;&lt;/Command&gt;&lt;/Commands&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;&lt;Parameter Name=&quot;Acc_Presentation&quot;&gt;Code&lt;/Parameter&gt;&lt;/Parameters&gt;&lt;Tree&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get added node Ident" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">NodeIdent</stringProp>
                    <stringProp name="RegexExtractor.regex">Node Ident=&quot;([0-9]+)&quot; [^/]+${Cu_Code}[^/]+/</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">FAILED</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если перешли успешно" enabled="true">
                <stringProp name="IfController.condition">&quot;${NodeIdent}&quot;!=&quot;FAILED&quot;</stringProp>
                <boolProp name="IfController.evaluateAll">false</boolProp>
              </IfController>
              <hashTree>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load Intermediary AllAccounts" enabled="true">
                  <stringProp name="TestPlan.comments">видимо это мусорный запрос, 
тот самый который выглядит 
как моргание управления счетами при 
переходе по быстрому поиску</stringProp>
                </GenericController>
                <hashTree>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create table AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">true</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterTable}
{${CLIENT_UUID}}000000
39425400
{F:32:AM_BTAB_ALLACCOUNTS}
00
{I:${tab_AM_BTAB_ALLACCOUNTS}}
10000000190100000401000000d582a5009cd1f302677da700840408</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register table columns AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterColomns}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
04000000</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}000000
00
{I:${tab_AM_BTAB_ALLACCOUNTS}}
0000000000000200
{D:&lt;PARAMLIST&gt;AM_BTAB_ALLACCOUNTS
&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
&lt;ShowClosed Type=&quot;Int&quot;&gt;0&lt;/ShowClosed&gt;
&lt;TableHandle Type=&quot;Int&quot;&gt;${tab_AM_BTAB_ALLACCOUNTS}&lt;/TableHandle&gt;
&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
&lt;TreeItem Type=&quot;Int&quot;&gt;${NodeIdent}&lt;/TreeItem&gt;
&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;
}</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Table AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
00000000</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_AM_BTAB_ALLACCOUNTS}}</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                </hashTree>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create table AM_BTAB_ALLACCOUNTS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">true</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterTable}
{${CLIENT_UUID}}000000
39425400
{F:32:AM_BTAB_ALLACCOUNTS}00
{I:${tab_AM_BTAB_ALLACCOUNTS}}
10000000b70200000401000000d582a50040ddf302677da700e41151</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register table columns AM_BTAB_ALLACCOUNTS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterColomns}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
04000000</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Загрузка содержимого AM_BTAB_ALLACCOUNTS" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="1982486716">Bank++</stringProp>
                    <stringProp name="1089177806">Модули</stringProp>
                    <stringProp name="-1212530457">Reload AM_BTAB_ALLACCOUNTS</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если у клиента есть счета" enabled="true">
                  <stringProp name="IfController.condition">&quot;${RowToSelect}&quot; != &quot;FAILED&quot;</stringProp>
                  <boolProp name="IfController.evaluateAll">false</boolProp>
                </IfController>
                <hashTree>
                  <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Правый клик по счету в таблице" enabled="true"/>
                  <hashTree>
                    <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Select line AM_BTAB_ALLACCOUNTS" enabled="true">
                      <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                      <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                      <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                      <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                      <boolProp name="TCPSampler.nodelay">false</boolProp>
                      <stringProp name="TCPSampler.timeout"></stringProp>
                      <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSelectLine}
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
{I:${RowToSelect}}</stringProp>
                      <stringProp name="ConfigTestElement.username"></stringProp>
                      <stringProp name="ConfigTestElement.password"></stringProp>
                    </TCPSampler>
                    <hashTree/>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get table strings" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="1982486716">Bank++</stringProp>
                        <stringProp name="1089177806">Модули</stringProp>
                        <stringProp name="-240579724">Get table strings AM_BTAB_ALLACCOUNTS</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                    <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
                      <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                      <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                      <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                      <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                      <boolProp name="TCPSampler.nodelay">false</boolProp>
                      <stringProp name="TCPSampler.timeout"></stringProp>
                      <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
0000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000
0000000000a186010000000000</stringProp>
                      <stringProp name="ConfigTestElement.username"></stringProp>
                      <stringProp name="ConfigTestElement.password"></stringProp>
                    </TCPSampler>
                    <hashTree/>
                    <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Currency AM_BTAB_ALLACCOUNTS" enabled="true">
                      <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                      <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                      <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                      <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                      <boolProp name="TCPSampler.nodelay">false</boolProp>
                      <stringProp name="TCPSampler.timeout"></stringProp>
                      <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr}
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Currency}
0000000001000000</stringProp>
                      <stringProp name="ConfigTestElement.username"></stringProp>
                      <stringProp name="ConfigTestElement.password"></stringProp>
                    </TCPSampler>
                    <hashTree/>
                  </hashTree>
                  <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Один раз" enabled="true"/>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Запрос шаблонов транзакций" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="1982486716">Bank++</stringProp>
                        <stringProp name="1089177806">Модули</stringProp>
                        <stringProp name="-1512246774">Request TrTemplates</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Взнос наличных параметризованный" enabled="true">
                    <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="TransactionAmount" elementType="Argument">
                          <stringProp name="Argument.name">TransactionAmount</stringProp>
                          <stringProp name="Argument.value">${__Random(1,1000)}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="AnalyticHint" elementType="Argument">
                          <stringProp name="Argument.name">AnalyticHint</stringProp>
                          <stringProp name="Argument.value">13</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="CustometAccountKey" elementType="Argument">
                          <stringProp name="Argument.name">CustometAccountKey</stringProp>
                          <stringProp name="Argument.value"></stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                        <elementProp name="ChargeAmount" elementType="Argument">
                          <stringProp name="Argument.name">ChargeAmount</stringProp>
                          <stringProp name="Argument.value">0</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </kg.apc.jmeter.control.ParameterizedController>
                  <hashTree>
                    <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Транзакция взноса наличных" enabled="true">
                      <collectionProp name="ModuleController.node_path">
                        <stringProp name="-1227702913">WorkBench</stringProp>
                        <stringProp name="1982486716">Bank++</stringProp>
                        <stringProp name="1089177806">Модули</stringProp>
                        <stringProp name="1877784251">Транзакция взноса CLCUIRQ</stringProp>
                      </collectionProp>
                    </ModuleController>
                    <hashTree/>
                  </hashTree>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Загрузка содержимого AM_BTAB_ALLACCOUNTS" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="1982486716">Bank++</stringProp>
                      <stringProp name="1089177806">Модули</stringProp>
                      <stringProp name="-1212530457">Reload AM_BTAB_ALLACCOUNTS</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get table strings" enabled="true">
                    <collectionProp name="ModuleController.node_path">
                      <stringProp name="-1227702913">WorkBench</stringProp>
                      <stringProp name="1982486716">Bank++</stringProp>
                      <stringProp name="1089177806">Модули</stringProp>
                      <stringProp name="-240579724">Get table strings AM_BTAB_ALLACCOUNTS</stringProp>
                    </collectionProp>
                  </ModuleController>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
0000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000
0000000000a186010000000000</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                  <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
                    <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                    <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                    <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                    <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                    <boolProp name="TCPSampler.nodelay">false</boolProp>
                    <stringProp name="TCPSampler.timeout"></stringProp>
                    <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
0000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000
0000000000a186010000000000</stringProp>
                    <stringProp name="ConfigTestElement.username"></stringProp>
                    <stringProp name="ConfigTestElement.password"></stringProp>
                  </TCPSampler>
                  <hashTree/>
                </hashTree>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_ALLACCOUNTS" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_AM_BTAB_ALLACCOUNTS}}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если не нашли клиентов" enabled="true">
              <stringProp name="IfController.condition">&quot;${Cu_Code}&quot; == &quot;FAILED&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Закрыть управление счетами" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="-999251746">Close AccManage</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Выход из Client32" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="1982486716">Bank++</stringProp>
            <stringProp name="1089177806">Модули</stringProp>
            <stringProp name="1409027135">Logoff Client32</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Кассиры" enabled="false">
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">120</stringProp>
        <longProp name="ThreadGroup.start_time">1261491292000</longProp>
        <longProp name="ThreadGroup.end_time">1261491292000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">stopthread</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Errors" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Логины кассиров" enabled="true">
          <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="LOGIN" elementType="Argument">
                <stringProp name="Argument.name">LOGIN</stringProp>
                <stringProp name="Argument.value">${__CSVRead(${basedir}\\${serverUUID}_cashdesk.txt,0)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
              <elementProp name="LOGIN1" elementType="Argument">
                <stringProp name="Argument.name">LOGIN1</stringProp>
                <stringProp name="Argument.value">t-adm-${__Random(1,7)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
        </kg.apc.jmeter.control.ParameterizedController>
        <hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Вход в Client32" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="1560976001">Login Client32</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Управление счетами" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Return code check" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1230511136">${returnCodeCheckRegexp}</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="heartbeat" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_HowAreYou}
{${CLIENT_UUID}}
000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Открыть управление счетами" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="1757036272">Open AccManage</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Expand Cash Accounts" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;ExecuteCommand&lt;/Method&gt;
&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;&lt;xmlRequest&gt;&lt;Root&gt;&lt;Commands&gt;&lt;Command Name=&quot;EXPAND&quot;&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Ident&quot;&gt;2&lt;/Parameter&gt;&lt;/Parameters&gt;&lt;/Command&gt;&lt;/Commands&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;
&lt;Parameter Name=&quot;Acc_Presentation&quot;&gt;Code&lt;/Parameter&gt;&lt;/Parameters&gt;&lt;Tree&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Save result" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CashExpandResult</stringProp>
              <stringProp name="RegexExtractor.regex">[^\0]+</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default"></stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Reset RetryCount" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;RetryCount&quot;, &quot;0&quot;);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Пока нам встречаются заявки для подтверждения" enabled="true">
            <stringProp name="WhileController.condition">${__javaScript(0${RetryCount} &lt; 10)}</stringProp>
          </WhileController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Get random cash account" enabled="true">
              <boolProp name="Successful">true</boolProp>
              <stringProp name="Response Code (e.g. 200)">200</stringProp>
              <stringProp name="Response Message (e.g. OK)">OK</stringProp>
              <stringProp name="Response Data">${CashExpandResult}</stringProp>
              <boolProp name="SUCCESFULL">false</boolProp>
              <stringProp name="RESPONSE_CODE"></stringProp>
              <stringProp name="RESPONSE_MESSAGE"></stringProp>
              <stringProp name="RESPONSE_DATA"></stringProp>
              <intProp name="RESPONSE_TIME">0</intProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get Cash Account Node" enabled="true">
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">vars.put(&quot;TreeCashAccountNode&quot;, &quot;FAILED&quot;);

String regexp=&quot;.*Ident=\\\&quot;([0-9]+)\\\&quot;.+KGS.+Closed&amp;gt;0.+&quot;;
String str=prev.getResponseDataAsString();
String[] arr=str.split(&quot;&amp;lt;Node &quot;);
int[] matches=new int[arr.length];
int count=0;
for (int n=0; n&lt;arr.length; n++)
{

	// actions
	if (arr[n].matches(regexp))
	{
		matches[count++]=n;
	}
	else
	{
		//log.info(arr[n]);	
	}
}

if (count&gt;0)
{
	Random ran = new java.util.Random();
	int index=matches[ran.nextInt(count)];

	java.util.regex.Pattern p = java.util.regex.Pattern.compile(regexp);
	java.util.regex.Matcher m = p.matcher(arr[index]);
	if (m.find())
	{
		vars.put(&quot;TreeCashAccountNode&quot;, m.group(1));
		//log.info(m.group(1));
	}

	//log.info(Integer.toString(count));
	//log.info(Integer.toString(index));
}
else
{
	//log.info(&quot;No applicable cash account in: &quot;+str);
}

</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
              <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Uniform Random Timer" enabled="true">
                <stringProp name="ConstantTimer.delay">0</stringProp>
                <stringProp name="RandomTimer.range">1000.0</stringProp>
              </UniformRandomTimer>
              <hashTree/>
              <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                <boolProp name="resetInterpreter">true</boolProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">
int r=Integer.valueOf(vars.get(&quot;RetryCount&quot;));

vars.put(&quot;RetryCount&quot;, Integer.toString(r+1));
</stringProp>
              </BeanShellPostProcessor>
              <hashTree/>
            </hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если найдена касса" enabled="true">
              <stringProp name="IfController.condition">&quot;${TreeCashAccountNode}&quot; != &quot;FAILED&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Загрузка AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1982486716">Bank++</stringProp>
                  <stringProp name="1089177806">Модули</stringProp>
                  <stringProp name="-1691931878">Load AM_BTAB_CASH_ACCOUNT_OPERS</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create table AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterTable}
{${CLIENT_UUID}}000000
33425400
{F:32:AM_BTAB_CSINCOMERQSTLIST}
00
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
10000000b90200000401000000d582a50034e4f302677da700b2077e</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register table columns AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterColomns}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{I:7}</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Загрузка AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1982486716">Bank++</stringProp>
                  <stringProp name="1089177806">Модули</stringProp>
                  <stringProp name="1333969431">Reload AM_BTAB_CSINCOMERQSTLIST</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="Пока есть заявки - подтверждаем их" enabled="true">
                <stringProp name="WhileController.condition">${__javaScript(&quot;${WasNotFound}&quot; != &quot;YES&quot;)}</stringProp>
              </WhileController>
              <hashTree>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Select line AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                  <stringProp name="TestPlan.comments">выбирается вторая касса по номеру 1</stringProp>
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSelectLine} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{I:0}</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree>
                  <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Reset RetryCount" enabled="true">
                    <boolProp name="resetInterpreter">true</boolProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="script">vars.put(&quot;RetryCount&quot;, &quot;0&quot;);</stringProp>
                  </BeanShellPostProcessor>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get strings AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="1982486716">Bank++</stringProp>
                    <stringProp name="1089177806">Модули</stringProp>
                    <stringProp name="-1109555286">Get table strings AM_BTAB_CSINCOMERQSTLIST</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{F:60:00}
a1860100
00000000</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree>
                  <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get TrNumber" enabled="true">
                    <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                    <stringProp name="RegexExtractor.refname">TransactionNumber</stringProp>
                    <stringProp name="RegexExtractor.regex">\t([0-9]+)/1\t</stringProp>
                    <stringProp name="RegexExtractor.template">$1$</stringProp>
                    <stringProp name="RegexExtractor.default">FAILED</stringProp>
                    <stringProp name="RegexExtractor.match_number">1</stringProp>
                  </RegexExtractor>
                  <hashTree/>
                </hashTree>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Транзакция подтверждения заявки" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="1982486716">Bank++</stringProp>
                    <stringProp name="1089177806">Модули</stringProp>
                    <stringProp name="-1647352376">Транзакция подтверждения CSCUEXI</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
                <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                  <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                  <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                  <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                  <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                  <boolProp name="TCPSampler.nodelay">false</boolProp>
                  <stringProp name="TCPSampler.timeout"></stringProp>
                  <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{F:60:00}
a1860100
00000000</stringProp>
                  <stringProp name="ConfigTestElement.username"></stringProp>
                  <stringProp name="ConfigTestElement.password"></stringProp>
                </TCPSampler>
                <hashTree/>
                <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Загрузка AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                  <collectionProp name="ModuleController.node_path">
                    <stringProp name="-1227702913">WorkBench</stringProp>
                    <stringProp name="1982486716">Bank++</stringProp>
                    <stringProp name="1089177806">Модули</stringProp>
                    <stringProp name="1333969431">Reload AM_BTAB_CSINCOMERQSTLIST</stringProp>
                  </collectionProp>
                </ModuleController>
                <hashTree/>
              </hashTree>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close AM_BTAB_CSINCOMERQSTLIST" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}
00000031
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Закрыть управление счетами" enabled="true">
            <collectionProp name="ModuleController.node_path">
              <stringProp name="-1227702913">WorkBench</stringProp>
              <stringProp name="1982486716">Bank++</stringProp>
              <stringProp name="1089177806">Модули</stringProp>
              <stringProp name="-999251746">Close AccManage</stringProp>
            </collectionProp>
          </ModuleController>
          <hashTree/>
        </hashTree>
        <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Выход из Client32" enabled="true">
          <collectionProp name="ModuleController.node_path">
            <stringProp name="-1227702913">WorkBench</stringProp>
            <stringProp name="1982486716">Bank++</stringProp>
            <stringProp name="1089177806">Модули</stringProp>
            <stringProp name="1409027135">Logoff Client32</stringProp>
          </collectionProp>
        </ModuleController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Модули" enabled="false">
        <stringProp name="TestPlan.comments">этот компонент надо держать отключенным</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1262974409000</longProp>
        <longProp name="ThreadGroup.end_time">1262974409000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Login Client32" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="RPC Bind Once" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get address from load balancer" enabled="true"/>
            <hashTree>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="TCP Sampler" enabled="true">
                <stringProp name="TCPSampler.classname">BinaryTCPClientImpl</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">false</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout">100</stringProp>
                <stringProp name="TCPSampler.request">240005006d61696e00000000000000000000000000000000000000000000000000000000</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree>
                <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
                  <boolProp name="resetInterpreter">true</boolProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="script">String strData=prev.getResponseDataAsString();
byte[] byteData=org.apache.jmeter.protocol.tcp.sampler.BinaryTCPClientImpl.hexStringToByteArray(strData);

String asInt = kg.apc.jmeter.dcerpc.DCERPCMarshalling.unmarshalData(byteData, &quot;I&quot;);
String[] ints=asInt.split(&quot;,&quot;);
vars.put(&quot;serverPort&quot;, ints[81]); // int #81 is our port

String asText = kg.apc.jmeter.dcerpc.DCERPCMarshalling.unmarshalData(byteData, &quot;S&quot;);
String[] data=asText.split(&quot;[{}]&quot;);
vars.put(&quot;serverAddr&quot;, data[3]);
vars.put(&quot;serverUUID&quot;, data[5]);
</stringProp>
                </BeanShellPostProcessor>
                <hashTree/>
                <SizeAssertion guiclass="SizeAssertionGui" testclass="SizeAssertion" testname="Size Assertion" enabled="true">
                  <longProp name="SizeAssertion.size">786</longProp>
                  <intProp name="SizeAssertion.operator">1</intProp>
                </SizeAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="RPC Bind" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">bind ${serverUUID} 8a885d04-1ceb-11c9-9fe8-08002b104860</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-582565410">^d016d016........0500........00..0100000000000000........................................$</stringProp>
                </collectionProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Do Login" enabled="true"/>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1230511136">${returnCodeCheckRegexp}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="IsServerAlive" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(0,1,callID)} ${OpNum_IsServerListening}
00000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register User" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_BPP_RegularUserRegistr} I:1
{D:${CLIENT_UUID}}005c00
{D:FINOFFICE}
6500
{D:FIN-APC}
{D:C}
7300
{D:${LOGIN}}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Auth User" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_BPP_RegularUserSignIn}
{D:${CLIENT_UUID}}000000
09000000
00000000
00000000
00494e4f
{I:${heartbeatTimeout}}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get Prog Versions" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetClPreogramsVer}
{${CLIENT_UUID}}
00000061
{D:VER=1,LCMAT}
e8030000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="GetUserRights" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetUserRights} S
{${CLIENT_UUID}}
000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="GetXMLOptions" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;&lt;Name&gt;BppXMLOptions&lt;/Name&gt;&lt;Version&gt;2&lt;/Version&gt;&lt;Method&gt;GetXMLOptionsFromServer&lt;/Method&gt;&lt;Parameters&gt;&lt;ptrXMLDOM/&gt;&lt;/Parameters&gt;&lt;/Request&gt;}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get OurBankSWIFT" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">OurBankSWIFT</stringProp>
                <stringProp name="RegexExtractor.regex">&lt;SWIFT&gt;([^&lt;]+)&lt;/SWIFT&gt;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">FAILED</stringProp>
                <stringProp name="RegexExtractor.match_number">0</stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Put User Defaults" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_PutUserDefaults}
{${CLIENT_UUID}}
00000064
{D:.,R}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Logoff Client32" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Logoff User" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_BPP_RegularUserSignOff}
{${CLIENT_UUID}}0000006400000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1230511136">${returnCodeCheckRegexp}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Open AccManage" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="AccManageRegistr" enabled="true">
            <stringProp name="TestPlan.comments">есть нестабильность в выборке - иногда выбирает не то что надо</stringProp>
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageRegistr&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;Registration&lt;/Method&gt;
&lt;Parameters&gt;
	&lt;nMainFlag&gt;25&lt;/nMainFlag&gt;
	&lt;nTreeType&gt;2&lt;/nTreeType&gt;
	&lt;strAllBranches&gt;&lt;/strAllBranches&gt;
	&lt;strTabNames&gt;&lt;/strTabNames&gt;
&lt;/Parameters&gt;
&lt;/Request&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Active Branch" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActiveBranch</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;strAllBranches&gt;([^&lt;]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="Get active branch" enabled="true">
            <boolProp name="Successful">true</boolProp>
            <stringProp name="Response Code (e.g. 200)">200</stringProp>
            <stringProp name="Response Message (e.g. OK)">OK</stringProp>
            <stringProp name="Response Data">00000000,${ActiveBranch}</stringProp>
            <boolProp name="SUCCESFULL">false</boolProp>
            <stringProp name="RESPONSE_CODE"></stringProp>
            <stringProp name="RESPONSE_MESSAGE"></stringProp>
            <stringProp name="RESPONSE_DATA"></stringProp>
            <intProp name="RESPONSE_TIME">0</intProp>
          </kg.apc.jmeter.samplers.DummySampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Active Branch" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">ActiveBranch</stringProp>
              <stringProp name="RegexExtractor.regex">[^0]([^,]{1,7}),([^l][^l]+,)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number">0</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="AccManagePeriods" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppAccManagePeriods&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetPeriods&lt;/Method&gt;
&lt;Parameters&gt;&lt;strOpenPeriodDateFrom&gt;&lt;/strOpenPeriodDateFrom&gt;&lt;/Parameters&gt;
&lt;/Request&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="BppTree - Open" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} I:1
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;Open&lt;/Method&gt;
&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;
&lt;xmlRequest&gt;&lt;Root&gt;&lt;Commands/&gt;&lt;Parameters&gt;
&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;
&lt;/Parameters&gt;&lt;Tree&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="BppTree - INIT" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;ExecuteCommand&lt;/Method&gt;
&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;&lt;xmlRequest&gt;
&lt;Root&gt;&lt;Commands&gt;&lt;Command Name=&quot;INIT&quot;/&gt;&lt;/Commands&gt;&lt;Parameters&gt;
&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;
&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;
&lt;/Parameters&gt;&lt;Tree&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Close AccManage" enabled="true">
          <boolProp name="TransactionController.parent">false</boolProp>
        </TransactionController>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="BppTree - Close" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppTree&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;Close&lt;/Method&gt;
&lt;Parameters&gt;&lt;nIdent&gt;           0&lt;/nIdent&gt;&lt;xmlRequest&gt;&lt;Root&gt;&lt;Commands/&gt;&lt;Parameters&gt;&lt;Parameter Name=&quot;Branch&quot;&gt;${ActiveBranch}&lt;/Parameter&gt;&lt;Parameter Name=&quot;Process&quot;&gt;C&lt;/Parameter&gt;&lt;Parameter Name=&quot;ShowClosed&quot;&gt;0&lt;/Parameter&gt;
&lt;/Parameters&gt;&lt;Tree&gt;
&lt;Node Moniker=&quot;CASH_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;CashAccounts&lt;/Suffix&gt;
&lt;Order&gt;3&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Cash Desks&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CREDITORS&quot;&gt;
&lt;Suffix&gt;Deposits&lt;/Suffix&gt;
&lt;Order&gt;4&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Deposit Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CREDITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTS&quot;&gt;
&lt;Suffix&gt;Customers&lt;/Suffix&gt;
&lt;Order&gt;2&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;All Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CUSTOMERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;REPORTS&quot;&gt;
&lt;Suffix&gt;Reports&lt;/Suffix&gt;
&lt;Order&gt;99&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Reports&lt;/English&gt;
&lt;Russian&gt;&lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_BASIC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;SETTLEMENTS&quot;&gt;
&lt;Suffix&gt;Settlements&lt;/Suffix&gt;
&lt;Order&gt;8&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Settlement Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_SETTL_HOLDERS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;DEBTORS&quot;&gt;
&lt;Suffix&gt;Loans&lt;/Suffix&gt;
&lt;Order&gt;6&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Loan Management&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_DEBITORS&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;WRONG_ACCOUNTS&quot;&gt;
&lt;Suffix&gt;WrongAccounts&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Wrong Destination Credits&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_WRONG_ACC&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CURRENTS&quot;&gt;
&lt;Suffix&gt;Currents&lt;/Suffix&gt;
&lt;Order&gt;5&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Current Account Holders&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CL_FULLLIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;ACCOUNTING&quot;&gt;
&lt;Suffix&gt;Accounting&lt;/Suffix&gt;
&lt;Order&gt;1&lt;/Order&gt;
&lt;Clients&gt;A&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Chart of Accounts&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_AC_CA&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;OWNS&quot;&gt;
&lt;Suffix&gt;Owns&lt;/Suffix&gt;
&lt;Order&gt;7&lt;/Order&gt;
&lt;Clients&gt;CA&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Own Accounts&lt;/English&gt;
&lt;Russian&gt; &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_OWN&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;PLASTICS&quot;&gt;
&lt;Suffix&gt;Plastics&lt;/Suffix&gt;
&lt;Order&gt;10&lt;/Order&gt;
&lt;Clients&gt;&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Plastics Accounts&lt;/English&gt;
&lt;Russian&gt;C &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CC_LIST&lt;/Right&gt;
&lt;/Node&gt;
&lt;Node Moniker=&quot;CASH_PAYMENTS&quot;&gt;
&lt;Suffix&gt;CashPayments&lt;/Suffix&gt;
&lt;Order&gt;9&lt;/Order&gt;
&lt;Clients&gt;C&lt;/Clients&gt;
&lt;Caption&gt;
&lt;English&gt;Tranferred Cash Payments&lt;/English&gt;
&lt;Russian&gt;  &lt;/Russian&gt;
&lt;/Caption&gt;
&lt;Right&gt;RT_CASH_PAYMENTS&lt;/Right&gt;
&lt;/Node&gt;
&lt;/Tree&gt;&lt;/Root&gt;&lt;/xmlRequest&gt;&lt;nDebug&gt;           0&lt;/nDebug&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="AccManageUnRegister" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppAccManageRegistr&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;Registration&lt;/Method&gt;
&lt;Parameters&gt;&lt;nMainFlag&gt;0&lt;/nMainFlag&gt;&lt;nTreeType&gt;0&lt;/nTreeType&gt;&lt;strAllBranches&gt;&lt;/strAllBranches&gt;&lt;strTabNames&gt;&lt;/strTabNames&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get table strings AM_BTAB_FOUND_CUSTOMERS" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Full_Path" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Full_Path}
000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Cu_Code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Cu_Code</stringProp>
              <stringProp name="RegexExtractor.regex">\{ACCOUNTS\\([0-9]{5,7})\}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Number" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Ac_Number}
727901000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Cu_Name" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Cu_Name}
01000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Local" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Ac_Local}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Bnk_AnName" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Bnk_AnName}
0001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get table strings AM_BTAB_ALLACCOUNTS" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Full_Path" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Full_Path}
000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Number" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Ac_Number}
727901000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Cu_Name" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Cu_Name}
01000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Local" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Ac_Local}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract SelectedLocalAcc" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SelectedLocalAcc</stringProp>
              <stringProp name="RegexExtractor.regex">\{(.+)\}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Bnk_AnName" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Bnk_AnName}
0001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Closed" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Closed}
006501000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Currency" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S:3 /* ${SelectedLocalAcc} */
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Currency}
0000000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Account currency must be KGS" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="115898337">{KGS}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Currency" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_ALLACCOUNTS}}
e9030000
{D:Currency}
0000000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Get table strings AM_BTAB_CSINCOMERQSTLIST" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Full_Path " enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Full_Path}
000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Extract Cu_Code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">Cu_Code</stringProp>
              <stringProp name="RegexExtractor.regex">\{ACCOUNTS\\([0-9]{5,7})\}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Number" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Ac_Number}
727901000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Cu_Name" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Cu_Name}
01000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Ac_Local" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Ac_Local}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Bnk_AnName" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Bnk_AnName}
0001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Obj_Category" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Obj_Category}
00000001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Storno_Flag" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Storno_Flag}
0001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string Storno_Flag" enabled="true">
            <stringProp name="TestPlan.comments">зачем второй раз - неясно</stringProp>
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:Storno_Flag}
0001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string WAITFLAG" enabled="true">
            <stringProp name="TestPlan.comments">зачем второй раз - неясно</stringProp>
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
e9030000
{D:WAITFLAG}
0061670001000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reload AM_BTAB_ALLACCOUNTS" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter AM_BTAB_ALLACCOUNTS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}000000
00
{I:${tab_AM_BTAB_ALLACCOUNTS}}
0000000000000200
{D:&lt;PARAMLIST&gt;AM_BTAB_ALLACCOUNTS&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
&lt;ShowClosed Type=&quot;Int&quot;&gt;0&lt;/ShowClosed&gt;
&lt;TableHandle Type=&quot;Int&quot;&gt;${tab_AM_BTAB_ALLACCOUNTS}&lt;/TableHandle&gt;
&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
&lt;TreeItem Type=&quot;Int&quot;&gt;${NodeIdent}&lt;/TreeItem&gt;
&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Table AM_BTAB_ALLACCOUNTS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get row to select" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;RowToSelect&quot;, &quot;FAILED&quot;);

String str=prev.getResponseDataAsString();
String[] arr=str.split(&quot;\n|\r&quot;);
int[] matches=new int[arr.length];
count=0;
for (int n=0; n&lt;arr.length; n++)
{
	if (arr[n].matches(&quot;.*\t(CU|CA|CC)\t[0-9]*\tKGS\t.*&quot;))
	{
		matches[count++]=n;
	}
	else
	{
		// log.info(&quot;Not matched: &quot;+arr[n]);
	}
}

if (count&gt;0)
{
	ran = new java.util.Random();
	int index=ran.nextInt(count);
	
	vars.put(&quot;RowToSelect&quot;, Integer.toString(index));
	//log.info(&quot;Count: &quot;+Integer.toString(count));
	//log.info(&quot;Row: &quot;+Integer.toString(index));
}
else
{
	//log.info(&quot;No CU KGS in: &quot;+str);
}</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Reload AM_BTAB_CSINCOMERQSTLIST" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter AM_BTAB_CSINCOMERQSTLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}000000
00
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
0000000000000200
{D:&lt;PARAMLIST&gt;AM_BTAB_CSINCOMERQSTLIST
	&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
	&lt;DtFrom Type=&quot;String&quot;&gt;${__time(yyyyMMdd)}&lt;/DtFrom&gt;
	&lt;DtTo Type=&quot;String&quot;&gt;${__time(yyyyMMdd)}&lt;/DtTo&gt;
	&lt;ShowClosed Type=&quot;Int&quot;&gt;0&lt;/ShowClosed&gt;
	&lt;TableHandle Type=&quot;Int&quot;&gt;${tab_AM_BTAB_CSINCOMERQSTLIST}&lt;/TableHandle&gt;
	&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
	&lt;TreeItem Type=&quot;Int&quot;&gt;${TreeCashAccountNode}&lt;/TreeItem&gt;
	&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Table AM_BTAB_CSINCOMERQSTLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable}
{${CLIENT_UUID}}
00000033
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{I:0}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_CSINCOMERQSTLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S I:2
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{F:60:00}
a1860100
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get not found" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WasNotFound</stringProp>
              <stringProp name="RegexExtractor.regex">\r[^\r]+\r[^\r]*(})</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">YES</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Click in tree on All Customers" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create table AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterTable}
{${CLIENT_UUID}}000000
33425400
{F:32:AM_BTAB_FOUND_CUSTOMERS}
00
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
10000000b90200000301000000d5828900d4df9402677d8b00540dc3</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register table columns AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterColomns}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
{I:4}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}000000
00
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
0000000000000200
{D:&lt;PARAMLIST&gt;AM_BTAB_FOUND_CUSTOMERS&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
	&lt;TableHandle Type=&quot;Int&quot;&gt;${tab_AM_BTAB_FOUND_CUSTOMERS}&lt;/TableHandle&gt;
	&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
	&lt;TreeItem Type=&quot;Int&quot;&gt;1&lt;/TreeItem&gt;
	&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Table AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Транзакция взноса CLCUIRQ" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Prepare trans CLCUIRQ" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvPrepareTrans} I
{${CLIENT_UUID}}
00000035
{D:CLCUIRQ}
{P:&lt;Parameters&gt;&lt;Table&gt;ACCMANAGEALLACCOUNTS&lt;/Table&gt;&lt;Branch&gt;${ActiveBranch}&lt;/Branch&gt;&lt;Ident&gt;0&lt;/Ident&gt;&lt;/Parameters&gt;  }</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get min valuedate" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetMinValueDate}
{${CLIENT_UUID}}000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Parse local number" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvParseLocalNumber}
{${CLIENT_UUID}}000000
00dc010000dc01000000000000dc01000000000000
{Z:${SelectedLocalAcc}}
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get bank name" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetBankName} S
{${CLIENT_UUID}}000000
3500000000000000004700000000000000
{Q:${OurBankSWIFT}}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get Account Branch" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}00
000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppAccountBranch&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetAccountBranch&lt;/Method&gt;
&lt;Parameters&gt;&lt;strAc_Number&gt;&lt;/strAc_Number&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create box CASHACCLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterBox}
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
{D:CASHACCLIST}
00000000
00000200
{D:&lt;PARAMLIST&gt;CASHACCLIST&lt;Currency Type=&quot;String&quot;&gt;%%%&lt;/Currency&gt;&lt;/PARAMLIST&gt;  }</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get box frame CASHACCLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetVarFrame} S:6
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
02000000
FFFFFFFF
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Get cash account name and index" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">vars.put(&quot;CashAccount&quot;, &quot;FAILED&quot;);
vars.put(&quot;CashAccountNo&quot;, &quot;FAILED&quot;);

String str=prev.getResponseDataAsString();
String[] arr=str.split(&quot;\t&quot;);
int[] matches=new int[arr.length];
count=0;
for (int n=0; n&lt;arr.length; n++)
{
	String ss=arr[n];
	int i=ss.length();
	if (i&lt;4) continue;
	if (ss.substring(i-3).equals(&quot;KGS&quot;))
	{
		matches[count++]=n;
	}
}

if (count&gt;0)
{
	ran = new java.util.Random();
	int index=matches[ran.nextInt(count)];
	
	vars.put(&quot;CashAccount&quot;, arr[index]);
	vars.put(&quot;CashAccountNo&quot;, Integer.toString(index));
}


</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Однократная загрузка бокса кодов платежей" enabled="false"/>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create box PMNTREFCODES" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterBox}
{${CLIENT_UUID}}000000
35
{I:${tab_PMNTREFCODES}}
{D:PMNTREFCODES}
000000
00000000
00000200
{D:&lt;PARAMLIST&gt;PMNTREFCODES&lt;/PARAMLIST&gt;  }</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get box frame PMNTREFCODES" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetVarFrame}
{${CLIENT_UUID}}000000
35
{I:${tab_PMNTREFCODES}}
02000000
FFFFFFFF
00000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If we have cash account" enabled="true">
            <stringProp name="IfController.condition">&quot;${CashAccount}&quot; != &quot;FAILED&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get Account Branch" enabled="true">
              <stringProp name="TestPlan.comments">непонятно зачем второй раз вызывается...</stringProp>
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppAccountBranch&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetAccountBranch&lt;/Method&gt;
&lt;Parameters&gt;&lt;strAc_Number&gt;&lt;/strAc_Number&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Select line CASHACCLIST" enabled="true">
              <stringProp name="TestPlan.comments">выбирается вторая касса по номеру 1</stringProp>
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSelectLine}
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
{I:${CashAccountNo}}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string NSACURR CASHACCLIST" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S:3
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
e9030000
{D:NSACURR}
01000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CashAccCurr" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CashAccCurr</stringProp>
                <stringProp name="RegexExtractor.regex">\{([A-Z]{3})\}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">FAILED</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string NSACODE CASHACCLIST" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr} S
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
e9030000
{D:NSACODE}
01000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get CashAccCode" enabled="true">
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">CashAccCode</stringProp>
                <stringProp name="RegexExtractor.regex">{(.+)}</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">FAILED</stringProp>
                <stringProp name="RegexExtractor.match_number"></stringProp>
              </RegexExtractor>
              <hashTree/>
            </hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get Cash Account Branch" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppAccountBranch&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetAccountBranch&lt;/Method&gt;
&lt;Parameters&gt;&lt;strAc_Number&gt;${CashAccount}&lt;/strAc_Number&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get table string NSACODE CASHACCLIST" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabGetBaseTableStr}
{${CLIENT_UUID}}000000
35
{I:${tab_CASHACCLIST}}
e9030000
{D:NSACODE}
01000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
            <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Исполнить транзакцию" enabled="true">
              <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </kg.apc.jmeter.control.ParameterizedController>
            <hashTree>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="CLCUIRQ" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1982486716">Bank++</stringProp>
                  <stringProp name="1089177806">Модули</stringProp>
                  <stringProp name="-1670384346">Exec trans CLCUIRQ</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If we have no cash account" enabled="true">
            <stringProp name="IfController.condition">&quot;${CashAccount}&quot; == &quot;FAILED&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Cancel trans" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvCancelTrans}
{${CLIENT_UUID}}00000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_ALLACCOUNTS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_ALLACCOUNTS}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close CASHACCLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_CASHACCLIST}}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Однократное закрытие кодов платежей" enabled="false"/>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Close PMNTREFCODES" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabUnregisterTable}
{${CLIENT_UUID}}000000
31
{I:${tab_PMNTREFCODES}}</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Exec trans CLCUIRQ" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Exec trans CLCUIRQ" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvExecTrans} S
{${CLIENT_UUID}}00000000
{D:CLCUIRQ}
{Q:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Orders&gt;
&lt;Order&gt;
&lt;Transaction Dialog=&quot;BPPCUIRQ&quot; Confirmation=&quot;380,20&quot; Help=&quot;H_BPPCASH_RCPT&quot; Title=&quot;Incasso Request&quot; Charge=&quot;&quot;&gt;&lt;Code&gt;CLCUIRQ&lt;/Code&gt;&lt;OffCode Number=&quot;1&quot; Unit=&quot;UNIT_LOGIC&quot; Code=&quot;508&quot; Format=&quot;C&quot; Length=&quot;1&quot;/&gt;&lt;User Number=&quot;2&quot; Unit=&quot;UNIT_USER&quot; Format=&quot;C&quot; Length=&quot;250&quot;/&gt;&lt;/Transaction&gt;

&lt;Service&gt;&lt;Date Number=&quot;3&quot; Unit=&quot;UNIT_ORDDATE_ED&quot; Code=&quot;119&quot; Format=&quot;D&quot; Length=&quot;0&quot; Function=&quot;ProcOrderDate&quot;&gt;
${__time(yyyy-MM-dd)}&lt;/Date&gt;&lt;IncomingRef Number=&quot;5&quot; Unit=&quot;UNIT_ORDER_NMB_ED&quot; Code=&quot;289&quot; Format=&quot;C&quot; Length=&quot;20&quot; Function=&quot;ProcOrderReference&quot;&gt;
${__threadNum}&lt;/IncomingRef&gt;&lt;Flags&gt;&lt;Debit Number=&quot;17&quot; Unit=&quot;UNIT_DEBIT_RB&quot; Code=&quot;113&quot; Format=&quot;I&quot; Length=&quot;4&quot; Function=&quot;ProcDebitCheckbox&quot;&gt;7667830&lt;/Debit&gt;&lt;AddToOriginators Number=&quot;37&quot; Unit=&quot;UNIT_ADD_TO_ORIG_REF_CHB&quot; Code=&quot;191&quot; Format=&quot;C&quot; Length=&quot;1&quot; Function=&quot;ProcAddToBen&quot;&gt;N&lt;/AddToOriginators&gt;&lt;/Flags&gt;&lt;Rate&gt;&lt;Rate Number=&quot;19&quot; Unit=&quot;UNIT_RATE_ED&quot; Code=&quot;175&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcRatesList&quot; Pattern=&quot;%19.9f&quot;&gt;
1.000000000&lt;/Rate&gt;&lt;Spread Number=&quot;20&quot; Unit=&quot;UNIT_SPREAD_ED&quot; Code=&quot;277&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcRatesList&quot; Pattern=&quot;%12.9f&quot;&gt;0.000000000&lt;/Spread&gt;&lt;/Rate&gt;
&lt;Charge&gt;&lt;Amount Number=&quot;23&quot; Unit=&quot;UNIT_CHARGE_ED&quot; Code=&quot;121&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcCharge&quot; Pattern=&quot;%19.2f&quot;&gt;
${ChargeAmount}&lt;/Amount&gt;&lt;Currency Number=&quot;24&quot; Unit=&quot;UNIT_CHARGE_CURR_ED&quot; Code=&quot;202&quot; Format=&quot;C&quot; Length=&quot;3&quot; Function=&quot;ProcChargeCurrency&quot;&gt;
${CashAccCurr}&lt;/Currency&gt;&lt;/Charge&gt;&lt;Details Number=&quot;33&quot; Unit=&quot;UNIT_DETAILS_ED&quot; Code=&quot;128&quot; Format=&quot;C&quot; Length=&quot;600&quot; Function=&quot;ProcsDetails&quot;&gt;
load test ${__threadNum} for rnd ${__Random(1,1000)}&lt;/Details&gt;&lt;IncassoBag Number=&quot;34&quot; Unit=&quot;UNIT_INCASSO_BAG_ED&quot; Code=&quot;450&quot; Format=&quot;C&quot; Length=&quot;35&quot; Function=&quot;ProcsIncassoBag&quot;&gt;&lt;/IncassoBag&gt;&lt;Note Number=&quot;36&quot; Unit=&quot;UNIT_NOTE_ED&quot; Code=&quot;370&quot; Format=&quot;C&quot; Length=&quot;600&quot; Function=&quot;ProcNote&quot;&gt;&lt;/Note&gt;
&lt;!-- &lt;PaymentCode Number=&quot;38&quot; Unit=&quot;UNIT_REFER_CB&quot; Code=&quot;280&quot; Format=&quot;C&quot; Length=&quot;607&quot; Function=&quot;ProcReferList&quot;&gt;REFERENCE\9\10000000\11000000\11100000\11110000\11111000\11111100&lt;/PaymentCode&gt; --&gt;
&lt;PaymentCode Number=&quot;38&quot; Unit=&quot;UNIT_PAYMENT_CODE_CB&quot; Code=&quot;298&quot; Format=&quot;C&quot; Length=&quot;607&quot; Function=&quot;ProcPaymentCodeList&quot;&gt;REFERENCE\9\10000000\11000000\11100000\11110000\11111000\11111100&lt;/PaymentCode&gt;
&lt;AnalyseCodeHint Number=&quot;43&quot; Unit=&quot;UNIT_ANCODE_HINT_ED&quot; Code=&quot;346&quot; Format=&quot;C&quot; Length=&quot;250&quot; Function=&quot;ProcAnCodeHint&quot;&gt;
${AnalyticHint}&lt;/AnalyseCodeHint&gt;&lt;/Service&gt;

&lt;OtherControls&gt;&lt;Control Number=&quot;4&quot; Unit=&quot;UNIT_ORDDATE_MSB&quot; Code=&quot;120&quot; Length=&quot;0&quot; Function=&quot;ProcOrderDateSpin&quot;/&gt;&lt;Control Number=&quot;7&quot; Unit=&quot;UNIT_VALDATE_MSB&quot; Code=&quot;101&quot; Length=&quot;0&quot; Function=&quot;ProcValueDateSpin&quot;/&gt;&lt;Control Number=&quot;9&quot; Unit=&quot;UNIT_CORR_VALDATE_MSB&quot; Code=&quot;111&quot; Length=&quot;0&quot; Function=&quot;ProcNostroValueDateSpin&quot;/&gt;&lt;Control Number=&quot;16&quot; Unit=&quot;UNIT_RATES_PB&quot; Code=&quot;126&quot; Length=&quot;0&quot; Function=&quot;ProcRatesButton&quot;/&gt;&lt;Control Number=&quot;18&quot; Unit=&quot;UNIT_CREDIT_RB&quot; Code=&quot;114&quot; Format=&quot;I&quot; Length=&quot;4&quot; Function=&quot;ProcDebitCheckbox&quot;&gt;7667830&lt;/Control&gt;&lt;Control Number=&quot;25&quot; Unit=&quot;UNIT_CHARGE_PERCENT_ED&quot; Code=&quot;203&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcChargePercent&quot; Pattern=&quot;%7.3f&quot;&gt;0.000&lt;/Control&gt;&lt;Control Number=&quot;30&quot; Unit=&quot;UNIT_SELECT_ORIG_PB&quot; Code=&quot;403&quot; Length=&quot;0&quot; Function=&quot;ProcsBenSelect&quot;/&gt;&lt;Control Number=&quot;35&quot; Unit=&quot;UNIT_RATESIGN_CH&quot; Code=&quot;367&quot; Format=&quot;I&quot; Length=&quot;4&quot; Function=&quot;ProcRateSignCheckbox&quot;&gt;1&lt;/Control&gt;&lt;Control Number=&quot;42&quot; Unit=&quot;UNIT_SELECT_TEMPLATE_PB&quot; Code=&quot;345&quot; Format=&quot;C&quot; Length=&quot;1&quot; Function=&quot;ProcTemplateSelect&quot;&gt;&lt;/Control&gt;&lt;Control Number=&quot;44&quot; Unit=&quot;UNIT_OK&quot; Code=&quot;460&quot; Length=&quot;0&quot; Function=&quot;ProcOKButton&quot;/&gt;&lt;Control Number=&quot;45&quot; Unit=&quot;UNIT_CANCEL&quot; Code=&quot;461&quot; Length=&quot;0&quot; Function=&quot;ProcCancelButton&quot;/&gt;&lt;Control Number=&quot;45&quot; Unit=&quot;UNIT_TAB&quot; Format=&quot;C&quot; Length=&quot;250&quot;&gt;
ACCMANAGEALLACCOUNTS&lt;/Control&gt;&lt;Control Number=&quot;45&quot; Unit=&quot;UNIT_IDENT&quot; Format=&quot;C&quot; Length=&quot;250&quot;&gt;0&lt;/Control&gt;&lt;Control Number=&quot;45&quot; Unit=&quot;UNIT_ORG_ACCKIND_ED&quot; Code=&quot;338&quot; Format=&quot;C&quot; Length=&quot;2&quot; Function=&quot;Skip&quot;&gt;
CA&lt;/Control&gt;&lt;/OtherControls&gt;

&lt;Beneficiary&gt;&lt;Account&gt;&lt;Credit&gt;&lt;Date Number=&quot;6&quot; Unit=&quot;UNIT_VALDATE_ED&quot; Code=&quot;100&quot; Format=&quot;D&quot; Length=&quot;0&quot; Function=&quot;ProcValueDate&quot;&gt;
${__time(yyyy-MM-dd)}&lt;/Date&gt;&lt;Amount Number=&quot;21&quot; Unit=&quot;UNIT_CREDIT_AMOUNT_ED&quot; Code=&quot;117&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcCreditAmount&quot; Pattern=&quot;%19.2f&quot;&gt;
${TransactionAmount}&lt;/Amount&gt;&lt;Split Number=&quot;32&quot; Unit=&quot;UNIT_DEBIT_SPLIT_TRANS_PB&quot; Code=&quot;295&quot; Format=&quot;B&quot; Length=&quot;1500&quot; Complex=&quot;1&quot; Transformer=&quot;TRO_SPLIT.xsl&quot; Function=&quot;ProcSplitTrans&quot;/&gt;&lt;/Credit&gt;&lt;Currency Number=&quot;12&quot; Unit=&quot;UNIT_CURR_ED&quot; Code=&quot;102&quot; Format=&quot;C&quot; Length=&quot;3&quot; Function=&quot;ProcCurrency&quot;&gt;
${CashAccCurr}&lt;/Currency&gt;&lt;Number Number=&quot;14&quot; Unit=&quot;UNIT_ORG_LOCAL_ACC_ED&quot; Code=&quot;276&quot; Format=&quot;C&quot; Length=&quot;35&quot; Function=&quot;ProcOrgLocalNumber&quot;&gt;
${SelectedLocalAcc}&lt;/Number&gt;&lt;/Account&gt;&lt;Customer&gt;&lt;Name Number=&quot;10&quot; Unit=&quot;UNIT_CLIENT_ED&quot; Code=&quot;103&quot; Format=&quot;C&quot; Length=&quot;64&quot; Function=&quot;ProcClientName&quot;&gt;
Load test dummy&lt;/Name&gt;&lt;Code Number=&quot;11&quot; Unit=&quot;UNIT_ACCOUNT_ED&quot; Code=&quot;104&quot; Format=&quot;C&quot; Length=&quot;7&quot; Function=&quot;ProcAccountNumber&quot;&gt;
${Cu_Code}&lt;/Code&gt;&lt;/Customer&gt;&lt;/Beneficiary&gt;

&lt;Nostro&gt;&lt;Account&gt;&lt;Debit&gt;&lt;Date Number=&quot;8&quot; Unit=&quot;UNIT_CORR_VALDATE_ED&quot; Code=&quot;110&quot; Format=&quot;D&quot; Length=&quot;0&quot; Function=&quot;ProcNostroValueDate&quot;&gt;
${__time(yyyy-MM-dd)}&lt;/Date&gt;&lt;/Debit&gt;&lt;Currency Number=&quot;29&quot; Unit=&quot;UNIT_CORR_ACC_CURR_ED&quot; Code=&quot;109&quot; Format=&quot;C&quot; Length=&quot;3&quot; Function=&quot;ProcNostroCurrency&quot;&gt;
${CashAccCurr}&lt;/Currency&gt;&lt;/Account&gt;&lt;Bank&gt;&lt;Code Number=&quot;26&quot; Unit=&quot;UNIT_BANK_ED&quot; Code=&quot;172&quot; Format=&quot;C&quot; Length=&quot;11&quot; Function=&quot;ProcBankName&quot;&gt;
${OurBankSWIFT}&lt;/Code&gt;&lt;CorrAccount Number=&quot;28&quot; Unit=&quot;UNIT_CASH_ACC_CB&quot; Code=&quot;394&quot; Format=&quot;C&quot; Length=&quot;7&quot; Function=&quot;ProcCashAccountsList&quot;&gt;
${CashAccCode}&lt;/CorrAccount&gt;&lt;/Bank&gt;&lt;/Nostro&gt;
&lt;Originator&gt;&lt;Account&gt;&lt;Debit&gt;&lt;Split Number=&quot;13&quot; Unit=&quot;UNIT_CREDIT_SPLIT_TRANS_PB&quot; Code=&quot;296&quot; Format=&quot;B&quot; Length=&quot;1500&quot; Complex=&quot;1&quot; Transformer=&quot;TRO_SPLIT.xsl&quot; Function=&quot;ProcSplitTrans&quot;/&gt;&lt;Amount Number=&quot;22&quot; Unit=&quot;UNIT_PAID_AMOUNT_ED&quot; Code=&quot;118&quot; Format=&quot;N&quot; Length=&quot;8&quot; Function=&quot;ProcPaidAmount&quot; Pattern=&quot;%19.2f&quot;&gt;
${TransactionAmount}&lt;/Amount&gt;&lt;/Debit&gt;&lt;Key Number=&quot;15&quot; Unit=&quot;UNIT_ORG_FULL_ACC_ED&quot; Code=&quot;334&quot; Format=&quot;C&quot; Length=&quot;19&quot; Function=&quot;ProcOrgFullAccount&quot;&gt;
${CustometAccountKey}&lt;/Key&gt;&lt;/Account&gt;&lt;Branch&gt;&lt;Name Number=&quot;27&quot; Unit=&quot;UNIT_BRANCH_CODE_ED&quot; Code=&quot;650&quot; Format=&quot;C&quot; Length=&quot;7&quot; Function=&quot;ProcBranchCode&quot;&gt;
${ActiveBranch}&lt;/Name&gt;&lt;/Branch&gt;&lt;Customer&gt;&lt;Name Number=&quot;31&quot; Unit=&quot;UNIT_ORIG_NAME_ED&quot; Code=&quot;400&quot; Format=&quot;C&quot; Length=&quot;98&quot; Function=&quot;ProcsBenName&quot;&gt;
load test sender&lt;/Name&gt;&lt;OKPO Number=&quot;39&quot; Unit=&quot;UNIT_ORG_OKPO_ED&quot; Code=&quot;366&quot; Format=&quot;C&quot; Length=&quot;8&quot; Function=&quot;ProcsBen_OKPO&quot;&gt;
&lt;/OKPO&gt;&lt;SFOND Number=&quot;40&quot; Unit=&quot;UNIT_ORG_SFOND_ED&quot; Code=&quot;363&quot; Format=&quot;C&quot; Length=&quot;14&quot; Function=&quot;ProcsBen_SFond&quot;&gt;
&lt;/SFOND&gt;&lt;INN Number=&quot;41&quot; Unit=&quot;UNIT_ORG_SSN_ED&quot; Code=&quot;372&quot; Format=&quot;C&quot; Length=&quot;20&quot; Function=&quot;ProcsBen_SSN&quot;&gt;
&lt;/INN&gt;&lt;/Customer&gt;&lt;/Originator&gt;
&lt;/Order&gt;
&lt;/Orders&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="-1230511136">${returnCodeCheckRegexp}</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">1</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Транзакция подтверждения CSCUEXI" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Prepare trans CSCUEXI" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvPrepareTrans} S
{${CLIENT_UUID}}
00000035
{D:CSCUEXI}
{P:&lt;Parameters&gt;&lt;Table&gt;AMCASHINCOMEREQUESTS&lt;/Table&gt;&lt;Branch&gt;${ActiveBranch}&lt;/Branch&gt;&lt;Ident&gt;0&lt;/Ident&gt;&lt;/Parameters&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="get trans xml" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">TransXML</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;\?xml[^\0]+&lt;/Orders&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$0$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get cash acc number" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">CashAccountNumber</stringProp>
              <stringProp name="RegexExtractor.regex">\&quot;ProcNostroAccountNumber\&quot;&gt;(N[0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get trans data" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetTransData} S
{${CLIENT_UUID}}
00000030
{B:${TransactionNumber}}
{D:CSCUEXI}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get client acc number" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">SelectedLocalAcc</stringProp>
              <stringProp name="RegexExtractor.regex">{([0-9]{16})}</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number">1</stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get bank name" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetBankName} S
{${CLIENT_UUID}}
00000035
00000000
00000000
47000000
00000000
{Q:${OurBankSWIFT}}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Parse local number" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvParseLocalNumber}
{${CLIENT_UUID}}000000
00dc010000dc01000000000000dc01000000000000
{Z:${SelectedLocalAcc}}
stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get min valuedate" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvGetMinValueDate}
{${CLIENT_UUID}}000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_CSINCOMERQSTLIST" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CSINCOMERQSTLIST}}
{F:60:00}
a1860100
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get VadeMecum Data" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer} S
{${CLIENT_UUID}}
00000000
{X:&lt;?xml version=&quot;1.0&quot;?&gt;
&lt;Request&gt;
&lt;Name&gt;BppVadeMecumData&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetVadeMecumData&lt;/Method&gt;
&lt;Parameters&gt;&lt;nAction&gt;0&lt;/nAction&gt;&lt;iIdent&gt;0&lt;/iIdent&gt;
&lt;strPath&gt;REFERENCE\9&lt;/strPath&gt;&lt;strMoniker&gt;&lt;/strMoniker&gt;
&lt;strNameE&gt;11111100&lt;/strNameE&gt;&lt;strNameR&gt;11111100&lt;/strNameR&gt;&lt;strDescrE&gt;&lt;/strDescrE&gt;
&lt;strDescrR&gt;&lt;/strDescrR&gt;&lt;strActiveFlag&gt;&lt;/strActiveFlag&gt;&lt;strFieldName&gt;&lt;/strFieldName&gt;
&lt;strFieldValue&gt;&lt;/strFieldValue&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PaymentCodePath" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentCodePath</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;strPath&gt;([^&lt;]+)&lt;/strPath&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get PaymentCodeMoniker" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">PaymentCodeMoniker</stringProp>
              <stringProp name="RegexExtractor.regex">&lt;strNameE&gt;([^&lt;]+)&lt;/strNameE&gt;</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="Replace Payment code and subtrans number and cash acc tag" enabled="true">
              <boolProp name="resetInterpreter">true</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">String a=vars.get(&quot;TransXML&quot;);
a=a.replaceAll(&quot;/1&lt;/FullNumber&gt;&quot;, &quot;.01&lt;/FullNumber&gt;&quot;);

String replPayCode=&quot;&lt;PaymentCode Unit=\&quot;UNIT_REFER_ED\&quot; &gt;&quot; + vars.get(&quot;PaymentCodePath&quot;)+ &quot;\\&quot;+ vars.get(&quot;PaymentCodeMoniker&quot;) + &quot;&lt;/PaymentCode&gt;&quot;;
replPayCode=replPayCode.replaceAll(&quot;\\\\&quot;, &quot;\\\\\\\\&quot;);
a=a.replaceAll(&quot;&lt;PaymentCode [^&gt;]+&gt;([^&lt;]+)&lt;/PaymentCode&gt;&quot;, replPayCode);

String replCash=&quot;&lt;CorrAccount Unit=\&quot;UNIT_NOSTRO_ACCOUNT_ED\&quot; &gt;&quot; +  vars.get(&quot;CashAccountNumber&quot;) + &quot;&lt;/CorrAccount&gt;&quot;;
a=a.replaceAll(&quot;&lt;CorrAccount [^&gt;]+&gt;([^&lt;]+)&lt;/CorrAccount&gt;&quot;, replCash);

vars.put(&quot;TransXML&quot;, a);</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Exec trans CSCUEXI" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvExecTrans} S
{${CLIENT_UUID}}
00000000
{D:CSCUEXI}
{Q:${TransXML}}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get return code" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">RC</stringProp>
              <stringProp name="RegexExtractor.regex">^([0-9a-f]{8}).+$</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">FAILED</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If trans was already confirmed" enabled="true">
            <stringProp name="IfController.condition">&quot;${RC}&quot; == &quot;22060000&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Cancel trans" enabled="true">
              <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
              <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
              <boolProp name="TCPSampler.reUseConnection">true</boolProp>
              <stringProp name="TCPSampler.port">${serverPort}</stringProp>
              <boolProp name="TCPSampler.nodelay">false</boolProp>
              <stringProp name="TCPSampler.timeout"></stringProp>
              <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvCancelTrans}
{${CLIENT_UUID}}
00000000</stringProp>
              <stringProp name="ConfigTestElement.username"></stringProp>
              <stringProp name="ConfigTestElement.password"></stringProp>
            </TCPSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Request TrTemplates" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get tran templates CLCUETD" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageTranTemplates&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetTrTemplates&lt;/Method&gt;
&lt;Parameters&gt;&lt;strCode&gt;CLCUETD&lt;/strCode&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get tran templates CLCUITD" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageTranTemplates&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetTrTemplates&lt;/Method&gt;
&lt;Parameters&gt;&lt;strCode&gt;CLCUITD&lt;/strCode&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get tran templates CLPAYKG" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageTranTemplates&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetTrTemplates&lt;/Method&gt;
&lt;Parameters&gt;&lt;strCode&gt;CLPAYKG&lt;/strCode&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get tran templates CLCUCSD" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageTranTemplates&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetTrTemplates&lt;/Method&gt;
&lt;Parameters&gt;&lt;strCode&gt;CLCUCSD&lt;/strCode&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Get tran templates CLCUIRQ" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_srvInvokeServer}
{${CLIENT_UUID}}000000
00
{X:&lt;?xml version=&quot;1.0&quot;?&gt;&lt;Request&gt;
&lt;Name&gt;BppAccManageTranTemplates&lt;/Name&gt;
&lt;Version&gt;2&lt;/Version&gt;
&lt;Method&gt;GetTrTemplates&lt;/Method&gt;
&lt;Parameters&gt;&lt;strCode&gt;CLCUIRQ&lt;/strCode&gt;&lt;/Parameters&gt;
&lt;/Request&gt;
}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="FastSearch" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter With Search AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}
00000000
{I:${tab_AM_BTAB_FOUND_CUSTOMERS}}
0000000000000200
{D:
&lt;PARAMLIST&gt;AM_BTAB_FOUND_CUSTOMERS&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
	&lt;StrSearch Type=&quot;String&quot;&gt;${SearchStr}&lt;/StrSearch&gt;
	&lt;TableHandle Type=&quot;Int&quot;&gt;${tabHandle}&lt;/TableHandle&gt;
	&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
	&lt;TreeItem Type=&quot;Int&quot;&gt;1&lt;/TreeItem&gt;
	&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Search Table AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable} I
{${CLIENT_UUID}}000000
33
{I:${tabHandle}}
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_FOUND_CUSTOMERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tabHandle}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get not found" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">WasNotFound</stringProp>
              <stringProp name="RegexExtractor.regex">.+: ([0-9]+)</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">YES</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
            <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Get LineToSelect" enabled="true">
              <stringProp name="RegexExtractor.useHeaders">false</stringProp>
              <stringProp name="RegexExtractor.refname">LineToSelect</stringProp>
              <stringProp name="RegexExtractor.regex">(1)00 объектов,</stringProp>
              <stringProp name="RegexExtractor.template">$1$</stringProp>
              <stringProp name="RegexExtractor.default">0</stringProp>
              <stringProp name="RegexExtractor.match_number"></stringProp>
            </RegexExtractor>
            <hashTree/>
          </hashTree>
          <kg.apc.jmeter.control.ParameterizedController guiclass="kg.apc.jmeter.control.ParameterizedControllerGui" testclass="kg.apc.jmeter.control.ParameterizedController" testname="Reset Cu_Code" enabled="true">
            <elementProp name="ParameterizedController" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Cu_Code" elementType="Argument">
                  <stringProp name="Argument.name">Cu_Code</stringProp>
                  <stringProp name="Argument.value">FAILED</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </kg.apc.jmeter.control.ParameterizedController>
          <hashTree>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Если что-то нашли" enabled="true">
              <stringProp name="IfController.condition">&quot;${WasNotFound}&quot; != &quot;YES&quot;</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
            </IfController>
            <hashTree>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Select line AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSelectLine}
{${CLIENT_UUID}}000000
35
{I:${tabHandle}}
{I:${LineToSelect}}</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
              <ModuleController guiclass="ModuleControllerGui" testclass="ModuleController" testname="Get table strings" enabled="true">
                <collectionProp name="ModuleController.node_path">
                  <stringProp name="-1227702913">WorkBench</stringProp>
                  <stringProp name="1982486716">Bank++</stringProp>
                  <stringProp name="1089177806">Модули</stringProp>
                  <stringProp name="640940069">Get table strings AM_BTAB_FOUND_CUSTOMERS</stringProp>
                </collectionProp>
              </ModuleController>
              <hashTree/>
              <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_FOUND_CUSTOMERS" enabled="true">
                <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
                <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
                <boolProp name="TCPSampler.reUseConnection">true</boolProp>
                <stringProp name="TCPSampler.port">${serverPort}</stringProp>
                <boolProp name="TCPSampler.nodelay">false</boolProp>
                <stringProp name="TCPSampler.timeout"></stringProp>
                <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tabHandle}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a186010000000000</stringProp>
                <stringProp name="ConfigTestElement.username"></stringProp>
                <stringProp name="ConfigTestElement.password"></stringProp>
              </TCPSampler>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Load AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true"/>
        <hashTree>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Create table AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterTable}
{${CLIENT_UUID}}000000
33425400
{F:32:AM_BTAB_CASH_ACCOUNT_OPERS}
00
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}
10000000b90200000401000000d582a500d4dff302677da700ee0632</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Register table columns AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabRegisterColomns}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}
{I:8}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Set Table Filter AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabSetTableFilter}
{${CLIENT_UUID}}000000
00
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}
0000000000000200
{D:&lt;PARAMLIST&gt;AM_BTAB_CASH_ACCOUNT_OPERS
	&lt;Branch Type=&quot;String&quot;&gt;${ActiveBranch}&lt;/Branch&gt;
	&lt;DtFrom Type=&quot;String&quot;&gt;${__time(yyyyMMdd)}&lt;/DtFrom&gt;
	&lt;DtTo Type=&quot;String&quot;&gt;99991231&lt;/DtTo&gt;
	&lt;ShowClosed Type=&quot;Int&quot;&gt;0&lt;/ShowClosed&gt;
	&lt;TableHandle Type=&quot;Int&quot;&gt;${tab_AM_BTAB_CASH_ACCOUNT_OPERS}&lt;/TableHandle&gt;
	&lt;TreeHandle Type=&quot;Int&quot;&gt;1&lt;/TreeHandle&gt;
	&lt;TreeItem Type=&quot;Int&quot;&gt;${TreeCashAccountNode}&lt;/TreeItem&gt;
	&lt;TreeType Type=&quot;Int&quot;&gt;2&lt;/TreeType&gt;
&lt;/PARAMLIST&gt;}</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Start Table AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabStartTable}
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
          <TCPSampler guiclass="TCPSamplerGui" testclass="TCPSampler" testname="Current AM_BTAB_CASH_ACCOUNT_OPERS" enabled="true">
            <stringProp name="TCPSampler.classname">kg.apc.jmeter.dcerpc.DCERPCSampler</stringProp>
            <stringProp name="TCPSampler.server">${serverAddr}</stringProp>
            <boolProp name="TCPSampler.reUseConnection">true</boolProp>
            <stringProp name="TCPSampler.port">${serverPort}</stringProp>
            <boolProp name="TCPSampler.nodelay">false</boolProp>
            <stringProp name="TCPSampler.timeout"></stringProp>
            <stringProp name="TCPSampler.request">${__intSum(${callID},1,callID)} ${OpNum_tabCurrent} S
{${CLIENT_UUID}}000000
33
{I:${tab_AM_BTAB_CASH_ACCOUNT_OPERS}}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
a1860100
00000000</stringProp>
            <stringProp name="ConfigTestElement.username"></stringProp>
            <stringProp name="ConfigTestElement.password"></stringProp>
          </TCPSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
